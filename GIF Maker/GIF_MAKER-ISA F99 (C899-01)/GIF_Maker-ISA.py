# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'GIF_Maker-ISA.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QWidget , QInputDialog , QLineEdit ,  QListWidget
import os
import json
import winshell
from win32com.client import Dispatch 
from PySide2.QtCore import QTimer
from PySide2.QtWidgets import QApplication , QMessageBox
import time 
import datetime
import sys
import random
import string
import imageio
'''Source files'''
cfile_path = os.path.realpath(__file__)
# cdir = os.path.dirname(cfile_path)# curent working directory or the 'Now'-location of the file.

# Get file name & extension
cfl_name , cfl_extnts = os.path.splitext(os.path.basename(cfile_path))

cdir = os.getcwd()

# Time
dt_clockH = datetime.datetime.now().strftime("%I")

dt_clockM = datetime.datetime.now().strftime("%M")

dt_clockS = datetime.datetime.now().strftime("%S")

dt_clockMS = datetime.datetime.now().strftime("%f")

epoch_miliseconds = int(time.time() * 1000)

dt_TMR = f"{dt_clockH}:{dt_clockM}:{dt_clockS}"

dt_time= f"{dt_clockH}:{dt_clockM}"

dt_DN = datetime.datetime.now().strftime('%p').lower()

# Date
dt_dd = datetime.datetime.now().strftime("%d")

dt_mm = datetime.datetime.now().strftime("%m")

dt_yyyy = datetime.datetime.now().strftime("%Y")

dt_wdys = datetime.datetime.now().strftime("%A").lower()

dt_mnths = datetime.datetime.now().strftime("%B")

dt_mnths_no = datetime.datetime.now().strftime("%m")

dt_date = f"{dt_dd}-{dt_mm}-{dt_yyyy}"

dt_mnthsno_mnths = f"{dt_mnths_no}-{dt_mnths}"

# Log folder details
log_dirname = "Logs"
logs_folder_path = os.path.join(cdir,log_dirname)

# Log file details
logfl_name = f"Log_{dt_date}"
log_fl = f"{logfl_name}.log"
logfl_path = os.path.join(logs_folder_path,log_fl)


# App path Json files details
paths_json_name = 'path_datas'

path_json_flkey = "path"

paths_json_file = f'{paths_json_name}.json'

paths_datas_json_file_path = os.path.join(cdir, paths_json_file)

# Audio folder with app name
main_gif_folder_name = 'GIF Maker [I.S.A]'

# gifs_app_folder_name = cfl_name
gifs_collection_folder_name = f'{main_gif_folder_name} gif collections'

# App title
app_title = "GIF Maker [Improved.Simplified.Alternative]"

class Ui_MainWindow(QWidget):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(869, 667)

        # Set APP BG 
        self.palette = QtGui.QPalette()
        self.brush = QtGui.QBrush(QtGui.QColor(33, 192, 162))
        self.brush.setStyle(QtCore.Qt.SolidPattern)
        self.palette.setBrush(QtGui.QPalette.Window, self.brush)
        MainWindow.setPalette(self.palette)

        # Set app icon
        returned_icofl_path = self.icon_fls()
        MainWindow.setWindowIcon(QtGui.QIcon(returned_icofl_path)) 

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.Mainframe = QtWidgets.QFrame(self.centralwidget)
        self.Mainframe.setGeometry(QtCore.QRect(30, 30, 821, 721))
        self.Mainframe.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.Mainframe.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Mainframe.setObjectName("Mainframe")

        self.fps_label = QtWidgets.QLabel(self.Mainframe)
        self.fps_label.setGeometry(QtCore.QRect(110+96, 29, 360, 60))
        font = QtGui.QFont()
        font.setPointSize(25)
        self.fps_label.setFont(font)
        self.fps_label.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.fps_label.setAlignment(QtCore.Qt.AlignCenter)
        self.fps_label.setObjectName("fps_label")

        self.fps_spinbox = QtWidgets.QSpinBox(self.Mainframe)
        self.fps_spinbox.setGeometry(160+96, 99, 270, 59)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(34)
        self.fps_spinbox.setFont(font)
        self.fps_spinbox.setRange(1, 999999)
        self.fps_spinbox.setObjectName("spin")

        self.Gen_button = QtWidgets.QPushButton(self.Mainframe)
        self.Gen_button.setGeometry(QtCore.QRect(70, 190, 311, 131))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(45)
        self.Gen_button.setFont(font)
        self.Gen_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Gen_button.setObjectName("Gen_button")

        self.Access_button = QtWidgets.QPushButton(self.Mainframe)
        self.Access_button.setGeometry(QtCore.QRect(440, 190, 311, 131))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(45)
        self.Access_button.setFont(font)
        self.Access_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Access_button.setObjectName("Access_button")

        self.Exit_button = QtWidgets.QPushButton(self.Mainframe)
        self.Exit_button.setGeometry(QtCore.QRect(70, 420, 311, 131))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(45)
        self.Exit_button.setFont(font)
        self.Exit_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Exit_button.setObjectName("Exit_button")

        self.reset_button = QtWidgets.QPushButton(self.Mainframe)
        self.reset_button.setGeometry(QtCore.QRect(440, 420, 311, 131))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(45)
        self.reset_button.setFont(font)
        self.reset_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.reset_button.setObjectName("reset_button")

        MainWindow.setCentralWidget(self.centralwidget)

        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 869, 23))
        self.menubar.setObjectName("menubar")

        self.menuOption = QtWidgets.QMenu(self.menubar)
        self.menuOption.setObjectName("menuOption")

        self.menuSettings = QtWidgets.QMenu(self.menuOption)
        self.menuSettings.setObjectName("menuSettings")

        self.menuOpen_Folders = QtWidgets.QMenu(self.menuOption)
        self.menuOpen_Folders.setObjectName("menuOpen_Folders")

        MainWindow.setMenuBar(self.menubar)

        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setFont(font)
        self.statusbar.setObjectName("statusbar")

        MainWindow.setStatusBar(self.statusbar)

        self.actionChange_path = QtWidgets.QAction(MainWindow)
        self.actionChange_path.setObjectName("actionChange_path")

        self.actionOpen_App_Gif_files_folder = QtWidgets.QAction(MainWindow)
        self.actionOpen_App_Gif_files_folder.setObjectName("actionOpen_App_Gif_files_folder")
        
        self.actionAccess_Log_folder = QtWidgets.QAction(MainWindow)
        self.actionAccess_Log_folder.setObjectName("actionAccess_Log_folder")

        self.actionOpen_Log_file = QtWidgets.QAction(MainWindow)
        self.actionOpen_Log_file.setObjectName("actionOpen_Log_file")

        self.menuSettings.addAction(self.actionChange_path)

        self.menuOpen_Folders.addAction(self.actionOpen_App_Gif_files_folder)

        self.menuOpen_Folders.addSeparator()

        self.menuOpen_Folders.addAction(self.actionAccess_Log_folder)

        self.menuOption.addAction(self.menuSettings.menuAction())

        self.menuOption.addAction(self.menuOpen_Folders.menuAction())

        self.menuOption.addSeparator()

        self.menuOption.addAction(self.actionOpen_Log_file)

        self.menubar.addAction(self.menuOption.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", app_title))

        self.fps_label.setText(_translate("MainWindow", "Frame per Second (fps):")) 
        self.fps_label.setStyleSheet("background-color : black; color: white")
        
        self.Gen_button.setText(_translate("MainWindow", "Generate"))
        self.Gen_button.setShortcut(_translate("MainWindow", "Return"))
        self.Gen_button.setStatusTip(_translate("MainWindow","Click here to make GIF from pictures. (Press Enter)"))
        self.Gen_button.setStyleSheet("background-color : green; color: white")
        self.Gen_button.clicked.connect(self.make_gif)

        self.Access_button.setText(_translate("MainWindow", "Access"))
        self.Access_button.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.Access_button.setStatusTip(_translate("MainWindow","Click here to access 'GIF collection' folder. (Ctrl+O)"))
        self.Access_button.setStyleSheet("background-color : blue; color: white")
        self.Access_button.clicked.connect(self.access_gif_collections)

        self.Exit_button.setText(_translate("MainWindow", "Exit"))
        self.Exit_button.setStatusTip(_translate("MainWindow","Click here to exit. (Press Esc)"))
        self.Exit_button.setShortcut(_translate("MainWindow", "Esc"))
        self.Exit_button.setStyleSheet("background-color : red; color: white")
        self.Exit_button.clicked.connect(self.exit)

        self.reset_button.setText(_translate("MainWindow", "Reset"))
        self.reset_button.setShortcut(_translate("MainWindow", "Ctrl+Z"))
        self.reset_button.setStatusTip(_translate("MainWindow", "Click here to reset values. (Ctrl+Z)"))
        self.reset_button.setStyleSheet("background-color : purple; color: white")
        self.reset_button.clicked.connect(self.rst)

        self.menuOption.setTitle(_translate("MainWindow", "Option"))

        self.menuSettings.setTitle(_translate("MainWindow", "Settings"))

        self.actionChange_path.setText(_translate("MainWindow", "Change path"))
        self.actionChange_path.setShortcut(_translate("MainWindow","Ctrl+P"))
        self.actionChange_path.triggered.connect(self.change_path_json)

        self.menuOpen_Folders.setTitle(_translate("MainWindow", "Open Folders"))

        self.actionOpen_App_Gif_files_folder.setText(_translate("MainWindow", "Open 'Gif Collection' folder"))
        self.actionOpen_App_Gif_files_folder.setShortcut(_translate("MainWindow", "Ctrl+Shift+O"))
        self.actionOpen_App_Gif_files_folder.triggered.connect(self.open_gif_collections_dir)
        
        self.actionAccess_Log_folder.setText(_translate("MainWindow", "Access \'Log\' folder"))
        self.actionAccess_Log_folder.triggered.connect(self.open_logdir)

        self.actionOpen_Log_file.setText(_translate("MainWindow", "Open Log file"))
        self.actionOpen_Log_file.setShortcut(_translate("MainWindow","Ctrl+L"))
        self.actionOpen_Log_file.triggered.connect(self.open_logfls)

    def yn_msgbox(self,txt5,title5,msg_icon):

        # returned_icofl_path = self.icon_fls()

        # print(returned_icofl_path)

        yn_msg = QMessageBox()

        yn_msg.setIcon(msg_icon)

        yn_msg.setIcon(QMessageBox.Warning)

        yn_msg.setText(txt5)
      
        yn_msg.setWindowTitle(title5)
              
        yn_msg.setStandardButtons(QMessageBox.Yes | QMessageBox.No)

        msg_button_out = yn_msg.exec()

        return msg_button_out

    def icon_fls(self):
        for file in os.listdir(cdir):
    
            # print(file)
            
            if '.ico' in file:
                try:
                    icon_flpath =os.path.join(cdir,file)
                    return icon_flpath
                except OSError:
                    pass
            else:
                pass

    def msg_autoClose(self,msg_title,msg_text,close_tmr,msg_icon):

        qm = QMessageBox()
        qm.setIcon(msg_icon)
        qm.setWindowTitle(msg_title+"           ")
        qm.setText(msg_text+"           ")
        qm.setStandardButtons(QMessageBox.Ok)
        QTimer.singleShot(close_tmr*1000,lambda : qm.done(0))
        qm.setFixedWidth(1800+len(msg_text))
        qm.setFixedHeight(1755+len(msg_text))
        qm.exec_()

    def apps_log_sys(self,logerr_msg,err_msgtitle,err_msgtxt):
        try:
            os.makedirs(logs_folder_path)
        except OSError:
            pass
        # logs_folder_path = os.path.join(logdirs6_path,log_dirname6)
        log_err = f"\n<{dt_date}\{dt_time}> , Error: {str(logerr_msg)}\n<________________________________________>\n"
        self.msg_autoClose(msg_text=f"Error cause: \n{str(err_msgtxt)} .                      ",msg_title=err_msgtitle,close_tmr=4,msg_icon=QMessageBox.Critical)
        
        with open(logfl_path,"a",encoding="utf-8") as logfl_w6:
            logfl_w6.writelines(log_err)

    def save_json(self,jsonfl_path1,k1,v1,msg_txt1,msg_title1):

        infos1 = { 
            k1:v1
        }

        with open(jsonfl_path1,'w') as jsonfl_w1:
            json.dump(infos1,jsonfl_w1)

        # self.msg_autoClose(msg_text="Path saved.",msg_title="Path update - Complete",close_tmr=2,msg_icon=QMessageBox.Information)

        self.msg_autoClose(msg_text=msg_txt1,msg_title=msg_title1,close_tmr=2,msg_icon=QMessageBox.Information)
    
    def read_json(self,jsonfl_path2,k2):

        with open(jsonfl_path2,'r') as jsonfl_r2:
            json_data = jsonfl_r2.read()

            infos_v = json.loads(json_data)[k2]

            return infos_v

    def update_json(self,json_flpath3,keys3,info3,msg_txt3,msg_title3):

        with open(json_flpath3,'r') as json_data_r:
            json_src_data = json.load(json_data_r)

            json_src_data[keys3] = info3

            with open(json_flpath3,'w') as json_fl_w:
                json.dump(json_src_data,json_fl_w)


            self.msg_autoClose(msg_text=msg_txt3,msg_title=msg_title3,close_tmr=3,msg_icon=QMessageBox.Information)

    def save_path_json(self):
        # print("\n-\ Path saved.")

        if os.path.exists(paths_datas_json_file_path)==False:
            dir_dialog_title = f"Please choose folder (or directory) to hold '{gifs_collection_folder_name}' folder:" 
            dir_dlgbox = QFileDialog.getExistingDirectory(self, caption=dir_dialog_title)

            if dir_dlgbox:
                usr_rt_v = dir_dlgbox.replace("/","\\")

                self.save_json(jsonfl_path1=paths_datas_json_file_path,k1=path_json_flkey,v1=usr_rt_v,msg_title1="Path update - Complete",msg_txt1="Path saved.")
            else:
                pass
        else:
            pass

    def foldershortcut_maker_dt(self,paths,folder_name):

        for n in range(0,len(paths),1):
            try:
                os.makedirs(paths[n])
            except OSError:
                pass

            if n==0:

                ''' Make 'AppName' shortcut '''
                desktop = winshell.desktop()
                lnkfl_path = os.path.join(desktop, f'{folder_name} - Shortcut.lnk')

                if os.path.exists(lnkfl_path) == False:

                    target = paths[n]
                    wDir = paths[n]
                    shell = Dispatch('WScript.Shell')
                    shortcut = shell.CreateShortCut(lnkfl_path)
                    shortcut.Targetpath = target
                    shortcut.WorkingDirectory = wDir
                    shortcut.save()
                else:
                    pass
            else:
                pass

    def get_paths_json(self):
        print("\n-\ Path returned.")
        self.save_path_json()

        if os.path.exists(paths_datas_json_file_path)==True:

            returned_path = self.read_json(jsonfl_path2=paths_datas_json_file_path,k2=path_json_flkey)

            # Main collection folder path 
            gifs_collection_folder_path = os.path.join(returned_path,gifs_collection_folder_name)

            # Variable current years folder path
            now_yrs_sub_folder_path = os.path.join(gifs_collection_folder_path, dt_yyyy)

            # Variable now months number-month sub folder
            now_mnthsno_months = os.path.join(now_yrs_sub_folder_path, dt_mnthsno_mnths)

            # Variable current date folder path
            now_date_sub_folder_path = os.path.join(now_mnthsno_months, dt_date)

            path_lsts = [gifs_collection_folder_path,now_yrs_sub_folder_path,now_mnthsno_months,now_date_sub_folder_path]

            self.foldershortcut_maker_dt(paths=path_lsts, folder_name=gifs_collection_folder_name)

            return gifs_collection_folder_path,  now_date_sub_folder_path

            # pass

        else:
            return None , None

    def change_path_json(self):
        # print("\n-\ Path Changed.")

        dir_dialog_title = f"Please choose folder (or directory) to be changed for '{gifs_collection_folder_name}' folder:"
        
        chngdir_dlgbox = QFileDialog.getExistingDirectory(self, caption=dir_dialog_title)
           
        if chngdir_dlgbox:

            usr_chng_rt_v = chngdir_dlgbox.replace("/","\\")

            # print(usr_chng_rt_v)

            if os.path.exists(paths_datas_json_file_path)==True:

                self.update_json(json_flpath3=paths_datas_json_file_path,keys3=path_json_flkey,info3=usr_chng_rt_v,msg_title3="Path update - Complete:",msg_txt3="Path changed successfully.      ")

                # self.get_paths()
 
            else:

                self.save_path_json()

        else:
            pass

    def rst(self):
        self.fps_spinbox.setValue(0)
        
    def make_gif(self):

        try:
       
            # Get path datas from path json file
            returned_gifs_collection_folder_path , returned_now_date_sub_folder_path= self.get_paths_json()

            if returned_gifs_collection_folder_path != None:
                # Random strings
                count = 9
                rand_str = ''.join(random.choices(string.ascii_letters, k=count))

                # Final GIF file
                gif_name = f"{rand_str} GIF made by 'GIF MAKER [ISA]'"
                gif_fl = f"{gif_name}.gif" 
                gif_final_path = os.path.join(returned_now_date_sub_folder_path,gif_fl)

                images = []

                fps_spinbox_val = self.fps_spinbox.value()

                fl_dialog_title = "Choose Images to be converted into GIF (.gif):"

                wild_cards = "All Files (*);;JPG Image (*.jpg);;PNG Image (*.png);;JPEG Image (*.jpeg)"
            
                files , check = QFileDialog.getOpenFileNames(self, fl_dialog_title,"", wild_cards)
                
                # print(len(files1))
                if check and len(files)!=1:

                    # files1_re = files1.replace("/","\\")
    
                    # print(files)
                        
                    # print(fps_spinbox_val)
                    
                    for file in sorted(files):

                        # print(file)
                        if file.endswith('.png') or file.endswith('.jpeg') or file.endswith('.jpg'):
                            
                            images.append(imageio.imread(file))

                        else:
                            pass
                    
                    if len(images)!=0:
                        
                        imageio.mimsave(gif_final_path, images,fps=fps_spinbox_val)

                        # print("\n-\ Gif Made.")

                        # os.startfile(gif_final_path)

                        self.msg_autoClose(msg_text=f"GIF file '{gif_fl}' has been successfully been generated.", msg_title="GIF Generation complete:",close_tmr=2,msg_icon=QMessageBox.Information)

                    else:
                        pass

                elif check and len(files)==1:
                    # print("\n-\ Single file not allowed.")
                    # self.msg_autoClose(msg_text="Can only generate gif with more than one pictures.                      ",msg_title="GIF Generation error - Single Image Invalid",close_tmr=3,msg_icon=QMessageBox.Critical)
                    logerr_txt = "GIF Generation error: GIF file can only be made with more than one image file."
                    self.apps_log_sys(logerr_msg=logerr_txt,err_msgtitle="GIF Generation error - Single Image Invalid",err_msgtxt="Can only generate gif with more than one pictures.                      ")
                else:
                    pass
                
            else:
                pass

        except Exception as generic_err:

            # os.remove(gif_final_path)
            self.apps_log_sys(logerr_msg=generic_err,err_msgtitle="Generic error:",err_msgtxt=str(generic_err))
            # pass
            
    def open_logdir(self):
        # print("\n-\ Log folder openned.")
 
        try:
            os.makedirs(logs_folder_path)
        except OSError:
            pass

        os.startfile(logs_folder_path)

    def open_logfls(self):
        # print("\n-\ Log file openned.")

        try:
            os.makedirs(logs_folder_path)
        except OSError:
            pass

        if os.path.exists(logfl_path)==False:
            with open(logfl_path,'w',encoding="utf-8") as logfl_w2:
                logfl_w2.writable()
        else:
            pass
        
        os.startfile(logfl_path)

    def access_gif_collections(self):
        # Get path datas from path json file
        returned_gifs_collection_folder_path , returned_now_date_sub_folder_path= self.get_paths_json()
        
        if returned_gifs_collection_folder_path != None:
            # Get path list element count
            file_count = len(os.listdir(returned_now_date_sub_folder_path))
            # print("\n-> Audio folder oppened.")

            if file_count == 0:

                logerr_txt = f"Access Denied: No Gif files found in directory: {returned_now_date_sub_folder_path} ."
                self.apps_log_sys(logerr_msg=logerr_txt,err_msgtitle="Access denied - No GIF found: ",err_msgtxt="No Gif files found.             ")
            else:
                os.startfile(returned_now_date_sub_folder_path)
        else:
            pass

        print("\n-\ Gif collection accessed.")
    def open_gif_collections_dir(self):
        # Get path datas from path json file
        returned_gifs_collection_folder_path , returned_now_date_sub_folder_path= self.get_paths_json()
        
        if returned_gifs_collection_folder_path != None:
            os.startfile(returned_gifs_collection_folder_path)
        else:
            pass

        # print("\n-\ Gif collection folder openned.")

    def exit(self):
        returned_msg_outs = self.yn_msgbox(txt5="Are you sure you want to exit the app?",title5="Exit -Yes/No:",msg_icon=QMessageBox.Warning)

        if returned_msg_outs == QMessageBox.No:
            pass
        elif returned_msg_outs == QMessageBox.Yes:
            # app = QtWidgets.QApplication(sys.argv)
            # sys.exit(app.exec_())
            sys.exit()
        else:
            pass

        # print("\n-\ Exited.")

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
