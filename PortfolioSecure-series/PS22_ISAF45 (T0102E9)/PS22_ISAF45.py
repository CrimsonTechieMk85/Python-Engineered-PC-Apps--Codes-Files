# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'PS22_ISA012.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from pickle import NONE
import shutil
import sys
import re
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QWidget , QInputDialog , QLineEdit ,  QListWidget
import datetime
import winshell
from win32com.client import Dispatch 
from PySide2.QtCore import QTimer
from PySide2.QtWidgets import QApplication , QMessageBox
import os
import json
import time 
import zipfile
import wx
from werkzeug.security import generate_password_hash, check_password_hash

from cryptography.fernet import Fernet

'''Source files'''
cfile_path = os.path.realpath(__file__)
# cdir = os.path.dirname(cfile_path)# curent working directory or the 'Now'-location of the file.

cdir = os.getcwd()

# Time
dt_clockH = datetime.datetime.now().strftime("%I")

dt_clockM = datetime.datetime.now().strftime("%M")

dt_clockS = datetime.datetime.now().strftime("%S")

dt_clockMS = datetime.datetime.now().strftime("%f")

epoch_miliseconds = int(time.time() * 1000)

dt_TMR = f"{dt_clockH}:{dt_clockM}:{dt_clockS}"

dt_time= f"{dt_clockH}:{dt_clockM}"

dt_DN = datetime.datetime.now().strftime('%p').lower()

# Date
dt_dd = datetime.datetime.now().strftime("%d")

dt_mm = datetime.datetime.now().strftime("%m")

dt_yyyy = datetime.datetime.now().strftime("%Y")

dt_wdys = datetime.datetime.now().strftime("%A").lower()

dt_mnths = datetime.datetime.now().strftime("%B")

dt_mnths_no = datetime.datetime.now().strftime("%m")

dt_date = f"{dt_dd}-{dt_mm}-{dt_yyyy}"

dt_mnthsno_mnths = f"{dt_mnths_no}-{dt_mnths}"

# database folder
app_db_folder_name = 'PS-22[I.S.A]-F45'
database_folder_name = f"{app_db_folder_name} database"

database_folder_path = os.path.join(cdir, database_folder_name)

# settings folder
settings_folder_path = os.path.join(database_folder_path, ".settings")

# backup folder
backups_folder_path = os.path.join(database_folder_path, ".backups")

# backup files
file_backups_json_name = "file_backup_infos"

file_backup_json_file = f"{file_backups_json_name}.json"

json_file_backups_file_path = os.path.join(backups_folder_path, file_backup_json_file)

# backup folders
folder_backups_json_name = "folder_backup_infos"

folder_backup_json_file = f"{folder_backups_json_name}.json"

json_folder_backups_file_path = os.path.join(backups_folder_path, folder_backup_json_file)

# passwords details
passwords_json_name = "My_passwords"

passwords_json__file = f"{passwords_json_name}.json"

passwords_json_file_path = os.path.join(settings_folder_path, passwords_json__file)

# Collections folder details
main_app_folder_name = 'Portfolio Secure 22 [I.S.A]'
collections_folder_name = f"{main_app_folder_name} collections"

# App path Json files details
paths_json_name = 'path_datas'

paths_json_file = f'{paths_json_name}.json'

paths_datas_json_file_path = os.path.join(settings_folder_path, paths_json_file)

# Encrypted folder name
enc_folder_name = "Encrypted archive"

# Decrypted folder name
dec_folder_name = "Decrypted archive"

# Encrypted files  folder
encfiles_subfolder2_name = "Encrypted files"
# Encrypted folders folder
encfolders_subfolder2_name = "Encrypted folders"

# Decrypted files  folder
decfiles_subfolder2_name = "Decrypted files"
# Decrypted folders folder
decfolders_subfolder2_name = "Decrypted folders"

# pascode_json_exists = os.path.exists(settings_json_full_path)

# encryption key
key = "54NxGh1jHbQKeUl_mHM0PXg363MkmtFsrpgRGA1rI2g="

cipher = Fernet(key)

# File Guardian Hashed passwords  - Default
file_guard_pass_enc_no = '13'

file_guard_pass_dec_no = '12'

#  Hashed File Guardian encryption password - default
default_hashed_file_guard_encrypt_passwrd = generate_password_hash(file_guard_pass_enc_no,method='sha256')
#  Hashed File Guardian decryption password - default
default_hashed_file_guard_decrypt_passwrd = generate_password_hash(file_guard_pass_dec_no,method='sha256')


# Folder Guardian Hashed passwords  - Default
folder_guard_pass_enc_no = '23'

folder_guard_pass_dec_no = '22'

#  Hashed File Guardian encryption password - default
default_hashed_folder_guard_encrypt_passwrd = generate_password_hash(folder_guard_pass_enc_no,method='sha256')
#  Hashed File Guardian decryption password - default
default_hashed_folder_guard_decrypt_passwrd = generate_password_hash(folder_guard_pass_dec_no,method='sha256')

# Log folder details
log_dirname = "Logs"
logs_folder_path = os.path.join(cdir,log_dirname)

# Log file details
logfl_name = f"Log_{dt_date}"
log_fl = f"{logfl_name}.log"
logfl_path = os.path.join(logs_folder_path,log_fl)

app_title = "Portfolio Secure 22 [Improved.Simplified.Alternative]"

''' Folder Maker '''
def DirMake(path_val):
    try:
        os.makedirs(path_val)
    except OSError:
        pass


''' Password json file maker '''
def password_json_make(json_path_val,hashed_enc_file_guard_pass11,hashed_dec_file_guard_pass12,hashed_enc_folder_guard_pass21,hashed_dec_folder_guard_pass22):
    ''' make passwords json files in settings files '''
    pwd_var = {
        "hashed_encrypt_passcode_file_guardian": hashed_enc_file_guard_pass11,
        "hashed_decrypt_passcode_file_guardian": hashed_dec_file_guard_pass12,
        "hashed_encrypt_passcode_folder_guardian": hashed_enc_folder_guard_pass21,
        "hashed_decrypt_passcode_folder_guardian": hashed_dec_folder_guard_pass22
    }

    # Transfers data And then stores it on the json file
    if os.path.exists(json_path_val) is False:

        try:

            sfl = open(json_path_val, "w")

            json.dump(pwd_var, sfl)

            sfl.close()
        except FileNotFoundError:
            pass

        # print("\n- 'My_passwords' json file made.")

        # wipeout()
    else:
        pass


class Ui_MainWindow(QWidget):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 630)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.MainFrame = QtWidgets.QFrame(self.centralwidget)
        self.MainFrame.setGeometry(QtCore.QRect(20, 20, 761, 541))
        self.MainFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.MainFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.MainFrame.setObjectName("MainFrame")

        # Set APP BG
        self.palette = QtGui.QPalette()
        self.brush = QtGui.QBrush(QtGui.QColor(33, 192, 162))
        self.brush.setStyle(QtCore.Qt.SolidPattern)
        self.palette.setBrush(QtGui.QPalette.Window, self.brush)
        MainWindow.setPalette(self.palette)

        # Set app icon
        returned_icofl_path = self.icon_fls()
        MainWindow.setWindowIcon(QtGui.QIcon(returned_icofl_path))        

        self.tabWidget = QtWidgets.QTabWidget(self.MainFrame)
        self.tabWidget.setGeometry(QtCore.QRect(10, 10, 741, 521))
        self.tabWidget.setObjectName("tabWidget")

        
        font = QtGui.QFont()
        font.setPointSize(22)

        self.tab_fileGuardian = QtWidgets.QWidget()
        self.tab_fileGuardian.setObjectName("tab_fileGuardian")
        # self.tab_fileGuardian.setFont(font)
 
 
        self.Button_Enc_File_1 = QtWidgets.QPushButton(self.tab_fileGuardian)
        self.Button_Enc_File_1.setGeometry(QtCore.QRect(50, 80, 221, 121))

        font = QtGui.QFont()
        font.setPointSize(22)
        
        self.Button_Enc_File_1.setFont(font)
        self.Button_Enc_File_1.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Button_Enc_File_1.setObjectName("Button_Enc_File_1")
        self.Button_Dec_File_1 = QtWidgets.QPushButton(self.tab_fileGuardian)
        self.Button_Dec_File_1.setGeometry(QtCore.QRect(460, 80, 221, 121))

        font = QtGui.QFont()
        font.setPointSize(22)
        self.Button_Dec_File_1.setFont(font)
        self.Button_Dec_File_1.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Button_Dec_File_1.setObjectName("Button_Dec_File_1")

        self.Button_Open = QtWidgets.QPushButton(self.tab_fileGuardian)
        self.Button_Open.setGeometry(QtCore.QRect(460, 310, 221, 121))

        font = QtGui.QFont()
        font.setPointSize(28)
        self.Button_Open.setFont(font)
        self.Button_Open.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Button_Open.setObjectName("Button_Open")

        
        self.Button_Exit = QtWidgets.QPushButton(self.tab_fileGuardian)
        self.Button_Exit.setGeometry(QtCore.QRect(50, 310, 221, 121))

        font = QtGui.QFont()
        font.setPointSize(28)
        self.Button_Exit.setFont(font)
        self.Button_Exit.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Button_Exit.setObjectName("Button_Exit")

        self.tabWidget.addTab(self.tab_fileGuardian, "hhh")

        font = QtGui.QFont()
        font.setPointSize(22)

        self.tab_folderGuardian = QtWidgets.QWidget()
        self.tab_folderGuardian.setObjectName("tab_folderGuardian")
        # self.tab_folderGuardian.setFont(font)

        self.Button_Enc_Folder = QtWidgets.QPushButton(self.tab_folderGuardian)
        self.Button_Enc_Folder.setGeometry(QtCore.QRect(50, 80, 221, 121))
        
        font = QtGui.QFont()
        font.setPointSize(22)

        self.Button_Enc_Folder.setFont(font)
        self.Button_Enc_Folder.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Button_Enc_Folder.setObjectName("Button_Enc_Folder")

        self.Button_Dec_Folder = QtWidgets.QPushButton(self.tab_folderGuardian)
        self.Button_Dec_Folder.setGeometry(QtCore.QRect(460, 80, 221, 121))

        font = QtGui.QFont()
        font.setPointSize(22)

        self.Button_Dec_Folder.setFont(font)
        self.Button_Dec_Folder.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Button_Dec_Folder.setObjectName("Button_Dec_Folder")
        
        self.Button_Open_2 = QtWidgets.QPushButton(self.tab_folderGuardian)
        self.Button_Open_2.setGeometry(QtCore.QRect(460, 310, 221, 121))
        

        font = QtGui.QFont()
        font.setPointSize(28)
        
        self.Button_Open_2.setFont(font)
        self.Button_Open_2.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Button_Open_2.setObjectName("Button_Open_2")

        self.Button_Exit_2 = QtWidgets.QPushButton(self.tab_folderGuardian)
        self.Button_Exit_2.setGeometry(QtCore.QRect(50, 310, 221, 121))
        
        font = QtGui.QFont()
        font.setPointSize(28)

        self.Button_Exit_2.setFont(font)
        self.Button_Exit_2.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Button_Exit_2.setObjectName("Button_Exit_2")
        self.tabWidget.addTab(self.tab_folderGuardian, "")
        MainWindow.setCentralWidget(self.centralwidget)

        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 23))
        self.menubar.setObjectName("menubar")

        self.menuOptions = QtWidgets.QMenu(self.menubar)
        self.menuOptions.setObjectName("menuOptions")

        self.menuSettings = QtWidgets.QMenu(self.menuOptions)
        self.menuSettings.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.menuSettings.setObjectName("menuSettings")

        self.menuOpen_folders = QtWidgets.QMenu(self.menuOptions)
        self.menuOpen_folders.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.menuOpen_folders.setObjectName("menuOpen_folders")

        self.menuChange_passwords = QtWidgets.QMenu(self.menuSettings)
        self.menuChange_passwords.setObjectName("menuChange_passwords")
        MainWindow.setMenuBar(self.menubar)

        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)

        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        self.statusbar.setFont(font)
        MainWindow.setStatusBar(self.statusbar)
        
        self.actionChange_path = QtWidgets.QAction(MainWindow)
        self.actionChange_path.setObjectName("actionChange_path")

        self.actionChange_Encryption_passwords = QtWidgets.QAction(MainWindow)
        self.actionChange_Encryption_passwords.setObjectName("actionChange_Encryption_passwords")
        
        self.actionChange_Decryption_passwords = QtWidgets.QAction(MainWindow)
        self.actionChange_Decryption_passwords.setObjectName("actionChange_Decryption_passwords")
        
        self.actionChange_Encrypted_file_name = QtWidgets.QAction(MainWindow)
        self.actionChange_Encrypted_file_name.setObjectName("actionChange_Encrypted_file_name")

        self.actionChange_Encrypted_folder_name = QtWidgets.QAction(MainWindow)
        self.actionChange_Encrypted_folder_name.setObjectName("actionChange_Encrypted_folder_name")

        self.actionOpen_collection_folder = QtWidgets.QAction(MainWindow)
        self.actionOpen_collection_folder.setObjectName("actionOpen_collection_folder")

        self.actionOpen_encrypted_file = QtWidgets.QAction(MainWindow)
        self.actionOpen_encrypted_file.setObjectName("actionOpen_encrypted_file")

        self.actionOpen_encrypted_folder = QtWidgets.QAction(MainWindow)
        self.actionOpen_encrypted_folder.setObjectName("actionOpen_encrypted_folder")

        self.actionOpen_decrypted_file = QtWidgets.QAction(MainWindow)
        self.actionOpen_decrypted_file.setObjectName("actionOpen_decrypted_file")

        self.actionOpen_decrypted_folder = QtWidgets.QAction(MainWindow)
        self.actionOpen_decrypted_folder.setObjectName("actionOpen_decrypted_folder")

        self.actionOpen_Logsfolder = QtWidgets.QAction(MainWindow)
        # self.actionOpen_Logsfolder.setCheckable(True)
        self.actionOpen_Logsfolder.setObjectName("actionOpen_Logsfolder")

        # self.actionOpen_folders = QtWidgets.QAction(MainWindow)
        # self.actionOpen_folders.setObjectName("actionOpen_folders")

        self.actionOpen_Log= QtWidgets.QAction(MainWindow)
        self.actionOpen_Log.setObjectName("actionOpen_Log")

        self.menuOpen_folders.addAction(self.actionOpen_collection_folder)

        self.menuOpen_folders.addSeparator()

        self.menuOpen_folders.addAction(self.actionOpen_encrypted_file)

        self.menuOpen_folders.addSeparator()

        self.menuOpen_folders.addAction(self.actionOpen_encrypted_folder)

        self.menuOpen_folders.addSeparator()

        self.menuOpen_folders.addAction(self.actionOpen_decrypted_file)

        self.menuOpen_folders.addSeparator()

        self.menuOpen_folders.addAction(self.actionOpen_decrypted_folder)

        self.menuOpen_folders.addSeparator()

        self.menuOpen_folders.addAction(self.actionOpen_Logsfolder)

        self.menuOpen_folders.addSeparator()
        
        self.menuChange_passwords.addAction(self.actionChange_Encryption_passwords)
        
        self.menuChange_passwords.addAction(self.actionChange_Decryption_passwords)
        
        self.menuSettings.addAction(self.actionChange_path)

        self.menuSettings.addSeparator()
        
        self.menuSettings.addAction(self.menuChange_passwords.menuAction())

        self.menuSettings.addSeparator()
        
        self.menuSettings.addAction(self.actionChange_Encrypted_file_name)

        self.menuSettings.addSeparator()

        self.menuSettings.addAction(self.actionChange_Encrypted_folder_name)
        
        self.menuOptions.addAction(self.menuSettings.menuAction())
        
        self.menuOptions.addSeparator()
        
        self.menuOptions.addAction(self.menuOpen_folders.menuAction())
        
        self.menuOptions.addSeparator()
        
        self.menuOptions.addAction(self.actionOpen_Log)
        
        self.menubar.addAction(self.menuOptions.menuAction())

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", app_title))
       
    # File guardian
        self.Button_Enc_File_1.setText(_translate("MainWindow", "Encrypt file"))
       
        self.Button_Dec_File_1.setText(_translate("MainWindow", "Decrypt file"))
       
        self.Button_Open.setText(_translate("MainWindow", "Access"))
        self.Button_Open.setStatusTip(_translate("MainWindow", "Click here open collection folder. (Ctrl+O)"))
       
        self.Button_Exit.setText(_translate("MainWindow", "Exit"))
        self.Button_Exit.setStatusTip(_translate("MainWindow", "Click here to exit. (Press Esc)"))
        self.Button_Exit.setShortcut(_translate("MainWindow", "Esc"))
       
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_fileGuardian), _translate("MainWindow", "File Guardian"))
        self.tab_fileGuardian.setStatusTip(_translate("MainWindow", "File Guardian: Encrypting and decrypting files."))
    # Folder guardian
        self.Button_Enc_Folder.setText(_translate("MainWindow", "Encrypt folder"))
       
        self.Button_Dec_Folder.setText(_translate("MainWindow", "Decrypt folder"))
       
        self.Button_Open_2.setText(_translate("MainWindow", "Access"))
        self.Button_Open_2.setStatusTip(_translate("MainWindow", "Click here open collection folder. (Ctrl+O)"))
       
        self.Button_Exit_2.setText(_translate("MainWindow", "Exit"))
        self.Button_Exit_2.setStatusTip(_translate("MainWindow", "Click here to exit. (Press Esc)"))
        self.Button_Exit_2.setShortcut(_translate("MainWindow", "Esc"))
       
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_folderGuardian), _translate("MainWindow", "Folder Guardian"))
        self.tab_folderGuardian.setStatusTip(_translate("MainWindow", "Folder Guardian: Encrypting and decrypting folders."))
    # Option
        self.menuOptions.setTitle(_translate("MainWindow", "Options"))
       
        self.menuSettings.setTitle(_translate("MainWindow", "Settings"))
       
        self.menuChange_passwords.setTitle(_translate("MainWindow", "Change passwords"))
       
        self.actionChange_path.setText(_translate("MainWindow", "Change path"))
       
        self.actionChange_path.setShortcut(_translate("MainWindow", "Ctrl+P"))
       
        self.actionChange_Encryption_passwords.setText(_translate("MainWindow", "Change Encryption passwords"))
       
        self.actionChange_Encryption_passwords.setShortcut(_translate("MainWindow", "Ctrl+E"))
       
        self.actionChange_Decryption_passwords.setText(_translate("MainWindow", "Change Decryption passwords"))
       
        self.actionChange_Decryption_passwords.setShortcut(_translate("MainWindow", "Ctrl+D"))
       
        self.actionChange_Encrypted_file_name.setText(_translate("MainWindow", "Change Encrypted file name"))

        self.actionChange_Encrypted_folder_name.setText(_translate("MainWindow", "Change Encrypted folder name"))
       
        self.actionOpen_Log.setText(_translate("MainWindow", "Open Log file"))
       
        self.actionOpen_Log.setShortcut(_translate("MainWindow", "Ctrl+L"))
       
        self.menuOpen_folders.setTitle(_translate("MainWindow", "Open folders"))

        self.actionOpen_collection_folder.setText(_translate("MainWindow", f"Open '{collections_folder_name}' archives"))
        self.actionOpen_collection_folder.setShortcut(_translate("MainWindow", "Ctrl+O"))

        self.actionOpen_encrypted_file.setText((_translate("MainWindow", f"Open '{encfiles_subfolder2_name}' archives")))

        self.actionOpen_encrypted_folder.setText((_translate("MainWindow", f"Open '{encfolders_subfolder2_name}' archives")))

        self.actionOpen_decrypted_file.setText((_translate("MainWindow", f"Open '{decfiles_subfolder2_name}' archives")))

        self.actionOpen_decrypted_folder.setText((_translate("MainWindow",f"Open '{decfolders_subfolder2_name}' archives")))

        self.actionOpen_Logsfolder.setText((_translate("MainWindow", "Open Log folder")))
       
        # self.actionOpen_folders.setShortcut(_translate("MainWindow", "Ctrl+O"))

        # Option connect event
        self.actionOpen_Log.triggered.connect(self.open_log)

        # Open folders
        self.actionOpen_Logsfolder.triggered.connect(self.open_logsfolder)
        self.actionOpen_collection_folder.triggered.connect(self.open_ps_collections)
        self.actionOpen_encrypted_file.triggered.connect(self.open_ps_encfiles)
        self.actionOpen_encrypted_folder.triggered.connect(self.open_ps_encfolders)
        self.actionOpen_decrypted_file.triggered.connect(self.open_ps_decfiles)
        self.actionOpen_decrypted_folder.triggered.connect(self.open_ps_decfolders)

        self.actionChange_path.triggered.connect(self.chngpath)
        self.actionChange_Encrypted_file_name.triggered.connect(self.files_encname_changer)
        self.actionChange_Encrypted_folder_name.triggered.connect(self.dirs_encname_changer)
        self.actionChange_Encryption_passwords.triggered.connect(self.change_enc_passwrds)
        self.actionChange_Decryption_passwords.triggered.connect(self.change_dec_passwrds)

        # Button connect event 
        self.Button_Enc_File_1.clicked.connect(self.encrypt_file)
        self.Button_Dec_File_1.clicked.connect(self.decrypt_file)

        self.Button_Enc_Folder.clicked.connect(self.encrypt_folder)
        self.Button_Dec_Folder.clicked.connect(self.decrypt_folder)

        self.Button_Exit.clicked.connect(self.exit)
        self.Button_Exit_2.clicked.connect(self.exit)

        self.Button_Open.clicked.connect(self.open_ps_collections)
        self.Button_Open_2.clicked.connect(self.open_ps_collections)


        # GUI button colors - File Guardian
        # -> Encrypt file button
        self.Button_Enc_File_1.setStyleSheet("background-color : green; color: white")
        
        # -> Decrypt file button
        self.Button_Dec_File_1.setStyleSheet("background-color : yellow; color: black")
        
        # -> Exit button
        self.Button_Exit.setStyleSheet("background-color : red; color: white")
        
        # -> Access folder button
        self.Button_Open.setStyleSheet("background-color : blue; color: white")

        # GUI button colors - Folder Guardian
        # -> Encrypt folder button
        self.Button_Enc_Folder.setStyleSheet("background-color : green; color: white")
        
        # -> Decrypt folder button
        self.Button_Dec_Folder.setStyleSheet("background-color : yellow; color: black")
        
        # -> Exit button
        self.Button_Exit_2.setStyleSheet("background-color : red; color: white")
        
        # -> Access folder button
        self.Button_Open_2.setStyleSheet("background-color : blue; color: white")
        
        # GUI Tab colors
        # File Guardian
        self.tab_fileGuardian.setStyleSheet("background-color : rgb(33, 192, 162);")
        # Folder Guardian
        self.tab_folderGuardian.setStyleSheet("background-color : rgb(33, 192, 162);")

    def icon_fls(self):
        for file in os.listdir(cdir):
    
            # print(file)
            
            if '.ico' in file:
                try:
                    icon_flpath =os.path.join(cdir,file)
                    return icon_flpath
                except OSError:
                    pass
            else:
                pass
    
    def lists_box(self,l2,title2,txt2):

        app = wx.App()

        onechoice = wx.SingleChoiceDialog(None, txt2,title2, l2)

        oncechoice_out = onechoice.ShowModal()

        onechoice_item = onechoice.GetStringSelection()  

        return oncechoice_out , onechoice_item                    
    
    def msg_autoClose(self,msg_title,msg_text,close_tmr,msg_icon):

        qm = QMessageBox()
        qm.setIcon(msg_icon)
        qm.setWindowTitle(msg_title)
        qm.setText(msg_text)
        qm.setStandardButtons(QMessageBox.Ok)
        QTimer.singleShot(close_tmr*1000,lambda : qm.done(0))
        qm.setFixedWidth(800)
        qm.setFixedHeight(1755)
        qm.exec_()
    
    def save_path_json(self):
 
        if os.path.exists(paths_datas_json_file_path) == False:

            dir_dialog_title = f"Please choose folder (or directory) to hold '{main_app_folder_name}' folder:"
            dir_dlgbox = QFileDialog.getExistingDirectory(self, caption=dir_dialog_title)
           
            if dir_dlgbox:

                usr_rt_v = dir_dlgbox.replace("/","\\")

                self.save_json(json_flpath1=paths_datas_json_file_path,keys1="path",val1=usr_rt_v)
                
                self.msg_autoClose(msg_text="Path saved successfully.                        ",msg_title="Path save - Complete:",close_tmr=3,msg_icon=QMessageBox.Information)

                #sys.exit()
            else:
                pass
        else:
            pass
    
    def apps_log_sys(self,logerr_msg,err_msgtitle,err_msgtxt):

        try:
            os.makedirs(logs_folder_path)
        except OSError:
            pass
        # logs_folder_path = os.path.join(logdirs6_path,log_dirname6)
        log_err = f"\n<{dt_date}\{dt_time}> , Error: {str(logerr_msg)}\n<________________________________________>\n"
        self.msg_autoClose(msg_text=f"Error cause: \n{str(err_msgtxt)} .                      ",msg_title=err_msgtitle,close_tmr=4,msg_icon=QMessageBox.Critical)
        
        with open(logfl_path,"a") as logfl_w6:
            logfl_w6.writelines(log_err)

    def password_json_overwrite(self, json_flpath5, file_guard_enc_passwrd_var5, file_guard_dec_passwrd_var5,
                                folder_guard_enc_passwrd_var5, folder_guard_dec_passwrd_var5):
        ''' make passwords json files in settings files '''
        pwd_var = {
            "hashed_encrypt_passcode_file_guardian": file_guard_enc_passwrd_var5,
            "hashed_decrypt_passcode_file_guardian": file_guard_dec_passwrd_var5,
            "hashed_encrypt_passcode_folder_guardian": folder_guard_enc_passwrd_var5,
            "hashed_decrypt_passcode_folder_guardian": folder_guard_dec_passwrd_var5
        }

        with open(json_flpath5) as sfl_w:
            json.dump(pwd_var, sfl_w)

    def password_json_read(self,json_flpath7,k71,k72,k73,k74):

        while True:

            try:

                with open(json_flpath7, "r") as json_data_fl7:

                    data = json.load(json_data_fl7)

                    # cipher.encrypt(bytes(str(data["hashed_decrypt_passcode"]), 'utf-8')).decode()

                    hashed_file_guard_encrypt_json_passcode = data[k71]

                    hashed_file_guard_decrypt_json_passcode = data[k72]

                    hashed_folder_guard_encrypt_json_passecode = data[k73]

                    hashed_folder_guard_decrypt_json_passcode = data[k74]

                return hashed_file_guard_encrypt_json_passcode , hashed_file_guard_decrypt_json_passcode , hashed_folder_guard_encrypt_json_passecode , hashed_folder_guard_decrypt_json_passcode

                break
            except json.decoder.JSONDecodeError:
                self.password_json_overwrite(json_flpath5=passwords_json_file_path,file_guard_enc_passwrd_var5=default_hashed_file_guard_encrypt_passwrd,file_guard_dec_passwrd_var5=default_hashed_file_guard_decrypt_passwrd,folder_guard_enc_passwrd_var5=default_hashed_folder_guard_encrypt_passwrd,folder_guard_dec_passwrd_var5=default_hashed_file_guard_decrypt_passwrd)
    
    def open_logsfolder(self):

        try:
            os.makedirs(logs_folder_path)
        except OSError:
            pass

        os.startfile(logs_folder_path)

    def open_log(self):
        try:
            os.makedirs(logs_folder_path)
        except OSError:
            pass

        if os.path.exists(logfl_path) == False:
            with open(logfl_path,'w') as logfl_w3:
                logfl_w3.writable()
        else:
            pass

        os.startfile(logfl_path)

    def enc_dec_folder_shortcut_maker_dt(self,path1, path2_enc,path2_dec,path4_month_enc,
                                     path4_month_dec, path3_date_enc,
                                     path3_date_dec ,path5_encfiles,
                                     path5_decfiles, path6_encdirs,
                                     path6_decdirs, folder_name_var):
        try:
            os.makedirs(path1)
        except OSError:
            pass

        try:
            os.makedirs(path2_enc)
        except OSError:
            pass

        try:
            os.makedirs(path2_dec)
        except OSError:
            pass


        try:
            os.makedirs(path4_month_enc)
        except OSError:
            pass

        try:
            os.makedirs(path4_month_dec)
        except OSError:
            pass

        try:
            os.makedirs(path3_date_dec)
        except OSError:
            pass

        try:
            os.makedirs(path3_date_enc)
        except OSError:
            pass

        try:
            os.makedirs(path5_encfiles)
        except OSError:
            pass

        try:
            os.makedirs(path5_decfiles)
        except OSError:
            pass

        try:
            os.makedirs(path6_encdirs)
        except OSError:
            pass

        try:
            os.makedirs(path6_decdirs)
        except OSError:
            pass

        ''' Make 'AppName' shortcut '''
        desktop = winshell.desktop()
        path = os.path.join(desktop, f'{folder_name_var} - Shortcut.lnk')

        if os.path.exists(path) == False:

            target = path1
            wDir = path1
            shell = Dispatch('WScript.Shell')
            shortcut = shell.CreateshortCut(path)
            shortcut.Targetpath = target
            shortcut.WorkingDirectory = wDir
            shortcut.save()

        else:
            pass
        
    def exit(self):

        # returned_icofl_path = self.icon_fls()

        # print(returned_icofl_path)

        w_yn_msg = QMessageBox()

        w_yn_msg.setIcon(QMessageBox.Warning)
       
        w_yn_msg.setText("Are you sure you want to exit the app?")
      
        w_yn_msg.setWindowTitle("Exit -Yes/No:")
      
        w_yn_msg.setStandardButtons(QMessageBox.Yes | QMessageBox.No)

        w_msg_returnValue = w_yn_msg.exec()

        if w_msg_returnValue == QMessageBox.No:
            pass
        elif w_msg_returnValue == QMessageBox.Yes:
            # app = QtWidgets.QApplication(sys.argv)
            # sys.exit(app.exec_())
            sys.exit()
        else:
            pass
 
    def delay(self,var):
        time.sleep(var)

    def read_json(self,jsonfl_path1,k1):
        with open(jsonfl_path1,'r') as pathjson_fl_r:
            data = pathjson_fl_r.read()

            infos_v = json.loads(data)[k1]

        return infos_v

    def save_json(self,json_flpath1,keys1,val1):

        infos = {
            keys1: str(val1)

                            }
        with open(json_flpath1,'w') as json_fl_w:
            json.dump(infos,json_fl_w)  

    def update_json(self,json_flpath3,keys3,info3,msg_txt3,msg_title3):

        with open(json_flpath3,'r') as json_data_r:
            json_src_data = json.load(json_data_r)

            json_src_data[keys3] = info3

            with open(json_flpath3,'w') as json_fl_w:
                json.dump(json_src_data,json_fl_w)

        self.msg_autoClose(msg_text=msg_txt3+"                        ",msg_title=msg_title3+"                        ",close_tmr=3,msg_icon=QMessageBox.Information)
    
    def change_enc_passwrds(self):
        
        modify_pswrds_lists = ["Choose here to change 'File Guardian' encryption password.                  ",
                                  "Choose here to change 'Folder Guardian' encryption password.               "]
        
        returned_lstsbox_gui_out , returned_lstsbox_item_out = self.lists_box(l2=modify_pswrds_lists,title2="Modify 'Encryption' passwords:",txt2="Which encryption password do you wish to change?")
    
        if returned_lstsbox_gui_out == wx.ID_OK:
            choosen_choice_var = returned_lstsbox_item_out

            # print (f"\n Choosen mode -> {choosen_choice_var}")

            if choosen_choice_var == modify_pswrds_lists[0]:
                while True:
                                   
                    passwrd2_v4 = QInputDialog(self)
                    passwrd2_v4.setWindowTitle("'File Guardian' encrypted passcode entry:")
                    passwrd2_v4.setLabelText("Please type the 'File Guardian' encryption password.")
                    passwrd2_v4.setTextEchoMode(QLineEdit.Password)
        
                    passwrd2_v4.setFixedSize(400, 240)

                    passwrd2_v4.setStyleSheet(
                            """
                            
                            QLabel{
                                font-size:20px;
                    
                                font-family:Arial;
                            }
                            QLineEdit{
                                font-size:20px;
                                font-family:Arial;
                            }
                            QPushButton{
                                font-size:20px;                         
                            }
                            """
                        )
                    okPressed4_2 = passwrd2_v4.exec_()
                    file_guardian_enc_passwrd2_v4_txt = passwrd2_v4.textValue()

                    if okPressed4_2==True and file_guardian_enc_passwrd2_v4_txt != '':

                        returned_hashed_file_guard_encrypt_pass, returned_hashed_file_guard_decrypt_pass, returned_hashed_folder_guard_encrypt_pass, returned_hashed_folder_guard_decrypt_pass = self.password_json_read(json_flpath7=passwords_json_file_path, k71="hashed_encrypt_passcode_file_guardian",k72="hashed_decrypt_passcode_file_guardian", k73="hashed_encrypt_passcode_folder_guardian",k74="hashed_decrypt_passcode_folder_guardian")

                        if check_password_hash(returned_hashed_file_guard_encrypt_pass,file_guardian_enc_passwrd2_v4_txt)==True:

                            self.msg_autoClose(msg_text="Password correct.                    ",msg_title="Access granted:",close_tmr=2,msg_icon=QMessageBox.Information)

                            self.change_file_guardian_enc_passwrds()

                            break

                        else:
                            self.msg_autoClose(msg_text="Wrong 'File Guardian' encrytion password.                      ",msg_title="Access denied - Incorrect encryption password:        ",close_tmr=3,msg_icon=QMessageBox.Critical)
            
                    elif okPressed4_2==True and file_guardian_enc_passwrd2_v4_txt == '':
                        self.msg_autoClose(msg_text="Null values are not accepted.                     ",msg_title="Input verifier error:                  ",close_tmr=3,msg_icon=QMessageBox.Critical)
                    else:
                        break
                
            else:
                while True:
 
                    passwrd2_v4 = QInputDialog(self)
                    passwrd2_v4.setWindowTitle("'File Guardian' encrypted passcode entry:")
                    passwrd2_v4.setLabelText("Please type the 'File Guardian' encryption password.")
               
                    passwrd2_v4.setFixedSize(400, 240)

                    passwrd2_v4.setStyleSheet(
                            """
                            
                            QLabel{
                                font-size:20px;
                    
                                font-family:Arial;
                            }
                            QLineEdit{
                                font-size:20px;
                                font-family:Arial;
                            }
                            QPushButton{
                                font-size:20px;                         
                            }
                            """
                        )
                    okPressed4_2 = passwrd2_v4.exec_()
                    folder_guardian_enc_passwrd2_v4_txt = passwrd2_v4.textValue()

                    if okPressed4_2==True and folder_guardian_enc_passwrd2_v4_txt != '':

                        returned_hashed_file_guard_encrypt_pass, returned_hashed_file_guard_decrypt_pass, returned_hashed_folder_guard_encrypt_pass, returned_hashed_folder_guard_decrypt_pass = self.password_json_read(json_flpath7=passwords_json_file_path, k71="hashed_encrypt_passcode_file_guardian",k72="hashed_decrypt_passcode_file_guardian", k73="hashed_encrypt_passcode_folder_guardian",k74="hashed_decrypt_passcode_folder_guardian")

                        if check_password_hash(returned_hashed_folder_guard_encrypt_pass,folder_guardian_enc_passwrd2_v4_txt)==True:

                            self.msg_autoClose(msg_text="Password correct.                                  ",msg_title="Access granted:                          ",close_tmr=2,msg_icon=QMessageBox.Information)

                            self.change_folder_guardian_dec_passwrds()

                            break

                        else:
                            self.msg_autoClose(msg_text="Wrong 'File Guardian' encrytion password.                                         ",msg_title="Access denied - Incorrect encryption password:                  ",close_tmr=3,msg_icon=QMessageBox.Critical)
            
                    elif okPressed4_2==True and file_guardian_enc_passwrd2_v4_txt == '':
                        self.msg_autoClose(msg_text="Null values are not accepted.                            ",msg_title="Input verifier error:",close_tmr=3,msg_icon=QMessageBox.Critical)
                    else:
                        break
                
        else:
            pass

    def change_file_guardian_enc_passwrds(self):
        
        while True:
       
            passwrd2_v4 = QInputDialog(self)
            passwrd2_v4.setWindowTitle("Modify 'File Guardian' encryption password entry:")
            passwrd2_v4.setLabelText("Please type the new 'File Guardian' encryption password to be changed.") 
            passwrd2_v4.setTextEchoMode(QLineEdit.Password)
   
            passwrd2_v4.setFixedSize(400, 240)

            passwrd2_v4.setStyleSheet(
                    """
                    
                    QLabel{
                        font-size:20px;
               
                        font-family:Arial;
                    }
                    QLineEdit{
                        font-size:20px;
                        font-family:Arial;
                    }
                    QPushButton{
                        font-size:20px;                         
                    }
                    """
                )
            okPressed4_2 = passwrd2_v4.exec_()
            passwrd2_v4_txt = passwrd2_v4.textValue()

            if okPressed4_2==True and passwrd2_v4_txt != '':

                new_hashed_encrypt_passcode_file_guardian = generate_password_hash(passwrd2_v4_txt,method='sha256')

                self.update_json(json_flpath3=passwords_json_file_path,info3=new_hashed_encrypt_passcode_file_guardian,keys3="hashed_encrypt_passcode_file_guardian",msg_title3="Encryption Password update - Complete",msg_txt3="'File Guardian' encryption password changed.")

                break
                
            elif okPressed4_2==True and passwrd2_v4_txt == '':
                self.msg_autoClose(msg_text="Null values are not accepted.                        ",msg_title="Input Verifer - Error:",close_tmr=3,msg_icon=QMessageBox.Critical)
            elif okPressed4_2==False and passwrd2_v4_txt == '':
                break
            else:
                break
    
    def change_folder_guardian_enc_passwrds(self):

        while True:
 
            passwrd2_v4 = QInputDialog(self)
            passwrd2_v4.setWindowTitle("Modify 'Folder Guardian' encryption password entry:")
            passwrd2_v4.setLabelText("Please type the new 'Folder Guardian' encryption password to be chnaged.")
            passwrd2_v4.setTextEchoMode(QLineEdit.Password)
 
            passwrd2_v4.setFixedSize(400, 240)

            passwrd2_v4.setStyleSheet(
                    """
                    
                    QLabel{
                        font-size:20px;
               
                        font-family:Arial;
                    }
                    QLineEdit{
                        font-size:20px;
                        font-family:Arial;
                    }
                    QPushButton{
                        font-size:20px;                         
                    }
                    """
                )
            okPressed4_2 = passwrd2_v4.exec_()
            passwrd2_v4_txt = passwrd2_v4.textValue()

            if okPressed4_2==True and passwrd2_v4_txt != '':

                new_hashed_encrypt_passcode_folder_guardian = generate_password_hash(passwrd2_v4_txt,method='sha256')

                self.update_json(json_flpath3=passwords_json_file_path,info3=new_hashed_encrypt_passcode_folder_guardian,keys3="hashed_encrypt_passcode_folder_guardian",msg_title3="Encryption Password update - Complete",msg_txt3="'File Guardian' encryption password changed.")
 
                break
            elif okPressed4_2==True and passwrd2_v4_txt == '':
                self.msg_autoClose(msg_text="Null values are not accepted.                        ",msg_title="Input Verifer - Error:",close_tmr=3,msg_icon=QMessageBox.Critical)
            elif okPressed4_2==False and passwrd2_v4_txt == '':
                break
            else:
                break
    
    def change_dec_passwrds(self):
        modify_pswrds_lists = ["Choose here to change 'File Guardian' decryption password.                  ",
                                  "Choose here to change 'Folder Guardian' decryption password.               "]
        
        returned_lstsbox_gui_out , returned_lstsbox_item_out = self.lists_box(l2=modify_pswrds_lists,title2="Modify 'Decryption' passwords:",txt2="Which decryption password do you wish to change?")
    
        if returned_lstsbox_gui_out == wx.ID_OK:
            choosen_choice_var = returned_lstsbox_item_out

            # print (f"\n Choosen mode -> {choosen_choice_var}")

            if choosen_choice_var == modify_pswrds_lists[0]:
                while True:
                 
                    passwrd2_v4 = QInputDialog(self)
                    passwrd2_v4.setWindowTitle("'File Guardian' decryption passcode entry:")
                    passwrd2_v4.setLabelText("Please type the 'File Guardian' decryption password.")
                    passwrd2_v4.setTextEchoMode(QLineEdit.Password)
                   
                    passwrd2_v4.setFixedSize(400, 240)

                    passwrd2_v4.setStyleSheet(
                            """
                            
                            QLabel{
                                font-size:20px;
                    
                                font-family:Arial;
                            }
                            QLineEdit{
                                font-size:20px;
                                font-family:Arial;
                            }
                            QPushButton{
                                font-size:20px;                         
                            }
                            """
                        )
                    okPressed4_2 = passwrd2_v4.exec_()
                    file_guardian_dec_passwrd2_v4_txt = passwrd2_v4.textValue()

                    if okPressed4_2==True and file_guardian_dec_passwrd2_v4_txt != '':
                        returned_hashed_file_guard_encrypt_pass, returned_hashed_file_guard_decrypt_pass, returned_hashed_folder_guard_encrypt_pass, returned_hashed_folder_guard_decrypt_pass = self.password_json_read(json_flpath7=passwords_json_file_path, k71="hashed_encrypt_passcode_file_guardian",k72="hashed_decrypt_passcode_file_guardian", k73="hashed_encrypt_passcode_folder_guardian",k74="hashed_decrypt_passcode_folder_guardian")

                        if check_password_hash(returned_hashed_file_guard_encrypt_pass,file_guardian_dec_passwrd2_v4_txt)==True:

                            self.msg_autoClose(msg_text="Password correct.                  ",msg_title="Access granted:                                     ",close_tmr=2,msg_icon=QMessageBox.Information)

                            self.change_file_guardian_dec_passwrds()

                            break

                        else:
                            self.msg_autoClose(msg_text="Wrong 'File Guardian' encrytion password.            ",msg_title="Access denied - Incorrect encryption password:            ",close_tmr=2,msg_icon=QMessageBox.Critical)
            
                    elif okPressed4_2==True and file_guardian_dec_passwrd2_v4_txt == '':
                        self.msg_autoClose(msg_text="Null values are not accepted.                              ",msg_title="Input verifier error:    ",close_tmr=3,msg_icon=QMessageBox.Critical)
                    else:
                        break
            else:
                while True:
         
            
                    passwrd2_v5 = QInputDialog(self)
                    passwrd2_v5.setWindowTitle("'Folder Guardian' decryption passcode entry:")
                    passwrd2_v5.setLabelText("Please type the 'Folder Guardian' decryption password.")
                    passwrd2_v5.setTextEchoMode(QLineEdit.Password)
                    passwrd2_v5.resize(400, 240)
                    okPressed5_2 = passwrd2_v5.exec_()
                    folder_guardian_dec_passwrd2_v4_txt = passwrd2_v5.textValue()

                    if okPressed5_2==True and folder_guardian_dec_passwrd2_v4_txt != '':


                        if check_password_hash(returned_hashed_folder_guard_encrypt_pass,folder_guardian_dec_passwrd2_v4_txt)==True:
                            self.msg_autoClose(msg_text="Password correct.                   ",msg_title="Access granted:                                  ",close_tmr=2,msg_icon=QMessageBox.Information)

                            self.change_folder_guardian_dec_passwrds()

                            break
                        else:
                            self.msg_autoClose(msg_text="Wrong 'File Guardian' encrytion password.                       ",msg_title="Access denied - Incorrect encrytion password:                     ",close_tmr=2,msg_icon=QMessageBox.Critical)
            
                    elif okPressed4_2==True and folder_guardian_dec_passwrd2_v4_txt == '':
                        self.msg_autoClose(msg_text="Null values are not accepted.                                           ",msg_title="Input verifier error:       ",close_tmr=3,msg_icon=QMessageBox.Critical)
                    else:
                        break
        else:
            pass

    def change_file_guardian_dec_passwrds(self):
        while True:
     
            passwrd2_v4 = QInputDialog(self)
            passwrd2_v4.setWindowTitle("Modify 'File Guardian' decryption password entry:")
            passwrd2_v4.setLabelText("Please type the new 'File Guardian' decryption password.")
            passwrd2_v4.setTextEchoMode(QLineEdit.Password)
           
            passwrd2_v4.setFixedSize(400, 240)

            passwrd2_v4.setStyleSheet(
                    """
                    
                    QLabel{
                        font-size:20px;
               
                        font-family:Arial;
                    }
                    QLineEdit{
                        font-size:20px;
                        font-family:Arial;
                    }
                    QPushButton{
                        font-size:20px;                         
                    }
                    """
                )
            okPressed4_2 = passwrd2_v4.exec_()
            passwrd2_v4_txt = passwrd2_v4.textValue()

            if okPressed4_2==True and passwrd2_v4_txt != '':

                if os.path.exists(passwords_json_file_path)==True:

                    self.update_json(json_flpath3=passwords_json_file_path,info3=passwrd2_v4_txt,keys3="hashed_decrypt_passcode_file_guardian",msg_title3="Decryption Password update - Complete",msg_txt3="'File Guardian' decryption password changed.")

                    break
                else:
                    break
            elif okPressed4_2==True and passwrd2_v4_txt == '':
                self.msg_autoClose(msg_text="Null values are not accepted.                        ",msg_title="Input Verifer - Error:",close_tmr=3,msg_icon=QMessageBox.Critical)
            elif okPressed4_2==False and passwrd2_v4_txt == '':
                break
            else:
                break
    
    def change_folder_guardian_dec_passwrds(self):
        
        while True:
 
    
            passwrd2_v4 = QInputDialog(self)
            passwrd2_v4.setWindowTitle("Modify 'Folder Guardian' decryption password entry:")
            passwrd2_v4.setLabelText("Please type the new 'Folder Guardian' decryption password to be changed.")
            passwrd2_v4.setTextEchoMode(QLineEdit.Password)
           
            passwrd2_v4.setFixedSize(400, 240)

            passwrd2_v4.setStyleSheet(
                    """
                    
                    QLabel{
                        font-size:20px;
               
                        font-family:Arial;
                    }
                    QLineEdit{
                        font-size:20px;
                        font-family:Arial;
                    }
                    QPushButton{
                        font-size:20px;                         
                    }
                    """
                )
            okPressed4_2 = passwrd2_v4.exec_()
            passwrd2_v4_txt = passwrd2_v4.textValue()

            if okPressed4_2==True and passwrd2_v4_txt != '':

                if os.path.exists(passwords_json_file_path)==True:

                    self.update_json(json_flpath3=passwords_json_file_path,info3=passwrd2_v4_txt,keys3="hashed_decrypt_passcode_folder_guardian",msg_title3="Decryption Password update - Complete",msg_txt3="'Folder Guardian' decryption password changed.")
      
                    break
                else:
                    break
            elif okPressed4_2==True and passwrd2_v4_txt == '':
                self.msg_autoClose(msg_text="Null values are not accepted.                        ",msg_title="Input Verifer - Error:",close_tmr=3,msg_icon=QMessageBox.Critical)
            elif okPressed4_2==False and passwrd2_v4_txt == '':
                break
            else:
                break
    
    def files_encname_changer(self):

        if os.path.exists(json_file_backups_file_path)==True:

            while True:
    
        
                passwrd2_v4 = QInputDialog(self)
                passwrd2_v4.setWindowTitle("'File Guardian' encrypted passcode entry:")
                passwrd2_v4.setLabelText("Please type the 'File Guardian' encryption password.")
                passwrd2_v4.setTextEchoMode(QLineEdit.Password)
            
                passwrd2_v4.setFixedSize(400, 240)

                passwrd2_v4.setStyleSheet(
                        """
                        
                        QLabel{
                            font-size:20px;
                
                            font-family:Arial;
                        }
                        QLineEdit{
                            font-size:20px;
                            font-family:Arial;
                        }
                        QPushButton{
                            font-size:20px;                         
                        }
                        """
                    )

                okPressed4_2 = passwrd2_v4.exec_()
                file_guardian_enc_passwrd2_v4_txt = passwrd2_v4.textValue()

                if okPressed4_2==True and file_guardian_enc_passwrd2_v4_txt != '':
                    returned_hashed_file_guard_encrypt_pass, returned_hashed_file_guard_decrypt_pass, returned_hashed_folder_guard_encrypt_pass, returned_hashed_folder_guard_decrypt_pass = self.password_json_read(json_flpath7=passwords_json_file_path, k71="hashed_encrypt_passcode_file_guardian",k72="hashed_decrypt_passcode_file_guardian", k73="hashed_encrypt_passcode_folder_guardian",k74="hashed_decrypt_passcode_folder_guardian")

                    if check_password_hash(returned_hashed_file_guard_encrypt_pass,file_guardian_enc_passwrd2_v4_txt)==True:

                        self.msg_autoClose(msg_text="Password correct.                               ",msg_title="Access granted:                     ",close_tmr=2,msg_icon=QMessageBox.Information)

                        returned_collections_folder_path , returned_encrypted_files_folder_path , returned_decrypted_files_folder_path, returned_crnt_yrs_folder_path_enc , returned_crnt_yrs_folder_path_dec , returned_now_mnthsno_mnths_sub_folder_enc , returned_now_mnthsno_mnths_sub_folder_dec , returned_now_date_folder_enc_path , returned_now_date_folder_dec_pat, returned_subfolder2_encfiles_path , returned_subfolder2_encfolders_path , returned_subfolder2_decfiles_path ,returned_subfolder2_decfolders_path =self.get_json_paths()
                        fl_dialog_title = "Choose encrypted file to change encrypted file name in app settings:"

                        wild_cards = "Encrypted file (*.enc)"
                        file_flenc2 , check_flenc2 = QFileDialog.getOpenFileName(self, fl_dialog_title,
                                                            returned_subfolder2_encfiles_path, wild_cards)

                        if check_flenc2:

                            files_enc2_flname , files_enc2_flextnts = os.path.splitext(os.path.basename(file_flenc2))

                            self.update_json(json_flpath3=json_file_backups_file_path,keys3="encrypted_file_name",info3=files_enc2_flname,msg_title3="Encrypted file name update - Complete:",msg_txt3="Encrypted file name changed successfully.      ")
                            print(f"File encrypted name changed: {files_enc2_flname}")
    
                            break

                        else:
                            break

                    else:
                        self.msg_autoClose(msg_text="Wrong 'File Guardian' encrytion password.                                        ",msg_title="Access denied - Incorrect encrytion password:                           ",close_tmr=2,msg_icon=QMessageBox.Critical)

                elif okPressed4_2==True and file_guardian_enc_passwrd2_v4_txt == '':
                    self.msg_autoClose(msg_text="Null values are not accepted.                                 ",msg_title="Input verifier error:                                            ",close_tmr=3,msg_icon=QMessageBox.Critical)
                else:
                    break

        else:
            self.msg_autoClose(msg_text= "File backup data not found.                         ",msg_title="Change info - Failed",close_tmr=2,msg_icon=QMessageBox.Critical)

            self.msg_autoClose(msg_text="Seeking Alternative...                         ",msg_title="Notify:",close_tmr=3,msg_icon=QMessageBox.Information)

            self.encrypt_file()
  
    def dirs_encname_changer(self):

        if os.path.exists(json_folder_backups_file_path)==True:
            while True:
                font = QtGui.QFont()
                font.setFamily("Arial")
                font.setPointSize(17)
        
                passwrd2_v5 = QInputDialog(self)
                passwrd2_v5.setWindowTitle("'Folder Guardian' encrypted passcode entry:")
                passwrd2_v5.setLabelText("Please type the 'Folder Guardian' encryption password.")
                passwrd2_v5.setTextEchoMode(QLineEdit.Password)
            # passwrd2_v5.setFont(font)
                passwrd2_v5.setFixedSize(400, 240)

                passwrd2_v5.setStyleSheet(
                        """
                        
                        QLabel{
                            font-size:20px;
                
                            font-family:Arial;
                        }
                        QLineEdit{
                            font-size:20px;
                            font-family:Arial;
                        }
                        QPushButton{
                            font-size:20px;                         
                        }
                        """
                    )
                okPressed5_2 = passwrd2_v5.exec_()
                folder_guardian_enc_passwrd2_v4_txt = passwrd2_v5.textValue()

                if okPressed5_2==True and folder_guardian_enc_passwrd2_v4_txt != '':

                    returned_hashed_file_guard_encrypt_pass, returned_hashed_file_guard_decrypt_pass, returned_hashed_folder_guard_encrypt_pass, returned_hashed_folder_guard_decrypt_pass = self.password_json_read(json_flpath7=passwords_json_file_path, k71="hashed_encrypt_passcode_file_guardian",k72="hashed_decrypt_passcode_file_guardian", k73="hashed_encrypt_passcode_folder_guardian",k74="hashed_decrypt_passcode_folder_guardian")

                    if check_password_hash(returned_hashed_folder_guard_encrypt_pass,folder_guardian_enc_passwrd2_v4_txt)==True:

                        self.msg_autoClose(msg_text="Password correct.                                               ",msg_title="Access granted:                              ",close_tmr=2,msg_icon=QMessageBox.Critical)

                        returned_collections_folder_path , returned_encrypted_files_folder_path , returned_decrypted_files_folder_path, returned_crnt_yrs_folder_path_enc , returned_crnt_yrs_folder_path_dec , returned_now_mnthsno_mnths_sub_folder_enc , returned_now_mnthsno_mnths_sub_folder_dec , returned_now_date_folder_enc_path , returned_now_date_folder_dec_pat, returned_subfolder2_encfiles_path , returned_subfolder2_encfolders_path , returned_subfolder2_decfiles_path ,returned_subfolder2_decfolders_path =self.get_json_paths()
                        
                        dirs_dialog_title = "Choose encrypted file to change encrypted folder name in app settings:"

                        wild_cards = "Encrypted folder (*.enc)"
                        dirs_flenc2 , check_dirsenc2 = QFileDialog.getOpenFileName(self, dirs_dialog_title,
                                                            returned_subfolder2_encfolders_path, wild_cards)

                        if check_dirsenc2:

                            dirs_enc2_flname , dirs_enc2_flextnts = os.path.splitext(os.path.basename(dirs_flenc2))

                            self.update_json(json_flpath3=json_folder_backups_file_path,keys3="encrypted_zip_folder_name",info3=dirs_enc2_flname,msg_title3="Encrypted folder name update - Complete:",msg_txt3="Encrypted folder name changed successfully.      ")

                            print(f"Folder encrypted name changed: {dirs_enc2_flname}")
    
                            break
                        else:
                            break
                    else:
                        self.msg_autoClose(msg_text="Wrong 'Folder Guardian' encrytion password.                                 ",msg_title="Access denied - Incorrect encrytion password:                   ",close_tmr=2,msg_icon=QMessageBox.Critical)
        
                elif okPressed5_2==True and folder_guardian_enc_passwrd2_v4_txt == '':
                    self.msg_autoClose(msg_text="Null values are not accepted.                          ",msg_title="Input verifier error:            ",close_tmr=3,msg_icon=QMessageBox.Critical)
                else:
                    break

        else:

            self.msg_autoClose(msg_text= "Folder backup data not found.                        ",msg_title="Change info - Failed",close_tmr=2,msg_icon=QMessageBox.Critical)

            self.msg_autoClose(msg_text="Seeking Alternative...                         ",msg_title="Notify:",close_tmr=3,msg_icon=QMessageBox.Information)

            self.encrypt_folder()

    def get_json_paths(self):

        try:

            returned_path = self.read_json(jsonfl_path1=paths_datas_json_file_path,k1="path")

            # Main app folders ->

            # Main collections folder path
            collections_folder_path = os.path.join(returned_path, collections_folder_name)

            # encrypted folder path
            encrypted_files_folder_path = os.path.join(collections_folder_path, enc_folder_name)

            # decrypted folder path
            decrypted_files_folder_path = os.path.join(collections_folder_path, dec_folder_name)

            # real-time 'years' folder in 'Encrypted files' folder path
            crnt_yrs_folder_path_enc = os.path.join(encrypted_files_folder_path, dt_yyyy)

            # real-time 'years' folder in 'Decrypted files' folder path
            crnt_yrs_folder_path_dec = os.path.join(decrypted_files_folder_path, dt_yyyy)

            # Current month number-month folder in real-time 'years' folder
            now_mnthsno_mnths_sub_folder_enc = os.path.join(crnt_yrs_folder_path_enc,
                                                                             dt_mnthsno_mnths)
            # Current month number-month folder in real-time 'years' folder
            now_mnthsno_mnths_sub_folder_dec = os.path.join(crnt_yrs_folder_path_dec,
                                                                             dt_mnthsno_mnths)

            # real-time 'date' folder in 'Encrypted files' folder path
            now_date_folder_enc_path = os.path.join(now_mnthsno_mnths_sub_folder_enc, dt_date)

            # real-time 'date' folder in 'Decrypted files' folder path
            now_date_folder_dec_path = os.path.join(now_mnthsno_mnths_sub_folder_dec, dt_date)

            # Encrypted files secondary sub-folder
            subfolder2_encfiles_path = os.path.join(now_date_folder_enc_path,
                                                                     encfiles_subfolder2_name)

            # Encrypted folders secondary sub-folder
            subfolder2_encfolders_path = os.path.join(now_date_folder_enc_path,
                                                                       encfolders_subfolder2_name)

            # Decrypted files secondary sub-folder
            subfolder2_decfiles_path = os.path.join(now_date_folder_dec_path,
                                                                     decfiles_subfolder2_name)
            # Decrypted folders secondary sub-folder
            subfolder2_decfolders_path = os.path.join(now_date_folder_dec_path,
                                                                       decfolders_subfolder2_name)

            # collection folder-shortcut maker
            self.enc_dec_folder_shortcut_maker_dt(path1=collections_folder_path,
                                                path2_enc=crnt_yrs_folder_path_enc,
                                                path2_dec=crnt_yrs_folder_path_dec,
                                                path3_date_enc=now_date_folder_enc_path,
                                                path3_date_dec=now_date_folder_dec_path,
                                                path4_month_enc=now_mnthsno_mnths_sub_folder_enc,
                                                path4_month_dec=now_mnthsno_mnths_sub_folder_dec,
                                                path5_encfiles=subfolder2_encfiles_path,
                                                path5_decfiles=subfolder2_decfiles_path,
                                                path6_encdirs=subfolder2_encfolders_path,
                                                path6_decdirs=subfolder2_decfolders_path,
                                                folder_name_var=collections_folder_name)

            self.delay(0.16)

        
            return collections_folder_path , encrypted_files_folder_path , decrypted_files_folder_path, crnt_yrs_folder_path_enc , crnt_yrs_folder_path_dec , now_mnthsno_mnths_sub_folder_enc , now_mnthsno_mnths_sub_folder_dec , now_date_folder_enc_path , now_date_folder_dec_path, subfolder2_encfiles_path , subfolder2_encfolders_path , subfolder2_decfiles_path , subfolder2_decfolders_path

        except FileNotFoundError:
            pass

    def chngpath(self):

        dir_dialog_title = f"Please choose folder (or directory) to be changed for '{main_app_folder_name}' folder:"
        
        chngdir_dlgbox = QFileDialog.getExistingDirectory(self, caption=dir_dialog_title)
           
        if chngdir_dlgbox:

            usr_chng_rt_v = chngdir_dlgbox.replace("/","\\")

            # print(usr_chng_rt_v)

            if os.path.exists(paths_datas_json_file_path)==True:

                self.update_json(json_flpath3=paths_datas_json_file_path,keys3="path",info3=usr_chng_rt_v,msg_title3="Path update - Complete:",msg_txt3="Path changed successfully.      ")

                self.get_json_paths()

                # self.delay(0.16)

                # os.startfile(returned_collections_folder_path)
            else:

                self.save_path_json()

         
            # print("\n> Path changed")
        else:
            pass
 
    def encrypt_file(self):

        self.save_path_json()

        if os.path.exists(paths_datas_json_file_path) == True:

            while True:
        
                passwrd2_v4 = QInputDialog(self)
                passwrd2_v4.setWindowTitle("'File Guardian' encrypted passcode entry:")
                passwrd2_v4.setLabelText("Please type the 'File Guardian' encryption password.")
                passwrd2_v4.setTextEchoMode(QLineEdit.Password)
    
                passwrd2_v4.setFixedSize(400, 240)

                passwrd2_v4.setStyleSheet(
                        """
                        
                        QLabel{
                            font-size:20px;
                
                            font-family:Arial;
                        }
                        QLineEdit{
                            font-size:20px;
                            font-family:Arial;
                        }
                        QPushButton{
                            font-size:20px;                         
                        }
                        """
                    )
                okPressed4_2 = passwrd2_v4.exec_()
                file_guardian_enc_passwrd2_v4_txt = passwrd2_v4.textValue()

                if okPressed4_2==True and file_guardian_enc_passwrd2_v4_txt != '':
                    returned_hashed_file_guard_encrypt_pass, returned_hashed_file_guard_decrypt_pass, returned_hashed_folder_guard_encrypt_pass, returned_hashed_folder_guard_decrypt_pass = self.password_json_read(json_flpath7=passwords_json_file_path, k71="hashed_encrypt_passcode_file_guardian",k72="hashed_decrypt_passcode_file_guardian", k73="hashed_encrypt_passcode_folder_guardian",k74="hashed_decrypt_passcode_folder_guardian")
                    
                    returned_collections_folder_path , returned_encrypted_files_folder_path , returned_decrypted_files_folder_path, returned_crnt_yrs_folder_path_enc , returned_crnt_yrs_folder_path_dec , returned_now_mnthsno_mnths_sub_folder_enc , returned_now_mnthsno_mnths_sub_folder_dec , returned_now_date_folder_enc_path , returned_now_date_folder_dec_pat, returned_subfolder2_encfiles_path , returned_subfolder2_encfolders_path , returned_subfolder2_decfiles_path ,returned_subfolder2_decfolders_path =self.get_json_paths()
                    if check_password_hash(returned_hashed_file_guard_encrypt_pass,file_guardian_enc_passwrd2_v4_txt)==True:
                        
                        self.msg_autoClose(msg_text="Password correct.                                    ",msg_title="Access granted:            ",close_tmr=2,msg_icon=QMessageBox.Information)

                        fl_dialog_title = "Choose file to be encrypted:"

                        wild_cards = "All Files (*);;Notepad (*.txt);;JPEG (*.jpeg);;PNG (*.png);; Mp3 (*.mp3);;MP4 (*.mp4);;Microsoft Word Document (*.docx)"
    
                        # file_enc1 , check_enc1 = QFileDialog.getOpenFileName(self, "Choose file to be encrypted:","", "All Files (*);;Notepad (*.txt);;JPEG (*.jpeg);;PNG (*.png);; Mp3 (*.mp3);;MP4 (*.mp4);;Microsoft Word Document (*.docx)")
                        file_enc1 , check_enc1 = QFileDialog.getOpenFileName(self, fl_dialog_title,"", wild_cards)
                        if check_enc1:
                            file_enc1_re = file_enc1.replace("/","\\")
                            print(f"File encrypted: {file_enc1_re}")

                            file_name, file_format = os.path.splitext(os.path.basename(file_enc1_re))

                            src_file_full_name = f"{file_name}{file_format}"

                            str_enc_name = cipher.encrypt(bytes(str(src_file_full_name), 'utf-8')).decode()

                            file_name_flenc = f'{str_enc_name}.enc'

                            # Encrypted file path with real-time now-date sub folder
                            complete_file_rt_enc = os.path.join(returned_subfolder2_encfiles_path, file_name_flenc)

                            if os.path.exists(complete_file_rt_enc)==False:

                                self.msg_autoClose(msg_title="Encryption info - Intiated            ",msg_text=f"Started Encrypting '{src_file_full_name}' file.                                  ",close_tmr=3,msg_icon=QMessageBox.Information)

                                non_encrypt_fl = open(file_enc1_re, 'rb')

                                non_enc_fl_data = non_encrypt_fl.read()

                                encrypted_data = cipher.encrypt(non_enc_fl_data)

                                enc_fl = open(complete_file_rt_enc, 'wb')

                                enc_fl.write(encrypted_data)

                                self.save_json(json_flpath1=json_file_backups_file_path,keys1="encrypted_file_name",val1=str_enc_name)

                                enc_fl.close()

                                non_encrypt_fl.close()

                                os.remove(file_enc1_re)

                                self.msg_autoClose(msg_title="Encryption info - Success",msg_text=f"'{src_file_full_name}' file successfully encrypted.                                                ",close_tmr=3,msg_icon=QMessageBox.Information)
                                
                                break
                            else:
                                self.apps_log_sys(logerr_msg=f"EncryptionError: '{file_enc1_re}' file already encrypted.",err_msgtitle="Encryption info - Failed",err_msgtxt=f"'{src_file_full_name}' file already encrypted.                                 ")
                
                                # break
                        else:
                            break
                    else:
                        self.msg_autoClose(msg_text="Wrong 'File Guardian' encrytion password.                                                 ",msg_title="Access denied - Incorrect encrytion password:",close_tmr=3,msg_icon=QMessageBox.Critical)

                    # self.apps_log_sys()
                elif okPressed4_2==True and file_guardian_enc_passwrd2_v4_txt == '':
                    self.msg_autoClose(msg_text="Null values are not accepted.                        ",msg_title="Input Verifer - Error:",close_tmr=3,msg_icon=QMessageBox.Critical)
                elif okPressed4_2==False and file_guardian_enc_passwrd2_v4_txt == '':
                    break
                else:
                    break
        else:
            pass
    
    def encrypt_folder(self):

        self.save_path_json()

        if os.path.exists(paths_datas_json_file_path) == True:

            while True:
                font = QtGui.QFont()
                font.setFamily("Arial")
                font.setPointSize(17)
        
                passwrd2_v5 = QInputDialog(self)
                passwrd2_v5.setWindowTitle("'Folder Guardian' encrypted passcode entry:")
                passwrd2_v5.setLabelText("Please type the 'Folder Guardian' encryption password.")
                passwrd2_v5.setTextEchoMode(QLineEdit.Password)
            # passwrd2_v5.setFont(font)
                passwrd2_v5.setFixedSize(400, 240)

                passwrd2_v5.setStyleSheet(
                        """
                        
                        QLabel{
                            font-size:20px;
                
                            font-family:Arial;
                        }
                        QLineEdit{
                            font-size:20px;
                            font-family:Arial;
                        }
                        QPushButton{
                            font-size:20px;                         
                        }
                        """
                    )
                okPressed5_2 = passwrd2_v5.exec_()
                folder_guardian_enc_passwrd2_v4_txt = passwrd2_v5.textValue()

                if okPressed5_2==True and folder_guardian_enc_passwrd2_v4_txt != '':
                    returned_hashed_file_guard_encrypt_pass, returned_hashed_file_guard_decrypt_pass, returned_hashed_folder_guard_encrypt_pass, returned_hashed_folder_guard_decrypt_pass = self.password_json_read(json_flpath7=passwords_json_file_path, k71="hashed_encrypt_passcode_file_guardian",k72="hashed_decrypt_passcode_file_guardian", k73="hashed_encrypt_passcode_folder_guardian",k74="hashed_decrypt_passcode_folder_guardian")

                    returned_collections_folder_path , returned_encrypted_files_folder_path , returned_decrypted_files_folder_path, returned_crnt_yrs_folder_path_enc , returned_crnt_yrs_folder_path_dec , returned_now_mnthsno_mnths_sub_folder_enc , returned_now_mnthsno_mnths_sub_folder_dec , returned_now_date_folder_enc_path , returned_now_date_folder_dec_pat, returned_subfolder2_encfiles_path , returned_subfolder2_encfolders_path , returned_subfolder2_decfiles_path ,returned_subfolder2_decfolders_path =self.get_json_paths()
                    if check_password_hash(returned_hashed_folder_guard_encrypt_pass,folder_guardian_enc_passwrd2_v4_txt)==True:
                    
                        self.msg_autoClose(msg_text="Password correct.                                ",msg_title="Access granted:",close_tmr=2,msg_icon=QMessageBox.Information)

                        dir_dialog_title = "Please choose folder (or directory) to be encrypted:"
                        dir_dlgbox = QFileDialog.getExistingDirectory(self, caption=dir_dialog_title)

                        if dir_dlgbox:

                            usr_rt_enc1 = dir_dlgbox.replace("/","\\")

                            print(f"Folder encrypted: {usr_rt_enc1}")

                            dir_name_in = os.path.basename(usr_rt_enc1)

                            zip_file_name = f"{dir_name_in}.zip"

                            zip_name_encoded = cipher.encrypt(bytes(str(zip_file_name), 'utf-8')).decode()

                            zip_file_encoded = f"{zip_name_encoded}.enc"

                            # Compress folder path
                            compressed_dir_path = os.path.join(returned_subfolder2_encfolders_path, zip_file_name)

                            compressed_dir_path2 = os.path.join(returned_subfolder2_encfolders_path, dir_name_in)

                            # Encrypted compressed folder path
                            compressed_dir_path_enc = os.path.join(returned_subfolder2_encfolders_path, zip_file_encoded)

                            if os.path.exists(compressed_dir_path_enc) == False:

                                self.msg_autoClose(msg_title="Encryption info - Intiated",msg_text=f"Started Encrypting '{dir_name_in}' folder.                                               ",close_tmr=3,msg_icon=QMessageBox.Information)

                                shutil.make_archive(compressed_dir_path2, format="zip", root_dir=usr_rt_enc1)

                                non_encrypt_fl = open(compressed_dir_path, 'rb')

                                non_enc_fl_data = non_encrypt_fl.read()

                                encrypted_data = cipher.encrypt(non_enc_fl_data)

                                enc_fl = open(compressed_dir_path_enc, 'wb')

                                enc_fl.write(encrypted_data)

                                self.save_json(json_flpath1=json_folder_backups_file_path,keys1="encrypted_zip_folder_name",val1=zip_name_encoded)

                                enc_fl.close()

                                non_encrypt_fl.close()

                                os.remove(compressed_dir_path)

                                shutil.rmtree(usr_rt_enc1)

                                self.msg_autoClose(msg_title="Encryption info - Success",msg_text=f"'{dir_name_in}' folder successfully encrypted.",close_tmr=3,msg_icon=QMessageBox.Information)

                                break

                            else:
                                self.apps_log_sys(logerr_msg=f"EncryptionError: '{usr_rt_enc1}' directory already encrypted.",err_msgtitle="Encryption info - Failed",err_msgtxt=f"'{dir_name_in}' folder already encrypted.")

                                # break
                        
                        else:
                            break
                    else:
                        self.msg_autoClose(msg_text="Wrong 'Folder Guardian' encrytion password.                                  ",msg_title="Access denied - Incorrect encryption password:                         ",close_tmr=3,msg_icon=QMessageBox.Critical)
                elif okPressed5_2==True and folder_guardian_enc_passwrd2_v4_txt == '':
                    self.msg_autoClose(msg_text="Null values are not accepted.                               ",msg_title="Input Verifer - Error:",close_tmr=3,msg_icon=QMessageBox.Critical)
                elif okPressed5_2==False and folder_guardian_enc_passwrd2_v4_txt == '':
                    break
                else:
                    break
        else:
            pass
        
    def decrypt_file(self):

        self.save_path_json()


        if os.path.exists(paths_datas_json_file_path) == True:

            while True:
                    
                passwrd2_v4 = QInputDialog(self)
                passwrd2_v4.setWindowTitle("'File Guardian' decryption passcode entry:")
                passwrd2_v4.setLabelText("Please type the 'File Guardian' decryption password.")
                passwrd2_v4.setTextEchoMode(QLineEdit.Password)
    
                passwrd2_v4.setFixedSize(400, 240)

                passwrd2_v4.setStyleSheet(
                        """
                        
                        QLabel{
                            font-size:20px;
                
                            font-family:Arial;
                        }
                        QLineEdit{
                            font-size:20px;
                            font-family:Arial;
                        }
                        QPushButton{
                            font-size:20px;                         
                        }
                        """
                    )
                okPressed4_2 = passwrd2_v4.exec_()
                file_guardian_dec_passwrd2_v4_txt = passwrd2_v4.textValue()

                if okPressed4_2==True and file_guardian_dec_passwrd2_v4_txt != '':
                    returned_hashed_file_guard_encrypt_pass, returned_hashed_file_guard_decrypt_pass, returned_hashed_folder_guard_encrypt_pass, returned_hashed_folder_guard_decrypt_pass = self.password_json_read(json_flpath7=passwords_json_file_path, k71="hashed_encrypt_passcode_file_guardian",k72="hashed_decrypt_passcode_file_guardian", k73="hashed_encrypt_passcode_folder_guardian",k74="hashed_decrypt_passcode_folder_guardian")

                    returned_collections_folder_path , returned_encrypted_files_folder_path , returned_decrypted_files_folder_path, returned_crnt_yrs_folder_path_enc , returned_crnt_yrs_folder_path_dec , returned_now_mnthsno_mnths_sub_folder_enc , returned_now_mnthsno_mnths_sub_folder_dec , returned_now_date_folder_enc_path , returned_now_date_folder_dec_pat, returned_subfolder2_encfiles_path , returned_subfolder2_encfolders_path , returned_subfolder2_decfiles_path ,returned_subfolder2_decfolders_path =self.get_json_paths()
                    if check_password_hash(returned_hashed_file_guard_decrypt_pass,file_guardian_dec_passwrd2_v4_txt)==True:
                        
                        self.msg_autoClose(msg_text="Password correct.                         ",msg_title="Access granted:",close_tmr=2,msg_icon=QMessageBox.Information)

                        if os.path.exists(json_file_backups_file_path)==True:

                            returned_encrypted_fl = self.read_json(jsonfl_path1=json_file_backups_file_path,k1="encrypted_file_name")

                            file_full_name_json_decoded = cipher.decrypt(bytes(returned_encrypted_fl, 'utf-8')).decode()

                            # Encrypted file source file name
                            file_name_enc = f'{returned_encrypted_fl}.enc'

                            dec_complete_file_rt = os.path.join(returned_subfolder2_decfiles_path, file_full_name_json_decoded)

                            # Encrypted files details with real time now-date sub folder
                            complete_file_rt_enc_json = os.path.join(returned_subfolder2_encfiles_path, file_name_enc)

                            if os.path.exists(dec_complete_file_rt) == False:

                                encrypt_fl = open(complete_file_rt_enc_json, 'rb')

                                enc_file_data = encrypt_fl.read()

                                Decrypted_file = cipher.decrypt(enc_file_data)

                                dec_fl = open(dec_complete_file_rt, 'wb')

                                dec_fl.write(Decrypted_file)

                                dec_fl.close()

                                encrypt_fl.close()

                                # Deletes encrypted file completely
                                os.remove(complete_file_rt_enc_json)

                                print("File decrypted")
                                    
                                self.msg_autoClose(msg_title="Decryption info - Success",msg_text=f"'{file_name_enc}' file successfully decrypted.                                       ",close_tmr=3,msg_icon=QMessageBox.Information)
                                    
                                break

                            else:
                                self.apps_log_sys(logerr_msg=f"DecryptionError: '{dec_complete_file_rt}' file already decrypted.",err_msgtitle="Decryption info - Failed",err_msgtxt=f"'{file_name_enc}' file already decrypted.                                                      ")
                                    
                                break
                        
                        else:
                            self.msg_autoClose(msg_text= "File backup data not found.                        ",msg_title="Decryption info - Failed",close_tmr=2,msg_icon=QMessageBox.Critical)

                            self.msg_autoClose(msg_text="Seeking Alternative...                         ",msg_title="Notify:",close_tmr=3,msg_icon=QMessageBox.Information)

                            self.encrypt_file()

                            break

                    else:
                        self.msg_autoClose(msg_text="Wrong 'File Guardian' decryption password.                            ",msg_title="Access denied - Incorrect decryption password:",close_tmr=3,msg_icon=QMessageBox.Critical)
                elif okPressed4_2==True and file_guardian_dec_passwrd2_v4_txt == '':
                    self.msg_autoClose(msg_text="Null values are not accepted.                        ",msg_title="Input Verifer - Error:",close_tmr=3,msg_icon=QMessageBox.Critical)
                elif okPressed4_2==False and file_guardian_dec_passwrd2_v4_txt == '':
                    break
                else:
                    break
                        
        else:
            pass

    def decrypt_folder(self):

        self.save_path_json()

        if os.path.exists(paths_datas_json_file_path) == True:

            while True:
                            
                passwrd2_v4 = QInputDialog(self)
                passwrd2_v4.setWindowTitle("'Folder Guardian' decryption passcode entry:")
                passwrd2_v4.setLabelText("Please type the 'Folder Guardian' decryption password.")
                passwrd2_v4.setTextEchoMode(QLineEdit.Password)
    
                passwrd2_v4.setFixedSize(400, 240)

                passwrd2_v4.setStyleSheet(
                        """
                        
                        QLabel{
                            font-size:20px;
                
                            font-family:Arial;
                        }
                        QLineEdit{
                            font-size:20px;
                            font-family:Arial;
                        }
                        QPushButton{
                            font-size:20px;                         
                        }
                        """
                )
                okPressed4_2 = passwrd2_v4.exec_()
                folder_guardian_dec_passwrd2_v4_txt = passwrd2_v4.textValue()

                if okPressed4_2==True and folder_guardian_dec_passwrd2_v4_txt != '':
                    returned_hashed_file_guard_encrypt_pass, returned_hashed_file_guard_decrypt_pass, returned_hashed_folder_guard_encrypt_pass, returned_hashed_folder_guard_decrypt_pass = self.password_json_read(json_flpath7=passwords_json_file_path, k71="hashed_encrypt_passcode_file_guardian",k72="hashed_decrypt_passcode_file_guardian", k73="hashed_encrypt_passcode_folder_guardian",k74="hashed_decrypt_passcode_folder_guardian")
                    
                    returned_collections_folder_path , returned_encrypted_files_folder_path , returned_decrypted_files_folder_path, returned_crnt_yrs_folder_path_enc , returned_crnt_yrs_folder_path_dec , returned_now_mnthsno_mnths_sub_folder_enc , returned_now_mnthsno_mnths_sub_folder_dec , returned_now_date_folder_enc_path , returned_now_date_folder_dec_pat, returned_subfolder2_encfiles_path , returned_subfolder2_encfolders_path , returned_subfolder2_decfiles_path ,returned_subfolder2_decfolders_path =self.get_json_paths()
                    if check_password_hash(returned_hashed_folder_guard_encrypt_pass,folder_guardian_dec_passwrd2_v4_txt)==True:
                        self.msg_autoClose(msg_text="Password correct.",msg_title="Access granted:",close_tmr=2,msg_icon=QMessageBox.Information)
    
                        if os.path.exists(json_file_backups_file_path)==True:

                            returned_encrypted_zipfl = self.read_json(jsonfl_path1=json_folder_backups_file_path,k1="encrypted_zip_folder_name")

                            zipfl_full_name_json_decoded = cipher.decrypt(bytes(returned_encrypted_zipfl, 'utf-8')).decode()

                            # Encrypted file source file name
                            file_name_enc2 = f'{returned_encrypted_zipfl}.enc'

                            dec_complete_file_rt2 = os.path.join(returned_subfolder2_decfiles_path, zipfl_full_name_json_decoded)

                            # Encrypted files details with real time now-date sub folder
                            complete_file_rt_enc_json2 = os.path.join(returned_subfolder2_encfolders_path, file_name_enc2)

                            # Decrypted files details with real time now-date sub folder
                            file_name2, file_type2 = os.path.splitext(os.path.basename(zipfl_full_name_json_decoded))

                            complete_file_rt_dec2 = os.path.join(returned_subfolder2_decfolders_path, file_name2)

                            if os.path.exists(dec_complete_file_rt2) == False:
                                encrypt_fl2 = open(complete_file_rt_enc_json2, 'rb')

                                enc_file_data2 = encrypt_fl2.read()

                                Decrypted_file2 = cipher.decrypt(enc_file_data2)

                                dec_fl2 = open(dec_complete_file_rt2, 'wb')

                                dec_fl2.write(Decrypted_file2)

                                dec_fl2.close()

                                encrypt_fl2.close()

                                #  Deletes encrypted file completely
                                os.remove(complete_file_rt_enc_json2)

                                with zipfile.ZipFile(dec_complete_file_rt2, 'r') as zf_dec:

                                    zf_dec.extractall(complete_file_rt_dec2)

                                zf_dec.close()

                                #  Deletes zip file
                                os.remove(dec_complete_file_rt2)

                                print("File decrypted")

                                self.msg_autoClose(msg_title="Decryption info - Success",msg_text=f"'{file_name_enc2}' file successfully decrypted.",close_tmr=3,msg_icon=QMessageBox.Information)

                                break

                            else:
                                self.apps_log_sys(logerr_msg=f"DecryptionError: '{dec_complete_file_rt2}' file already decrypted.",err_msgtitle="Decryption info - Failed",err_msgtxt=f"'{file_name_enc2}' folder already decrypted.")
                                    
                                break
                        else:
                            self.msg_autoClose(msg_text= "Folder backup data not found.                        ",msg_title="Decryption info - Failed",close_tmr=2,msg_icon=QMessageBox.Critical)

                            self.msg_autoClose(msg_text="Seeking Alternative...                         ",msg_title="Notify:",close_tmr=3,msg_icon=QMessageBox.Information)

                            self.encrypt_folder()

                            break
                    else:
                        self.msg_autoClose(msg_text="Wrong 'Folder Guardian' decryption password.                      ",msg_title="Access denied - Incorrect decryption password:                           ",close_tmr=3,msg_icon=QMessageBox.Critical)

                elif okPressed4_2==True and folder_guardian_dec_passwrd2_v4_txt == '':
                    self.msg_autoClose(msg_text="Null values are accepted.                        ",msg_title="Input Verifer - Error:",close_tmr=3,msg_icon=QMessageBox.Critical)
                elif okPressed4_2==False and folder_guardian_dec_passwrd2_v4_txt == '':
                    break
                else:
                    break
        else:
            pass
  
    def open_ps_collections(self):
        self.save_path_json()

        if os.path.exists(paths_datas_json_file_path)== True:
            returned_collections_folder_path , returned_encrypted_files_folder_path , returned_decrypted_files_folder_path, returned_crnt_yrs_folder_path_enc , returned_crnt_yrs_folder_path_dec , returned_now_mnthsno_mnths_sub_folder_enc , returned_now_mnthsno_mnths_sub_folder_dec , returned_now_date_folder_enc_path , returned_now_date_folder_dec_pat, returned_subfolder2_encfiles_path , returned_subfolder2_encfolders_path , returned_subfolder2_decfiles_path ,returned_subfolder2_decfolders_path =self.get_json_paths()

            lst_dir_encfiles = len(os.listdir(returned_subfolder2_encfiles_path))

            lst_dir_encfolders = len(os.listdir(returned_subfolder2_encfolders_path))

            lst_dir_decfiles = len(os.listdir(returned_subfolder2_decfiles_path))

            lst_dir_decfolders = len(os.listdir(returned_subfolder2_decfolders_path))
            if lst_dir_encfiles==0 or lst_dir_encfolders==0 or lst_dir_decfiles==0 or lst_dir_decfolders==0:
                logerr_txt = f"Access Denied: No items (encrypyted or decrypted) found in directories '{returned_subfolder2_encfiles_path}' , '{returned_subfolder2_encfolders_path}' , '{returned_subfolder2_decfiles_path}' , '{returned_subfolder2_decfolders_path}' ."
                self.apps_log_sys(logerr_msg=logerr_txt,err_msgtitle="Access denied - No items files found: ",err_msgtxt=r"No encrypted\decrypted items found")
                # pass
            else:
                # open collection folder
                os.startfile(returned_collections_folder_path)
        else:
            pass

    def open_ps_encfiles(self):
        self.save_path_json()

        if os.path.exists(paths_datas_json_file_path) == True:
            returned_collections_folder_path , returned_encrypted_files_folder_path , returned_decrypted_files_folder_path, returned_crnt_yrs_folder_path_enc , returned_crnt_yrs_folder_path_dec , returned_now_mnthsno_mnths_sub_folder_enc , returned_now_mnthsno_mnths_sub_folder_dec , returned_now_date_folder_enc_path , returned_now_date_folder_dec_pat, returned_subfolder2_encfiles_path , returned_subfolder2_encfolders_path , returned_subfolder2_decfiles_path ,returned_subfolder2_decfolders_path =self.get_json_paths()        

            # Getting the list of items in a directories
            lst_dir1_encfiles = os.listdir(returned_subfolder2_encfiles_path)

            # Checking if the list is empty or not
            if len(lst_dir1_encfiles) == 0:
                logerr_txt = f"Access Denied: No ecrypted files found in directory '{returned_subfolder2_encfiles_path}'."
                self.apps_log_sys(logerr_msg=logerr_txt,err_msgtitle="Access denied - No ecrypted files found: ",err_msgtxt="No ecrypted files found")

            else:
                # open 'encrypted files' folder secured with passowrd
                self.user_only_access_ps_encfiles(path4_1=returned_subfolder2_encfiles_path)

        else:
            pass

    def open_ps_encfolders(self):
        self.save_path_json()

        if os.path.exists(paths_datas_json_file_path) == True:
            returned_collections_folder_path , returned_encrypted_files_folder_path , returned_decrypted_files_folder_path, returned_crnt_yrs_folder_path_enc , returned_crnt_yrs_folder_path_dec , returned_now_mnthsno_mnths_sub_folder_enc , returned_now_mnthsno_mnths_sub_folder_dec , returned_now_date_folder_enc_path , returned_now_date_folder_dec_pat, returned_subfolder2_encfiles_path , returned_subfolder2_encfolders_path , returned_subfolder2_decfiles_path ,returned_subfolder2_decfolders_path =self.get_json_paths()

            # Getting the list of items in a directories
            lst_dir2_encfolders = os.listdir(returned_subfolder2_encfolders_path)

            # Checking if the list is empty or not
            if len(lst_dir2_encfolders) == 0:
                logerr_txt = f"Access Denied: No ecrypted folders found in directory '{returned_subfolder2_encfolders_path}'."
                self.apps_log_sys(logerr_msg=logerr_txt,err_msgtitle="Access denied - No ecrypted folders found: ",err_msgtxt="No ecrypted folders found")

            else:
                # open 'Encrypted folder' folder secured with passowrd
                self.user_only_access_ps_encfolders(path4_2=returned_subfolder2_encfolders_path)
        else:
            pass

    def user_only_access_ps_encfiles(self,path4_1):
        while True:
       
            file_guardian_enc_passwr4_1 = QInputDialog(self)
            file_guardian_enc_passwr4_1.setWindowTitle("'File Guardian' encrypted passcode entry:")
            file_guardian_enc_passwr4_1.setLabelText(f"Please type the 'File Guardian' encryption password to access '{encfiles_subfolder2_name}' archives.")
            file_guardian_enc_passwr4_1.setTextEchoMode(QLineEdit.Password)
   
            file_guardian_enc_passwr4_1.setFixedSize(400, 240)

            file_guardian_enc_passwr4_1.setStyleSheet(
                    """
                    
                    QLabel{
                        font-size:20px;
               
                        font-family:Arial;
                    }
                    QLineEdit{
                        font-size:20px;
                        font-family:Arial;
                    }
                    QPushButton{
                        font-size:20px;                         
                    }
                    """
                )
            file_guardian_enc_passwrd4_1_out = file_guardian_enc_passwr4_1.exec_()
            file_guardian_enc_passwrd4_1_txt = file_guardian_enc_passwr4_1.textValue()

            if file_guardian_enc_passwrd4_1_out==True and file_guardian_enc_passwrd4_1_txt != '':

                returned_hashed_file_guard_encrypt_pass, returned_hashed_file_guard_decrypt_pass, returned_hashed_folder_guard_encrypt_pass, returned_hashed_folder_guard_decrypt_pass = self.password_json_read(json_flpath7=passwords_json_file_path, k71="hashed_encrypt_passcode_file_guardian",k72="hashed_decrypt_passcode_file_guardian", k73="hashed_encrypt_passcode_folder_guardian",k74="hashed_decrypt_passcode_folder_guardian")

                if check_password_hash(returned_hashed_file_guard_encrypt_pass,file_guardian_enc_passwrd4_1_txt)==True:

                    self.msg_autoClose(msg_text="Password correct.                    ",msg_title="Access granted:",close_tmr=2,msg_icon=QMessageBox.Information)
 
                    os.startfile(path4_1)

                    break

                else:
                    self.msg_autoClose(msg_text="Wrong 'File Guardian' encrytion password.                      ",msg_title="Access denied - Incorrect encryption password:        ",close_tmr=3,msg_icon=QMessageBox.Critical)
            
            elif file_guardian_enc_passwrd4_1_out==True and file_guardian_enc_passwrd4_1_txt == '':
                self.msg_autoClose(msg_text="Null values are not accepted.                        ",msg_title="Input Verifer - Error:",close_tmr=3,msg_icon=QMessageBox.Critical)
            elif file_guardian_enc_passwrd4_1_out==False and file_guardian_enc_passwrd4_1_txt == '':
                break
            else:
                break

    def user_only_access_ps_encfolders(self,path4_2):
        while True:
       
            folder_guardian_enc_passwr4_2 = QInputDialog(self)
            folder_guardian_enc_passwr4_2.setWindowTitle("'Folder Guardian' encrypted passcode entry:")
            folder_guardian_enc_passwr4_2.setLabelText(f"Please type the 'Folder Guardian' encryption password to access '{encfolders_subfolder2_name}' archives.")
            folder_guardian_enc_passwr4_2.setTextEchoMode(QLineEdit.Password)
   
            folder_guardian_enc_passwr4_2.setFixedSize(400, 240)

            folder_guardian_enc_passwr4_2.setStyleSheet(
                    """
                    
                    QLabel{
                        font-size:20px;
               
                        font-family:Arial;
                    }
                    QLineEdit{
                        font-size:20px;
                        font-family:Arial;
                    }
                    QPushButton{
                        font-size:20px;                         
                    }
                    """
                )
            folder_guardian_enc_passwr4_2_out = folder_guardian_enc_passwr4_2.exec_()
            folder_guardian_enc_passwr4_2_txt = folder_guardian_enc_passwr4_2.textValue()

            if folder_guardian_enc_passwr4_2_out==True and folder_guardian_enc_passwr4_2_txt != '':

                returned_hashed_file_guard_encrypt_pass, returned_hashed_file_guard_decrypt_pass, returned_hashed_folder_guard_encrypt_pass, returned_hashed_folder_guard_decrypt_pass = self.password_json_read(json_flpath7=passwords_json_file_path, k71="hashed_encrypt_passcode_file_guardian",k72="hashed_decrypt_passcode_file_guardian", k73="hashed_encrypt_passcode_folder_guardian",k74="hashed_decrypt_passcode_folder_guardian")

                if check_password_hash(returned_hashed_folder_guard_encrypt_pass,folder_guardian_enc_passwr4_2_txt)==True:

                    self.msg_autoClose(msg_text="Password correct.                    ",msg_title="Access granted:",close_tmr=2,msg_icon=QMessageBox.Information)

                    os.startfile(path4_2)

                    break

                else:
                    self.msg_autoClose(msg_text="Wrong 'Folder Guardian' encrytion password.                      ",msg_title="Access denied - Incorrect encryption password:        ",close_tmr=3,msg_icon=QMessageBox.Critical)
            
            elif folder_guardian_enc_passwr4_2_out==True and folder_guardian_enc_passwr4_2_txt == '':
                self.msg_autoClose(msg_text="Null values are not accepted.                        ",msg_title="Input Verifer - Error:",close_tmr=3,msg_icon=QMessageBox.Critical)
            elif folder_guardian_enc_passwr4_2_out==False and folder_guardian_enc_passwr4_2_txt == '':
                break
            else:
                break
         
    def open_ps_decfiles(self):
        self.save_path_json()

        if os.path.exists(paths_datas_json_file_path) == True:
            returned_collections_folder_path , returned_encrypted_files_folder_path , returned_decrypted_files_folder_path, returned_crnt_yrs_folder_path_enc , returned_crnt_yrs_folder_path_dec , returned_now_mnthsno_mnths_sub_folder_enc , returned_now_mnthsno_mnths_sub_folder_dec , returned_now_date_folder_enc_path , returned_now_date_folder_dec_pat, returned_subfolder2_encfiles_path , returned_subfolder2_encfolders_path , returned_subfolder2_decfiles_path ,returned_subfolder2_decfolders_path =self.get_json_paths()
            
            # Getting the list of items in a directories
            lst_dir3_decfiles = os.listdir(returned_subfolder2_decfiles_path)

            # Checking if the list is empty or not
            if len(lst_dir3_decfiles) == 0:
                logerr_txt = f"Access Denied: No decrypted files found in directory '{returned_subfolder2_decfiles_path}'."
                self.apps_log_sys(logerr_msg=logerr_txt,err_msgtitle="Access denied - No decrypted files found: ",err_msgtxt="No decrypted files found")

            else:
                # Open 'Decrypted files folder secured with passowrd
                self.user_only_access_ps_decfiles(path5_1=returned_subfolder2_decfiles_path)
        else:
            pass

    def open_ps_decfolders(self):
        self.save_path_json()

        if os.path.exists(paths_datas_json_file_path) == True:
            returned_collections_folder_path , returned_encrypted_files_folder_path , returned_decrypted_files_folder_path, returned_crnt_yrs_folder_path_enc , returned_crnt_yrs_folder_path_dec , returned_now_mnthsno_mnths_sub_folder_enc , returned_now_mnthsno_mnths_sub_folder_dec , returned_now_date_folder_enc_path , returned_now_date_folder_dec_pat, returned_subfolder2_encfiles_path , returned_subfolder2_encfolders_path , returned_subfolder2_decfiles_path ,returned_subfolder2_decfolders_path =self.get_json_paths()
            
            # Getting the list of items in a directories
            lst_dir3_decfolders = os.listdir(returned_subfolder2_decfolders_path)

            # Checking if the list is empty or not
            if len(lst_dir3_decfolders) == 0:
                logerr_txt = f"Access Denied: No decrypted folders found in directory '{returned_subfolder2_decfolders_path}'."
                self.apps_log_sys(logerr_msg=logerr_txt,err_msgtitle="Access denied - No decrypted folders found: ",err_msgtxt="No decrypted folders found")

            else:
                # Open 'Decrypted folders' folder secured with passowrd
                self.user_only_access_ps_decfolders(path5_2=returned_subfolder2_decfolders_path)

        else:
            pass

    def user_only_access_ps_decfiles(self,path5_1):
        while True:
       
            file_guardian_dec_passwr5_1 = QInputDialog(self)
            file_guardian_dec_passwr5_1.setWindowTitle("'File Guardian' decryption passcode entry:")
            file_guardian_dec_passwr5_1.setLabelText(f"Please type the 'File Guardian' decryption password to access '{decfiles_subfolder2_name}' archives.")
            file_guardian_dec_passwr5_1.setTextEchoMode(QLineEdit.Password)
   
            file_guardian_dec_passwr5_1.setFixedSize(400, 240)

            file_guardian_dec_passwr5_1.setStyleSheet(
                    """
                    
                    QLabel{
                        font-size:20px;
               
                        font-family:Arial;
                    }
                    QLineEdit{
                        font-size:20px;
                        font-family:Arial;
                    }
                    QPushButton{
                        font-size:20px;                         
                    }
                    """
                )
            file_guardian_dec_passwr5_1_out = file_guardian_dec_passwr5_1.exec_()
            file_guardian_dec_passwr5_1_txt = file_guardian_dec_passwr5_1.textValue()

            if file_guardian_dec_passwr5_1_out==True and file_guardian_dec_passwr5_1_txt != '':

                returned_hashed_file_guard_encrypt_pass, returned_hashed_file_guard_decrypt_pass, returned_hashed_folder_guard_encrypt_pass, returned_hashed_folder_guard_decrypt_pass = self.password_json_read(json_flpath7=passwords_json_file_path, k71="hashed_encrypt_passcode_file_guardian",k72="hashed_decrypt_passcode_file_guardian", k73="hashed_encrypt_passcode_folder_guardian",k74="hashed_decrypt_passcode_folder_guardian")

                if check_password_hash(returned_hashed_file_guard_decrypt_pass,file_guardian_dec_passwr5_1_txt)==True:

                    self.msg_autoClose(msg_text="Password correct.                    ",msg_title="Access granted:",close_tmr=2,msg_icon=QMessageBox.Information)
 
                    os.startfile(path5_1)

                    break

                else:
                    self.msg_autoClose(msg_text="Wrong 'File Guardian' decrytion password.                      ",msg_title="Access denied - Incorrect decryption password:        ",close_tmr=3,msg_icon=QMessageBox.Critical)
            
            elif file_guardian_dec_passwr5_1_out==True and file_guardian_dec_passwr5_1_txt == '':
                self.msg_autoClose(msg_text="Null values are not accepted.                        ",msg_title="Input Verifer - Error:",close_tmr=3,msg_icon=QMessageBox.Critical)
            elif file_guardian_dec_passwr5_1_out==False and file_guardian_dec_passwr5_1_txt == '':
                break
            else:
                break
    
    def user_only_access_ps_decfolders(self,path5_2):
        while True:
       
            folder_guardian_dec_passwr5_2 = QInputDialog(self)
            folder_guardian_dec_passwr5_2.setWindowTitle("'Folder Guardian' decryption passcode entry:")
            folder_guardian_dec_passwr5_2.setLabelText(f"Please type the 'Folder Guardian' decryption password to open '{decfolders_subfolder2_name}' folder.")
            folder_guardian_dec_passwr5_2.setTextEchoMode(QLineEdit.Password)
   
            folder_guardian_dec_passwr5_2.setFixedSize(400, 240)

            folder_guardian_dec_passwr5_2.setStyleSheet(
                    """
                    
                    QLabel{
                        font-size:20px;
               
                        font-family:Arial;
                    }
                    QLineEdit{
                        font-size:20px;
                        font-family:Arial;
                    }
                    QPushButton{
                        font-size:20px;                         
                    }
                    """
                )
            folder_guardian_dec_passwr5_2_out = folder_guardian_dec_passwr5_2.exec_()
            folder_guardian_dec_passwr5_2_txt = folder_guardian_dec_passwr5_2.textValue()

            if folder_guardian_dec_passwr5_2_out==True and folder_guardian_dec_passwr5_2 != '':

                returned_hashed_file_guard_encrypt_pass, returned_hashed_file_guard_decrypt_pass, returned_hashed_folder_guard_encrypt_pass, returned_hashed_folder_guard_decrypt_pass = self.password_json_read(json_flpath7=passwords_json_file_path, k71="hashed_encrypt_passcode_file_guardian",k72="hashed_decrypt_passcode_file_guardian", k73="hashed_encrypt_passcode_folder_guardian",k74="hashed_decrypt_passcode_folder_guardian")

                if check_password_hash(returned_hashed_folder_guard_decrypt_pass,folder_guardian_dec_passwr5_2_txt)==True:

                    self.msg_autoClose(msg_text="Password correct.                    ",msg_title="Access granted:",close_tmr=2,msg_icon=QMessageBox.Information)
 
                    os.startfile(path5_2)

                    break

                else:
                    self.msg_autoClose(msg_text="Wrong 'Folder Guardian' decrytion password.                      ",msg_title="Access denied - Incorrect decryption password:        ",close_tmr=3,msg_icon=QMessageBox.Critical)
            
            elif folder_guardian_dec_passwr5_2_out==True and folder_guardian_dec_passwr5_2_txt == '':
                self.msg_autoClose(msg_text="Null values are not accepted.                        ",msg_title="Input Verifer - Error:",close_tmr=3,msg_icon=QMessageBox.Critical)
            elif folder_guardian_dec_passwr5_2_out==False and folder_guardian_dec_passwr5_2_txt == '':
                break
            else:
                break

if __name__ == "__main__":

    StyleSheet = '''
        
        QTabWidget::pane {
            border: 1px solid black;
            padding: 2px;   
            margin:  1px;
            background-color : rgb(33, 192, 162);
        }
        QTabBar {
            border: 0px solid black;
            color: black;
            font-size: 18pt; 
        }
        QTabBar::tab:top:selected {
            color: white;
            background-color:blue;
        }
        '''
    # font.setFamily("Arial")
    # font.setPointSize(17)
    
    # database folder maker
    DirMake(path_val=database_folder_path)

    # settings folder maker
    DirMake(path_val=settings_folder_path)

    # backups folder maker
    DirMake(path_val=backups_folder_path)

    # password json file maker
    password_json_make(json_path_val=passwords_json_file_path,hashed_enc_file_guard_pass11=default_hashed_file_guard_encrypt_passwrd,hashed_dec_file_guard_pass12=default_hashed_file_guard_decrypt_passwrd,hashed_enc_folder_guard_pass21=default_hashed_folder_guard_encrypt_passwrd,hashed_dec_folder_guard_pass22=default_hashed_folder_guard_decrypt_passwrd)
    
    app = QtWidgets.QApplication(sys.argv)
    app.setStyleSheet(StyleSheet)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
