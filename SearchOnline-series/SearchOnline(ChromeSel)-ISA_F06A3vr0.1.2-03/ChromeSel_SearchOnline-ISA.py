# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Chrome_SearchOnline-ISA.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QWidget , QInputDialog , QLineEdit ,  QListWidget , QComboBox
import os
import sys
import datetime
import time 
import winshell
from win32com.client import Dispatch 
from PySide2.QtCore import QTimer
from PySide2.QtWidgets import QApplication , QMessageBox
import wikipedia
import json
import webbrowser
import psutil
from selenium import webdriver
'''Source files'''
cfile_path = os.path.realpath(__file__)
# cdir = os.path.dirname(cfile_path)# curent working directory or the 'Now'-location of the file.

cdir = os.getcwd()

# Time
dt_clockH = datetime.datetime.now().strftime("%I")

dt_clockM = datetime.datetime.now().strftime("%M")

dt_clockS = datetime.datetime.now().strftime("%S")

dt_clockMS = datetime.datetime.now().strftime("%f")

epoch_miliseconds = int(time.time() * 1000)

dt_TMR = f"{dt_clockH}:{dt_clockM}:{dt_clockS}"

dt_time= f"{dt_clockH}:{dt_clockM}"

dt_DN = datetime.datetime.now().strftime('%p').lower()

# Date
dt_dd = datetime.datetime.now().strftime("%d")

dt_mm = datetime.datetime.now().strftime("%m")

dt_yyyy = datetime.datetime.now().strftime("%Y")

dt_wdys = datetime.datetime.now().strftime("%A").lower()

dt_mnths = datetime.datetime.now().strftime("%B")

dt_mnths_no = datetime.datetime.now().strftime("%m")

dt_date = f"{dt_dd}-{dt_mm}-{dt_yyyy}"

dt_mnthsno_mnths = f"{dt_mnths_no}-{dt_mnths}"

# Driver path json files
driver_path_jsonfl_name = "chromedriver_paths"

driver_path_json = "{}.json".format(driver_path_jsonfl_name)

driver_path_jsonfl=os.path.join(cdir,driver_path_json)

app_title = "Search Online (ver.Chrome Selinium) [Improved.Simplified.Alternative]"

# Logs folder details
log_dirname = "Logs"
logs_folder_path = os.path.join(cdir,log_dirname)

# Log file details
logfl_name = f"Log_{dt_date}"
log_fl = f"{logfl_name}.log"

logfl_path = os.path.join(logs_folder_path,log_fl)
class Ui_MainWindow(QWidget):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(943, 785)

        # Set APP BG
        self.palette = QtGui.QPalette()
        self.brush = QtGui.QBrush(QtGui.QColor(33, 192, 162))
        self.brush.setStyle(QtCore.Qt.SolidPattern)
        self.palette.setBrush(QtGui.QPalette.Window, self.brush)
        MainWindow.setPalette(self.palette)

        # Set app icon
        returned_icofl_path = self.icon_fls()
        MainWindow.setWindowIcon(QtGui.QIcon(returned_icofl_path))  

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.Mian_frame = QtWidgets.QFrame(self.centralwidget)
        self.Mian_frame.setGeometry(QtCore.QRect(20, 20, 911, 721))
        self.Mian_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.Mian_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Mian_frame.setObjectName("Mian_frame")

        self.srch_in_label = QtWidgets.QLabel(self.Mian_frame)
        self.srch_in_label.setGeometry(QtCore.QRect(20, 75, 141, 71))

        font = QtGui.QFont()
        font.setPointSize(31)
        self.srch_in_label.setFont(font)
        self.srch_in_label.setAlignment(QtCore.Qt.AlignCenter)
        self.srch_in_label.setObjectName("srch_in_label")

        self.srch_inbox = QtWidgets.QLineEdit(self.Mian_frame)
        self.srch_inbox.setGeometry(QtCore.QRect(170, 70, 721, 81))
        font = QtGui.QFont()
        font.setPointSize(36)
        self.srch_inbox.setFont(font)
        self.srch_inbox.setObjectName("srch_inbox")

        self.srch_Button = QtWidgets.QPushButton(self.Mian_frame)
        self.srch_Button.setGeometry(QtCore.QRect(40, 290, 251, 101))
        font = QtGui.QFont()
        font.setPointSize(28)
        self.srch_Button.setFont(font)
        self.srch_Button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.srch_Button.setObjectName("srch_Button")

        self.srch_Button2_incognito = QtWidgets.QPushButton(self.Mian_frame)
        self.srch_Button2_incognito.setGeometry(QtCore.QRect(310, 420, 281, 121))
        font = QtGui.QFont()
        font.setPointSize(24)
        self.srch_Button2_incognito.setFont(font)
        self.srch_Button2_incognito.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.srch_Button2_incognito.setObjectName("srch_Button2_incognito")

        self.reset_Button3 = QtWidgets.QPushButton(self.Mian_frame)
        self.reset_Button3.setGeometry(QtCore.QRect(610, 290, 251, 101))
        font = QtGui.QFont()
        font.setPointSize(28)
        self.reset_Button3.setFont(font)
        self.reset_Button3.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.reset_Button3.setObjectName("reset_Button3")

        self.exit_Button4 = QtWidgets.QPushButton(self.Mian_frame)
        self.exit_Button4.setGeometry(QtCore.QRect(40, 570, 251, 101))
        font = QtGui.QFont()
        font.setPointSize(28)
        self.exit_Button4.setFont(font)
        self.exit_Button4.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.exit_Button4.setObjectName("exit_Button4")

        self.chng_driver_path_Button5 = QtWidgets.QPushButton(self.Mian_frame)
        self.chng_driver_path_Button5.setGeometry(QtCore.QRect(610, 570, 261, 101))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.chng_driver_path_Button5.setFont(font)
        self.chng_driver_path_Button5.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.chng_driver_path_Button5.setObjectName("chng_driver_path_Button5")

        self.comboBox = QtWidgets.QComboBox(self.Mian_frame)
        self.comboBox.setGeometry(QtCore.QRect(330, 180, 241, 71))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.comboBox.setFont(font)
        self.comboBox.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.comboBox.setSizeAdjustPolicy(QtWidgets.QComboBox.AdjustToContentsOnFirstShow)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")

        self.select_label_2 = QtWidgets.QLabel(self.Mian_frame)
        self.select_label_2.setGeometry(QtCore.QRect(210, 180, 111, 61))
        font = QtGui.QFont()
        font.setPointSize(28)
        self.select_label_2.setFont(font)
        self.select_label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.select_label_2.setObjectName("select_label_2")

        MainWindow.setCentralWidget(self.centralwidget)
 
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 943, 23))
        self.menubar.setObjectName("menubar")
        self.menuOptions = QtWidgets.QMenu(self.menubar)
        self.menuOptions.setObjectName("menuOptions")
        self.menuSettings = QtWidgets.QMenu(self.menuOptions)
        self.menuSettings.setObjectName("menuSettings")
        self.menuOpen_folders = QtWidgets.QMenu(self.menuOptions)
        self.menuOpen_folders.setObjectName("menuOpen_folders")
        MainWindow.setMenuBar(self.menubar)

        font = QtGui.QFont()
        font.setPointSize(24)
        font.setBold(True)
        font.setFamily("Arial")
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setFont(font)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.actionChange_borwser_path = QtWidgets.QAction(MainWindow)
        self.actionChange_borwser_path.setObjectName("actionChange_borwser_path")
        self.actionOpen_log_folders = QtWidgets.QAction(MainWindow)
        self.actionOpen_log_folders.setObjectName("actionOpen_log_folders")
        self.actionOpen_log_file = QtWidgets.QAction(MainWindow)
        self.actionOpen_log_file.setObjectName("actionOpen_log_file")
        self.menuSettings.addAction(self.actionChange_borwser_path)
        self.menuOpen_folders.addAction(self.actionOpen_log_folders)
        self.menuOptions.addAction(self.menuSettings.menuAction())
        self.menuOptions.addSeparator()
        self.menuOptions.addAction(self.menuOpen_folders.menuAction())
        self.menuOptions.addSeparator()
        self.menuOptions.addAction(self.actionOpen_log_file)
        self.menubar.addAction(self.menuOptions.menuAction())
        self.menubar.addAction(self.menuOptions.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", app_title))

        self.srch_in_label.setText(_translate("MainWindow", "Input:"))
        
        self.srch_Button.setStatusTip(_translate("MainWindow", "Click here to search in chrome browser."))
        self.srch_Button.setText(_translate("MainWindow", "Search"))
        
        self.srch_Button2_incognito.setText(_translate("MainWindow", "Search (incognito)"))
        self.srch_Button2_incognito.setStatusTip(_translate("MainWindow", "Click here to search in chrome incognito browser."))
        
        self.reset_Button3.setText(_translate("MainWindow", "Reset"))
        self.reset_Button3.setStatusTip(_translate("MainWindow", "Click here to reset to default. (Ctrl+Z)"))
        self.reset_Button3.setShortcut(_translate("MainWindow", "Ctrl+Z"))
                
        self.exit_Button4.setText(_translate("MainWindow", "Exit"))
        self.exit_Button4.setShortcut(_translate("MainWindow", "Esc"))
        self.exit_Button4.setStatusTip(_translate("MainWindow", "Click here to exit. (Press Esc)"))
        
        self.chng_driver_path_Button5.setStatusTip(_translate("MainWindow", "Click here to change chrome driver path. (Ctrl+P)"))
        self.chng_driver_path_Button5.setText(_translate("MainWindow", "Change chrome driver path"))
        # self.chng_driver_path_Button5.setShortcut(_translate("MainWindow", "Ctrl+P"))

        self.select_label_2.setText(_translate("MainWindow", "Select:"))
        self.comboBox.setItemText(0, _translate("MainWindow", "Google"))
        self.comboBox.setItemText(1, _translate("MainWindow", "Google images"))
        self.comboBox.setItemText(2, _translate("MainWindow", "YouTube videos"))
        self.comboBox.setItemText(3, _translate("MainWindow", "YouTube channels"))
        self.comboBox.setItemText(4, _translate("MainWindow", "Wikipedia"))
        self.comboBox.setItemText(5, _translate("MainWindow", "Amazon products"))
        self.comboBox.setItemText(6, _translate("MainWindow", "Flipkart products"))
        self.comboBox.setItemText(7, _translate("MainWindow", "Myntra products"))
        self.comboBox.setItemText(8, _translate("MainWindow", "Ajio products"))
        
        self.menuOptions.setTitle(_translate("MainWindow", "Options"))
        self.menuSettings.setTitle(_translate("MainWindow", "Settings"))
        self.menuOpen_folders.setTitle(_translate("MainWindow", "Open folders"))
        self.actionChange_borwser_path.setText(_translate("MainWindow", "Change borwser path"))
        self.actionChange_borwser_path.setShortcut(_translate("MainWindow", "Ctrl+P"))
        self.actionOpen_log_folders.setText(_translate("MainWindow", "Open log folders"))
        self.actionOpen_log_file.setText(_translate("MainWindow", "Open log file"))
        self.actionOpen_log_file.setShortcut(_translate("MainWindow", "Ctrl+L"))


        # GUI Option connect event
        self.actionChange_borwser_path.triggered.connect(self.modify_driverpath)

        self.actionOpen_log_file.triggered.connect(self.open_logsfl)

        self.actionOpen_log_folders.triggered.connect(self.open_logsfolder)

        # GUI Button connect event
        # -> Searh button
        self.srch_Button.clicked.connect(self.srch_online)

        # -> Searh button (incognito)
        self.srch_Button2_incognito.clicked.connect(self.srch_online_incognito)

        # -> Exit button
        self.exit_Button4.clicked.connect(self.exit)

        # -> Reset button
        self.reset_Button3.clicked.connect(self.reset)

        # -> Change Driver path
        self.chng_driver_path_Button5.clicked.connect(self.modify_driverpath)


        # GUI button colors 
        # -> Download video button
        self.srch_Button.setStyleSheet("background-color : green; color: white")
        
        # -> Download audio button
        self.srch_Button2_incognito.setStyleSheet("background-color : yellow; color: black")
        
        # -> Exit button
        self.exit_Button4.setStyleSheet("background-color : red; color: white")

        # -> Reset button
        self.reset_Button3.setStyleSheet("background-color : blue; color: white")

        # -> Change driver path button
        self.chng_driver_path_Button5.setStyleSheet("background-color : purple; color: white")

        # GUI label colors 
        # -> url label
        self.srch_in_label.setStyleSheet("background-color : brown; color: white")

        # GUI input box colors 
        # -> url input box
        self.srch_inbox.setStyleSheet("color: brown")

    def icon_fls(self):
        for file in os.listdir(cdir):
    
            # print(file)
            
            if '.ico' in file:
                try:
                    icon_flpath =os.path.join(cdir,file)
                    return icon_flpath
                except OSError:
                    pass
            else:
                pass

    def read_json(self,jsonfl_path1,k1):
        with open(jsonfl_path1,'r') as pathjson_fl_r:
            data = pathjson_fl_r.read()

            infos_v = json.loads(data)[k1]

        return infos_v

    def save_json(self,json_flpath1,keys1,val1):

        infos = {
            keys1: str(val1)

                            }
        with open(json_flpath1,'w') as json_fl_w:
            json.dump(infos,json_fl_w)  

    def update_json(self,json_flpath3,keys3,info3,msg_txt3,msg_title3):

        with open(json_flpath3,'r') as json_data_r:
            json_src_data = json.load(json_data_r)

            json_src_data[keys3] = info3

            with open(json_flpath3,'w') as json_fl_w:
                json.dump(json_src_data,json_fl_w)

        self.msg_autoClose(msg_text=msg_txt3,msg_title=msg_title3,close_tmr=3,msg_icon=QMessageBox.Information)
    
    def save_driver_path(self):

        if os.path.exists(driver_path_jsonfl)==False:

            while True:

                fl_dialog_title = "Please choose chrome executable driver (chromedriver.exe):"

                wild_cards = "Application exe (*exe)"
            
                file_1 , check_1 = QFileDialog.getOpenFileName(self, fl_dialog_title,"", wild_cards)
                if check_1:
                    file_1_re = file_1.replace("/","\\")
                    
                    if os.path.exists(file_1_re)==True :
                        if 'chromedriver' in file_1_re:
                            self.save_json(json_flpath1=driver_path_jsonfl,keys1="driver_path",val1=file_1_re)
                            self.msg_autoClose(msg_text="Driver Path saved.               ",msg_title="Driver Path save - Complete",close_tmr=3,msg_icon=QMessageBox.Information)
                            break
                        else:
                            err = f"DriverInvalid:- App can only accept chrome driver."
                            self.apps_log_sys(logerr_msg=err,err_msgtitle="Browser driver application type error:",err_msgtxt="Opps! Sorry app accepts only chrome driver.")
                    else:
                        err = f"ChromeDriverNotFoundError:- Chrome Driver not found '{driver_path_jsonfl}' ."
                        self.apps_log_sys(logerr_msg=err,err_msgtitle="Browser Driver Availability error:",err_msgtxt="Opps! Sorry coundn't save the requested driver path since it is not found in the system")
                else:
                    break
        else:
            pass
    
    def get_json_paths(self):

        returned_path = self.read_json(jsonfl_path1=driver_path_jsonfl,k1="driver_path")

        return returned_path

    def modify_driverpath(self):
        while True:

            fl_dialog_title = "Please choose chrome executable driver (chromedriver.exe) to be changed:"

            wild_cards = "Application file (*.exe);"
        
            file_2 , check_2 = QFileDialog.getOpenFileName(self, fl_dialog_title,"", wild_cards)

            if check_2:
                file_2_re = file_2.replace("/","\\")
                
                if os.path.exists(file_2_re)==True :
                    if 'chromedriver' in file_2_re:
                        if os.path.exists(driver_path_jsonfl)==True:
                            self.update_json(json_flpath3=driver_path_jsonfl,keys3="driver_path",info3=file_2_re,msg_title3="Chrome Driver Path update - Complete:",msg_txt3="Chrome Driver Path changed successfully.      ")
                            break
                        else:
                            self.save_driver_path()
                            break
                    else:
                        err = f"DriverInvalid:- App can only accept chrome driver."
                        self.apps_log_sys(logerr_msg=err,err_msgtitle="Browser driver application type error:",err_msgtxt="Opps! Sorry app accepts only chrome driver only")
                else:
                    err = f"FileNotFoundError:- File not found '{driver_path_jsonfl}' ."
                    self.apps_log_sys(logerr_msg=err,err_msgtitle="Browser Driver Availability error:",err_msgtxt="Opps! Sorry coundn't save the requested driver path since it is not found in the system")
            else:
                break

    def open_logsfolder(self):
 
        log_dirname = "Logs"
        logs_folder_path = os.path.join(cdir,log_dirname)

        try:
            os.makedirs(logs_folder_path)
        except OSError:
            pass

        os.startfile(logs_folder_path)

    def open_logsfl(self):
 
        try:
            os.makedirs(logs_folder_path)
        except OSError:
            pass

        logfl_path = os.path.join(logs_folder_path,log_fl)

        if os.path.exists(logfl_path)==False:
            with open(logfl_path,"w") as logfl_w6:
                logfl_w6.writable()
        else:
            pass

        os.startfile(logfl_path)

    def apps_log_sys(self,logerr_msg,err_msgtitle,err_msgtxt):

        try:
            os.makedirs(logs_folder_path)
        except OSError:
            pass
        # logs_folder_path = os.path.join(logdirs6_path,log_dirname6)

        if "session not created: This version of ChromeDriver" in err_msgtxt:
            chromedriver_web = "https://chromedriver.chromium.org/downloads"
            log_err = f"\n<{dt_date}\{dt_time}> , Error: {str(logerr_msg)}\n Note: Can download chrome drivers from the url: {chromedriver_web} \n<________________________________________>\n"
            self.msg_autoClose(msg_text="Chrome driver not supportive\compatible with current chrome version.",msg_title="Chrome Driver not supportive\compatible",close_tmr=4,msg_icon=QMessageBox.Critical)
 
            with open(logfl_path,"a+", encoding="utf-8") as logfl_w6:
                logfl_w6.writelines(log_err)

            self.msg_autoClose(msg_text="Openning up chrome driver website",msg_title="Heads-up - Accessing Chrome driver website",close_tmr=3,msg_icon=QMessageBox.Information)

            os.startfile(chromedriver_web)
        else:
            log_err = f"\n<{dt_date}\{dt_time}> , Error: {str(logerr_msg)}\n<________________________________________>\n"
            self.msg_autoClose(msg_text=f"Error cause: \n{str(err_msgtxt)}.",msg_title=err_msgtitle,close_tmr=4,msg_icon=QMessageBox.Critical)

            with open(logfl_path,"a", encoding="utf-8") as logfl_w6:
                logfl_w6.writelines(log_err)

    def reset(self):
        self.srch_inbox.clear()
        self.comboBox.setCurrentText("Google")

    def msg_autoClose(self,msg_title,msg_text,close_tmr,msg_icon):

        qm = QMessageBox()
        qm.setIcon(msg_icon)
        qm.setWindowTitle(msg_title)
        qm.setText(msg_text+"                                                  ")
        qm.setStandardButtons(QMessageBox.Ok)
        QTimer.singleShot(close_tmr*1000,lambda : qm.done(0))
        qm.setFixedWidth(800+len(msg_text))
        qm.setFixedHeight(1755+len(msg_text))
        qm.exec_()

    def msg(self,msg_title,msg_text):
        qm = QMessageBox()
        qm.setIcon(QMessageBox.Information)
        qm.setWindowTitle(msg_title)
        qm.setText(msg_text+"                                                  ")
        qm.setStandardButtons(QMessageBox.Ok)
        qm.setFixedWidth(800+len(msg_text))
        qm.setFixedHeight(1755+len(msg_text))
        qm.exec_()
        
    def yn_msgbox(self,txt5,title5,msg_icon):

        # returned_icofl_path = self.icon_fls()

        # print(returned_icofl_path)

        yn_msg = QMessageBox()

        yn_msg.setIcon(msg_icon)

        yn_msg.setIcon(QMessageBox.Warning)

        yn_msg.setText(txt5)
      
        yn_msg.setWindowTitle(title5)
              
        yn_msg.setStandardButtons(QMessageBox.Yes | QMessageBox.No)

        msg_button_out = yn_msg.exec()

        return msg_button_out

    def exit(self):
 
        returned_msg_outs = self.yn_msgbox(txt5="Are you sure you want to exit the app?",title5="Exit -Yes/No:",msg_icon=QMessageBox.Warning)

        if returned_msg_outs == QMessageBox.No:
            pass
        elif returned_msg_outs == QMessageBox.Yes:
            # app = QtWidgets.QApplication(sys.argv)
            # sys.exit(app.exec_())
            sys.exit()
        else:
            pass

    def srch_online(self):

        try:

            self.save_driver_path()

            if os.path.exists(driver_path_jsonfl)==True:
                returned_driver_path = self.get_json_paths()

                req = self.srch_inbox.text() 

                mode = self.comboBox.currentText()

                if req == "":
                    self.msg_autoClose(msg_text="Empty values are accepted.",msg_title="Input invalid:",close_tmr=3,msg_icon=QMessageBox.Critical)
                else:
                    
                    self.browser_srch(driver=returned_driver_path,m=mode,q=req)

                    returned_msg_outs = self.yn_msgbox(txt5="Do you wish to browse another request?",title5="Search another - Yes/No?",msg_icon=QMessageBox.Question)

                    if returned_msg_outs == QMessageBox.No:
                        pass
                    elif returned_msg_outs == QMessageBox.Yes:
                        self.srch_inbox.clear()
                        self.comboBox.setCurrentText("Google")

                        self.msg_autoClose(msg_text="All values reseted.",msg_title="Notify - Reset Done",close_tmr=3,msg_icon=QMessageBox.Information)                    
                    else:
                        pass
            else:
                pass

        except Exception as generic_err:
            self.srch_inbox.clear()
            self.comboBox.setCurrentText("Google")
            self.apps_log_sys(logerr_msg=str(generic_err),err_msgtitle="Generic error:",err_msgtxt=str(generic_err))
 
    def srch_online_incognito(self):

        try:

            self.save_driver_path()

            if os.path.exists(driver_path_jsonfl)==True:
                returned_driver_path = self.get_json_paths()

                req = self.srch_inbox.text().replace(" ","+") 

                mode = self.comboBox.currentText()

                if req == "":
                    self.msg_autoClose(msg_text="Empty values are accepted.",msg_title="Input invalid:",close_tmr=3,msg_icon=QMessageBox.Critical)
                else:                 
                        
                    self.incognito_browser_srch(driver=returned_driver_path,m=mode,q=req)

                    returned_msg_outs = self.yn_msgbox(txt5="Do you wish to browse another request?",title5="Search another - Yes/No?",msg_icon=QMessageBox.Question)

                    if returned_msg_outs == QMessageBox.No:
                        pass
                    elif returned_msg_outs == QMessageBox.Yes:
                        self.srch_inbox.clear()
                        self.comboBox.setCurrentText("Google")

                        self.msg_autoClose(msg_text="All values reseted.",msg_title="Notify - Reset Done",close_tmr=3,msg_icon=QMessageBox.Information)                    
                    else:
                        pass
            else:
                pass
        except Exception as generic_err:
            self.srch_inbox.clear()
            self.comboBox.setCurrentText("Google")
            self.apps_log_sys(logerr_msg=str(generic_err),err_msgtitle="Generic error:",err_msgtxt=str(generic_err))

    def browser_srch(self,driver,m,q):
        if "Google images" in m:

            g_Img = f'https://www.google.com/search?q={q}&hl=en&source=lnms&tbm=isch&sa=X&ved=2ahUKEwi6v8SR0KPpAhUh63MBHXQPBwsQ_AUoBHoECBgQBg'

            self.chrome_sel_open_url(url=g_Img,driver_exe_path=driver)

        elif "Google" in m:
                                
            g_srch = f"https://www.google.com/search?q={q}"

            self.chrome_sel_open_url(url=g_srch,driver_exe_path=driver)
                                
        elif "YouTube videos" in m:

            v_yt = f'https://www.youtube.com/results?search_query={q}'

            self.chrome_sel_open_url(url=v_yt,driver_exe_path=driver)

        elif "YouTube channels" in m:
        
            YouTube_ch = f'https://www.youtube.com/{q}'
        
            self.chrome_sel_open_url(url=YouTube_ch,driver_exe_path=driver)
            
        elif "Amazon" in m:

            amazon_link = f'https://www.amazon.in/s?k={q}&crid=2S55AVQK41W&sprefix=p%2Caps%2C351&ref=nb_sb_ss_ts-doa-p_4_1'

            self.chrome_sel_open_url(url=amazon_link,driver_exe_path=driver)

        elif "Ajio" in m:

            ajio_links = f'https://www.ajio.com/search/?text={q}'

            self.chrome_sel_open_url(url=ajio_links,driver_exe_path=driver)

        elif "Myntra" in m:

            myntra_links = f'https://www.myntra.com/{q}'

            self.chrome_sel_open_url(url=myntra_links,driver_path=driver)

        elif "Flipkart" in m:

            flipkart_links = f'https://www.flipkart.com/search?q={q}'

            self.chrome_sel_open_url(url=flipkart_links,driver_exe_path=driver)

        elif "Wikipedia" in  m :                          

            wiki_results = wikipedia.summary(q, sentences= 3)

            self.msg(msg_text=wiki_results,msg_title="Wiki results:")

        else:
            pass

    def incognito_browser_srch(self,driver,m,q):
        if "Google images" in m:

            g_Img = f'https://www.google.com/search?q={q}&hl=en&source=lnms&tbm=isch&sa=X&ved=2ahUKEwi6v8SR0KPpAhUh63MBHXQPBwsQ_AUoBHoECBgQBg'

            self.incognito_chrome_sel_open_url(url=g_Img,driver_exe_path=driver)

        elif "Google" in m:
                                
            g_srch = f"https://www.google.com/search?q={q}"

            self.incognito_chrome_sel_open_url(url=g_srch,driver_exe_path=driver)
                                
        elif "YouTube videos" in m:

            v_yt = f'https://www.youtube.com/results?search_query={q}'

            self.incognito_chrome_sel_open_url(url=v_yt,driver_exe_path=driver)

        elif "YouTube channels" in m:
        
            YouTube_ch = f'https://www.youtube.com/{q}'
        
            self.incognito_chrome_sel_open_url(url=YouTube_ch,driver_exe_path=driver)
            
        elif "Amazon" in m:

            amazon_link = f'https://www.amazon.in/s?k={q}&crid=2S55AVQK41W&sprefix=p%2Caps%2C351&ref=nb_sb_ss_ts-doa-p_4_1'

            self.incognito_chrome_sel_open_url(url=amazon_link,driver_exe_path=driver)

        elif "Ajio" in m:

            ajio_links = f'https://www.ajio.com/search/?text={q}'

            self.incognito_chrome_sel_open_url(url=ajio_links,driver_exe_path=driver)

        elif "Myntra" in m:

            myntra_links = f'https://www.myntra.com/{q}'

            self.incognito_chrome_sel_open_url(url=myntra_links,driver_path=driver)

        elif "Flipkart" in m:

            flipkart_links = f'https://www.flipkart.com/search?q={q}'

            self.incognito_chrome_sel_open_url(url=flipkart_links,driver_exe_path=driver)

        elif "Wikipedia" in  m:                   

            wiki_results = wikipedia.summary(q, sentences= 3)

            self.msg(msg_text=wiki_results,msg_title="Wiki results:")

        else:
            pass

    def chrome_sel_open_url(self,url,driver_exe_path):
        
        chrome_options = webdriver.ChromeOptions()
        # chrome_options.add_argument("--incognito")
        chrome_options.add_experimental_option("detach", True)
        
        driver = webdriver.Chrome(executable_path=driver_exe_path,options=chrome_options)

        driver.maximize_window()

        driver.implicitly_wait(0.5)

        driver.get(url)

        # driver.quit()
 
    def incognito_chrome_sel_open_url(self,url,driver_exe_path):
        
        chrome_options = webdriver.ChromeOptions()
        chrome_options.add_argument("--incognito")
        chrome_options.add_experimental_option("detach", True)
    
        driver = webdriver.Chrome(executable_path=driver_exe_path,options=chrome_options)

        driver.maximize_window()

        driver.implicitly_wait(0.5)

        driver.get(url)

        # driver.quit()

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
