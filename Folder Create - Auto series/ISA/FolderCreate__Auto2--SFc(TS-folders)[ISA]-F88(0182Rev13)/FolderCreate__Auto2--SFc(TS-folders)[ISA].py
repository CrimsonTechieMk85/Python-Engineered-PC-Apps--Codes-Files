# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'FolderCreate__Auto2(TS-folders)[ISA].ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QWidget , QInputDialog , QLineEdit ,  QListWidget
from PySide2.QtCore import QTimer
from PySide2.QtWidgets import QApplication , QMessageBox
import os
import json
import datetime
import sys
import random
import string

# Get current file path
cfile_path = os.path.realpath(__file__)

# Curent working directory or the 'Now'-location of the file.
# cdir = os.path.dirname(cfile_path)

cdir = os.getcwd()

# Time
dt_clockH = datetime.datetime.now().strftime("%I")

dt_clockM = datetime.datetime.now().strftime("%M")

dt_clockS = datetime.datetime.now().strftime("%S")

dt_clockMS = datetime.datetime.now().strftime("%f")

dt_TMR = f"{dt_clockH}:{dt_clockM}:{dt_clockS}"

dt_time= f"{dt_clockH}:{dt_clockM}"


# Date
dt_dd = datetime.datetime.now().strftime("%d")

dt_mm = datetime.datetime.now().strftime("%m")

dt_yyyy = datetime.datetime.now().strftime("%Y")

dt_wdys = datetime.datetime.now().strftime("%A").lower()

dt_mnths = datetime.datetime.now().strftime("%B")

dt_mnths_upper = datetime.datetime.now().strftime("%B").upper()

dt_mnths_shortname = datetime.datetime.now().strftime("%b")

dt_mnths_shortname_upper = datetime.datetime.now().strftime("%b").upper()

dt_mnths_no = datetime.datetime.now().strftime("%m")

dt_date = f"{dt_dd}-{dt_mm}-{dt_yyyy}"

dt_mnthsno_mnths = f"{dt_mnths_no}-{dt_mnths}"

dt_dayno_mnths = f"{dt_dd}-{dt_mnths}"

dt_dayno_mnths_upper = f"{dt_dd}-{dt_mnths_upper}"

dt_dayno_mnths_shortname = f"{dt_dd}-{dt_mnths_shortname}"

dt_dayno_mnths_shortname_upper = f"{dt_dd} {dt_mnths_shortname_upper}"

# Log folder details
log_dirname = "Logs"
logs_folder_path = os.path.join(cdir,log_dirname)

# Log file details
logfl_name = f"Log_{dt_date}"
log_fl = f"{logfl_name}.log"
logfl_path = os.path.join(logs_folder_path,log_fl)

# App formats Json files details
l2 = []

# Random strings
# count = 9
# rand_str = ''.join(random.choices(string.ascii_letters, k=count))

paths_json_flkey = "path_collections"

paths_json_name = f'paths_lists-SFc'

paths_json_file = f'{paths_json_name}.json'

paths_datas_json_file_path = os.path.join(cdir, paths_json_file)

# App title
app_title = "Folder Create: Auto-2\Sudha Fashion custom (Timestamp folders) [Improved.Simplified.Alternative]"

class Ui_MainWindow(QWidget):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(805, 324)

        # Set APP BG 
        self.palette = QtGui.QPalette()
        self.brush = QtGui.QBrush(QtGui.QColor(33, 192, 162))
        self.brush.setStyle(QtCore.Qt.SolidPattern)
        self.palette.setBrush(QtGui.QPalette.Window, self.brush)
        MainWindow.setPalette(self.palette)

        # Set app icon
        returned_icofl_path = self.icon_fls()
        MainWindow.setWindowIcon(QtGui.QIcon(returned_icofl_path)) 

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        self.Mainframe = QtWidgets.QFrame(self.centralwidget)
        self.Mainframe.setGeometry(QtCore.QRect(20, 10, 761, 281))
        self.Mainframe.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.Mainframe.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Mainframe.setObjectName("Mainframe")
        
        self.create_button = QtWidgets.QPushButton(self.Mainframe)
        self.create_button.setGeometry(QtCore.QRect(30, 70, 311, 121))
        font = QtGui.QFont()
        font.setPointSize(36)
        self.create_button.setFont(font)
        self.create_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.create_button.setObjectName("create_button")
        
        self.exit_button = QtWidgets.QPushButton(self.Mainframe)
        self.exit_button.setGeometry(QtCore.QRect(420, 70, 311, 121))
        font = QtGui.QFont()
        font.setPointSize(36)
        self.exit_button.setFont(font)
        self.exit_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.exit_button.setObjectName("exit_button")
        
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 805, 23))
        self.menubar.setObjectName("menubar")
        
        self.menuOption = QtWidgets.QMenu(self.menubar)
        self.menuOption.setObjectName("menuOption")
        
        self.menuSettings = QtWidgets.QMenu(self.menuOption)
        self.menuSettings.setObjectName("menuSettings")
        
        self.menuModify_path_Collections = QtWidgets.QMenu(self.menuSettings)
        self.menuModify_path_Collections.setObjectName("menuModify_path_Collections")
        
        self.menuOpen_folders = QtWidgets.QMenu(self.menuOption)
        self.menuOpen_folders.setObjectName("menuOpen_folders")
        
        MainWindow.setMenuBar(self.menubar)
        
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        self.statusbar.setFont(font)
        self.statusbar.setObjectName("statusbar")
        
        MainWindow.setStatusBar(self.statusbar)
           
        self.actionUpdate_path = QtWidgets.QAction(MainWindow)
        self.actionUpdate_path.setObjectName("actionUpdate_path")
         
        self.actionOpen_log_folder = QtWidgets.QAction(MainWindow)
        self.actionOpen_log_folder.setObjectName("actionOpen_log_folder")
        
        self.actionOpen_Log_file = QtWidgets.QAction(MainWindow)
        self.actionOpen_Log_file.setObjectName("actionOpen_Log_file")
        
        self.menuModify_path_Collections.addAction(self.actionUpdate_path)
                 
        self.menuSettings.addAction(self.menuModify_path_Collections.menuAction())
        
        self.menuOpen_folders.addAction(self.actionOpen_log_folder)
        
        self.menuOption.addAction(self.menuSettings.menuAction())
        
        self.menuOption.addSeparator()
        
        self.menuOption.addAction(self.menuOpen_folders.menuAction())
        
        self.menuOption.addSeparator()
        
        self.menuOption.addAction(self.actionOpen_Log_file)
        
        self.menubar.addAction(self.menuOption.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", app_title))
        
        self.create_button.setText(_translate("MainWindow", "Create"))
        self.create_button.setStyleSheet("background-color : green; color: white")
        self.create_button.setStatusTip(_translate("MainWindow", "Click to create timestamps folders. (Press Enter)"))
        self.create_button.setShortcut(_translate("MainWindow", "Return"))
        self.create_button.clicked.connect(self.create_folder)

        self.exit_button.setText(_translate("MainWindow", "Exit"))
        self.exit_button.setStyleSheet("background-color : red; color: white")
        self.exit_button.setStatusTip(_translate("MainWindow", "Click to exit. (Press Esc)"))
        self.exit_button.setShortcut(_translate("MainWindow", "Esc"))
        self.exit_button.clicked.connect(self.exit)

        self.menuOption.setTitle(_translate("MainWindow", "Option"))
        self.menuSettings.setTitle(_translate("MainWindow", "Settings"))
        self.menuModify_path_Collections.setTitle(_translate("MainWindow", "Modify path Collections"))
        
        self.menuOpen_folders.setTitle(_translate("MainWindow", "Open folders"))
 
        self.actionUpdate_path.setText(_translate("MainWindow", "Update path"))
        self.actionUpdate_path.setShortcut(_translate("MainWindow", "Ctrl+Shift+U"))
        self.actionUpdate_path.triggered.connect(self.update_path_collection)

        self.actionOpen_log_folder.setText(_translate("MainWindow", "Open log folder"))
        self.actionOpen_log_folder.setShortcut(_translate("MainWindow", "Ctrl+Shift+L"))
        self.actionOpen_log_folder.triggered.connect(self.open_logfolder)

        self.actionOpen_Log_file.setText(_translate("MainWindow", "Open Log file"))
        self.actionOpen_Log_file.setShortcut(_translate("MainWindow", "Ctrl+L"))
        self.actionOpen_Log_file.triggered.connect(self.open_logfiles)

    def os_makedirs_lsts(self,paths1):

        for path1 in paths1:
            try:
                os.makedirs(path1)
            except OSError:
                pass

    def icon_fls(self):
        for file in os.listdir(cdir):
    
            # print(file)
            
            if '.ico' in file:
                try:
                    icon_flpath =os.path.join(cdir,file)
                    return icon_flpath
                except OSError:
                    pass
            else:
                pass

    def msg_autoClose(self,msg_title,msg_text,close_tmr,msg_icon):

        qm = QMessageBox()
        qm.setIcon(msg_icon)
        qm.setWindowTitle(msg_title+"           ")
        qm.setText(msg_text+"           ")
        qm.setStandardButtons(QMessageBox.Ok)
        QTimer.singleShot(close_tmr*1000,lambda : qm.done(0))
        qm.setFixedWidth(1800+len(msg_text))
        qm.setFixedHeight(1755+len(msg_text))
        qm.exec_()

    def apps_log_sys(self,logerr_msg,err_msgtitle,err_msgtxt):
        try:
            os.makedirs(logs_folder_path)
        except OSError:
            pass
        # logs_folder_path = os.path.join(logdirs6_path,log_dirname6)
        log_err = f"\n<{dt_date}\{dt_time}> , Error: {str(logerr_msg)}\n<________________________________________>\n"
        self.msg_autoClose(msg_text=f"Error cause: \n{str(err_msgtxt)} .                      ",msg_title=err_msgtitle,close_tmr=4,msg_icon=QMessageBox.Critical)
        
        with open(logfl_path,"a",encoding="utf-8") as logfl_w6:
            logfl_w6.writelines(log_err)

    def save_json(self,jsonfl_path1,k1,v1,msg_txt1,msg_title1):

        usr_datas = {

                k1: v1
            }

        with open(jsonfl_path1, "w") as jsonfl_save:
            
            json.dump(usr_datas, jsonfl_save)

        self.msg_autoClose(msg_text=msg_txt1,msg_title=msg_title1,close_tmr=3,msg_icon=QMessageBox.Information)

    def read_json(self,jsonfl_path2,k2):

        with open(jsonfl_path2,'r') as pathjson_fl_r:
            data = pathjson_fl_r.read()

            infos_v = json.loads(data)[k2]

            return infos_v

    def update_json(self,json_flpath3,keys3,info3,msg_txt3,msg_title3):

        with open(json_flpath3,'r') as json_data_r:
            json_src_data = json.load(json_data_r)
 
             
            if 'list' not in str(type(json_src_data[keys3])):

                json_src_data[keys3] = info3

                with open(json_flpath3,'w') as json_fl_w:
                    json.dump(json_src_data,json_fl_w)


                self.msg_autoClose(msg_text=msg_txt3,msg_title=msg_title3,close_tmr=3,msg_icon=QMessageBox.Information)

            else:
                
                lst_feteched_from_json = json_src_data[keys3] 

                if info3 not in lst_feteched_from_json:

                    lst_feteched_from_json.append(str(info3))

                    new_extention_lists = {
                                                keys3: lst_feteched_from_json
                                    }

                    with open(json_flpath3,'w') as json_fl_w:
                        json.dump(new_extention_lists, json_fl_w)

                    self.msg_autoClose(msg_text=msg_txt3,msg_title=msg_title3,close_tmr=3,msg_icon=QMessageBox.Information)
         
                else:
                    self.msg_autoClose(msg_text=f"'{info3}' directory\\path already been added to the lists.",msg_title="Notify - Extension already added",close_tmr=3,msg_icon=QMessageBox.Information)
    
    def yn_msgbox(self,txt5,title5,msg_icon):

        # returned_icofl_path = self.icon_fls()

        # print(returned_icofl_path)

        yn_msg = QMessageBox()

        yn_msg.setIcon(msg_icon)

        yn_msg.setIcon(QMessageBox.Warning)

        yn_msg.setText(txt5)
      
        yn_msg.setWindowTitle(title5)
              
        yn_msg.setStandardButtons(QMessageBox.Yes | QMessageBox.No)

        msg_button_out = yn_msg.exec()

        return msg_button_out

    def enter_path(self):
        dir_dialog_title = f"Please choose folder (or directory) to be added:" 
        dir_dlgbox = QFileDialog.getExistingDirectory(self, caption=dir_dialog_title)

        if dir_dlgbox:
            usr_rt_v1 = dir_dlgbox.replace("/","\\")
            self.update_json(json_flpath3=paths_datas_json_file_path,keys3=paths_json_flkey,info3=usr_rt_v1,msg_title3="Path data update - Complete:",msg_txt3=r"Directory\Path added successfully.      ")
        else:
            pass

    def save_paths_json(self):
        if os.path.exists(paths_datas_json_file_path) == False:
            self.save_json(jsonfl_path1=paths_datas_json_file_path,k1=paths_json_flkey,v1=l2,msg_title1="Path collector made - Success",msg_txt1="Path collection file made.")
        else:
            pass

    def create_folder(self):

        try:
            self.save_paths_json()
            returned_path_lists = self.read_json(jsonfl_path2=paths_datas_json_file_path,k2=paths_json_flkey)

            # print(len(returned_path_lists))

            if len(returned_path_lists) == 0 or returned_path_lists == ['']:
                self.msg_autoClose(msg_text="Path collection is empty... Please Update path",msg_title="Path datas - Empty",close_tmr=3,msg_icon=QMessageBox.Critical)

                # self.enter_path()

                # self.create_folder()
 
            else:

                for path in returned_path_lists:

                    # print('\n-> Path: '+path)

                    # Current years folder path
                    now_yrs_sub_folder_path = os.path.join(path, dt_yyyy)

                    # Current months number-month sub folder
                    # now_mnthsno_months = os.path.join(now_yrs_sub_folder_path, dt_mnthsno_mnths)

                    # Current date folder path
                    # now_date_sub_folder_path = os.path.join(now_mnthsno_months, dt_date)

                    # Current day number folder path
                    # now_day_no_sub_folder_path = os.path.join(now_yrs_sub_folder_path, dt_dd)

                    # Current day number-month name folder path
                    # current_day_no_mnths_sub_folder_path = os.path.join(now_yrs_sub_folder_path, dt_dayno_mnths)

                    # Current day number-month short name folder path
                    # current_day_no_mnths_shortname_sub_folder_path = os.path.join(now_yrs_sub_folder_path, dt_dayno_mnths_shortname)

                    # Current day number-month short name upper folder path
                    current_day_no_mnths_shortname_upper_sub_folder_path = os.path.join(now_yrs_sub_folder_path, dt_dayno_mnths_shortname_upper)

                    # print(current_day_no_mnths_shortname_upper_sub_folder_path)

                    path_lsts = [now_yrs_sub_folder_path,current_day_no_mnths_shortname_upper_sub_folder_path]

                    self.os_makedirs_lsts(paths1=path_lsts)

                    self.msg_autoClose(msg_text=f"Timestamp folders has been successfully been generated at '{path}'", msg_title="Folder Creation complete:",close_tmr=3,msg_icon=QMessageBox.Information)

                # print("\n-> Folder made.")
                # break
        except Exception as err:

            self.apps_log_sys(logerr_msg=str(err),err_msgtitle="App Generic error:",err_msgtxt=str(err))

    def update_path_collection(self):

        try:
            # self.save_paths_json()

            self.enter_path()

            self.create_folder()

        except Exception as err:
            self.apps_log_sys(logerr_msg=str(err),err_msgtitle="App Generic error:",err_msgtxt=str(err))

        # print("\n-> Path updated.")
 

    def exit(self):
        returned_msg_outs = self.yn_msgbox(txt5="Are you sure you want to exit the app?",title5="Exit -Yes/No:",msg_icon=QMessageBox.Warning)

        if returned_msg_outs == QMessageBox.No:
            pass
        elif returned_msg_outs == QMessageBox.Yes:
            # app = QtWidgets.QApplication(sys.argv)
            # sys.exit(app.exec_())
            sys.exit()
        else:
            pass

        # print("\n-> Exited.")

    def open_logfolder(self):
        try:
            os.makedirs(logs_folder_path)
        except OSError:
            pass

        os.startfile(logs_folder_path)

        # print("\n-> Log folder openned.")
    
    def open_logfiles(self):
        try:
            os.makedirs(logs_folder_path)
        except OSError:
            pass

        if os.path.exists(logfl_path)==False:
            with open(logfl_path,'w',encoding="utf-8") as logfl_w2:
                logfl_w2.writable()
        else:
            pass
        
        os.startfile(logfl_path)

        # print("\n-> Log file openned.")

if __name__ == "__main__":
    
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
