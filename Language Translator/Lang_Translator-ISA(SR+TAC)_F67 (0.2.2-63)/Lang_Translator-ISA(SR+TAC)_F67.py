# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Langs_Interpreter-ISA.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
import os 
import winshell# mimic windows powershell activities
from win32com.client import Dispatch# Creates a Dispatch based COM object using win32 modules
import datetime
from PySide2.QtCore import QTimer
from PySide2.QtWidgets import QApplication , QMessageBox
import speech_recognition as sr
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QWidget, QComboBox, QPushButton, QFileDialog, QVBoxLayout
import string
import random
import time
from googletrans import Translator , LANGUAGES
import json
from playsound import playsound
from gtts import gTTS , gTTSError

'''Source files'''
#cdir = os.path.dirname(os.path.realpath(__file__))# curent working directory or the 'Now'-location of the file.

cdir = os.getcwd()

# --------------------------------------------------------------------------------------------------

# Time
dt_clockH = datetime.datetime.now().strftime("%I")

dt_clockM = datetime.datetime.now().strftime("%M")

dt_clockS = datetime.datetime.now().strftime("%S")

dt_clockMS = datetime.datetime.now().strftime("%f")

dt_TMR = f"{dt_clockH}:{dt_clockM}:{dt_clockS}"

dt_time= f"{dt_clockH}:{dt_clockM}"

dt_time2= f"{dt_clockH}-{dt_clockM}"

dt_DN = datetime.datetime.now().strftime('%p').lower()

# Date
dt_dd = datetime.datetime.now().strftime("%d")

dt_mm = datetime.datetime.now().strftime("%m")

dt_yyyy = datetime.datetime.now().strftime("%Y")

dt_wdys = datetime.datetime.now().strftime("%A").lower()

dt_mnths = datetime.datetime.now().strftime("%B")

dt_mnths_no = datetime.datetime.now().strftime("%m")

dt_date = f"{dt_dd}-{dt_mm}-{dt_yyyy}"

dt_mnthsno_mnths = f"{dt_mnths_no}-{dt_mnths}"

# --------------------------------------------------------------------------------
 
# Current file name infos
'''File name & File extension'''
file_name, file_type = os.path.splitext(os.path.basename(os.path.abspath(__file__)))
 
# --------------------------------------------------------------------------------
''' Folder names '''
# Output logs folder with app name
app_folder_name = 'Language Translator (SR+TAC)'
collections_folder1_name= f'{app_folder_name} collections'
logs_subfolder2_name = 'Output records'
audios_subfolder2_name= 'Output audios'

# -----------------------------------------------------------------------------------------

''' Settings file path '''
# App Json files details
paths_name_json = 'path_datas'

json_fl_name = f'{paths_name_json}.json'

paths_datas_json_file_path = os.path.join(cdir,json_fl_name)

app_title = "Language Translator (with Speech Recognition + Text Audio Converter) [Improved.Simplified.Alternative]"

# Random String
rand_str = ''.join(random.choices(string.ascii_letters, k=15))

# Logs Folder
log_dirname = "Logs"
logs_folder_path = os.path.join(cdir,log_dirname)

# Log file details
logfl_name = f"Log_{dt_date}"
log_fl = f"{logfl_name}.log"

logfl_path = os.path.join(logs_folder_path,log_fl)

# Languages
langs_values_lsts = list(LANGUAGES.values())

class Ui_MainWindow(QWidget):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 576)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        # Set APP BG 
        self.palette = QtGui.QPalette()
        self.brush = QtGui.QBrush(QtGui.QColor(33, 192, 162))
        self.brush.setStyle(QtCore.Qt.SolidPattern)
        self.palette.setBrush(QtGui.QPalette.Window, self.brush)
        MainWindow.setPalette(self.palette)

        # Set app icon
        returned_icofl_path = self.icon_fls()
        MainWindow.setWindowIcon(QtGui.QIcon(returned_icofl_path))  

        # Main frame
        self.Mainframe = QtWidgets.QFrame(self.centralwidget)
        self.Mainframe.setGeometry(QtCore.QRect(19, 9, 761, 521))
        self.Mainframe.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.Mainframe.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Mainframe.setObjectName("Mainframe")

        # Text Label
        self.text_label = QtWidgets.QLabel(self.Mainframe)
        self.text_label.setGeometry(QtCore.QRect(60, 50, 111, 61))
        font = QtGui.QFont()
        font.setPointSize(33)
        self.text_label.setFont(font)
        self.text_label.setAlignment(QtCore.Qt.AlignCenter)
        self.text_label.setObjectName("text_label")

        # Text input field
        self.text_in = QtWidgets.QLineEdit(self.Mainframe)
        self.text_in.setGeometry(QtCore.QRect(180, 50, 501, 61))
        font = QtGui.QFont()
        font.setPointSize(28)
        self.text_in.setFont(font)
        self.text_in.setObjectName("text_in")
        
        # Languages combo box
        self.langs_comboBox = QtWidgets.QComboBox(self.Mainframe)
        self.langs_comboBox.setGeometry(QtCore.QRect(240, 150, 291, 61))
        font = QtGui.QFont()
        font.setPointSize(22)
        self.langs_comboBox.setFont(font)
        self.langs_comboBox.setObjectName("langs_comboBox")
        self.langs_comboBox.addItem("")

        # Button frame
        self.Btn_frame = QtWidgets.QFrame(self.Mainframe)
        self.Btn_frame.setGeometry(QtCore.QRect(20, 239, 721, 261))
        font = QtGui.QFont()
        font.setPointSize(28)
        self.Btn_frame.setFont(font)
        self.Btn_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.Btn_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Btn_frame.setObjectName("Btn_frame")

        # Translate button
        self.translate_button = QtWidgets.QPushButton(self.Btn_frame)
        self.translate_button.setGeometry(QtCore.QRect(260, 40, 191, 91))
        self.translate_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.translate_button.setObjectName("translate_button")

        # Exit button
        self.exit_button = QtWidgets.QPushButton(self.Btn_frame)
        self.exit_button.setGeometry(QtCore.QRect(20, 140, 191, 91))
        self.exit_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.exit_button.setObjectName("exit_button")
        
        # Reset button
        self.reset_button = QtWidgets.QPushButton(self.Btn_frame)
        self.reset_button.setGeometry(QtCore.QRect(500, 140, 191, 91))
        self.reset_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.reset_button.setObjectName("reset_button")

        # Access button
        self.access_button = QtWidgets.QPushButton(self.Btn_frame)
        self.access_button.setGeometry(QtCore.QRect(260, 178, 191, 91))
        self.access_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.access_button.setObjectName("access_button")

        MainWindow.setCentralWidget(self.centralwidget)

        # Menubar
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 23))
        self.menubar.setObjectName("menubar")
        self.menuOptions = QtWidgets.QMenu(self.menubar)
        self.menuOptions.setObjectName("menuOptions")
        MainWindow.setMenuBar(self.menubar)

        # Status bar
        # Set Status bar font
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        self.statusbar.setFont(font)
        MainWindow.setStatusBar(self.statusbar)

        # Menu bar
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")

        # Menu Options
        self.menuOptions = QtWidgets.QMenu(self.menubar)
        self.menuOptions.setObjectName("menuOptions")

        # Menu Settings
        self.menuSettings = QtWidgets.QMenu(self.menuOptions)
        self.menuSettings.setObjectName("menuSettings")

        # Menu Open folders
        self.menuOpen_folders = QtWidgets.QMenu(MainWindow)
        self.menuOpen_folders.setObjectName("menuOpen_folders")

        MainWindow.setMenuBar(self.menubar)

        # Change path option from settings menu bar 
        self.actionChange_path = QtWidgets.QAction(MainWindow)
        self.actionChange_path.setObjectName("actionChange_path")

        # Open log file from options
        self.actionOpen_Log_file = QtWidgets.QAction(MainWindow)
        self.actionOpen_Log_file.setObjectName("actionOpen_Log_file")

        # Open log folder from options
        self.actionOpen_Log_folder = QtWidgets.QAction(MainWindow)
        self.actionOpen_Log_folder.setObjectName("actionOpen_Log_folder")

        # Open output file from options
        self.actionOpen_Output_file = QtWidgets.QAction(MainWindow)
        self.actionOpen_Output_file.setObjectName("actionOpen_Output_file")

        # Open play audio file from options
        self.actionPlay_audio_file = QtWidgets.QAction(MainWindow)
        self.actionPlay_audio_file.setObjectName("actionPlay_audio_file")

        # Open collection folder from options
        self.actionOpen_collection_folder = QtWidgets.QAction(MainWindow)
        self.actionOpen_collection_folder.setObjectName("actionOpen_collection_folder")
 
        # Open output audios folder from options
        self.actionOpen_output_audios_folder = QtWidgets.QAction(MainWindow)
        self.actionOpen_output_audios_folder.setObjectName("actionOpen_output_audios_folder")

        # Open output logs folder from options
        self.actionOpen_output_records_folder = QtWidgets.QAction(MainWindow)
        self.actionOpen_output_records_folder.setObjectName("actionOpen_output_records_folder")

        # Adding Change path to settings menu bar
        self.menuSettings.addAction(self.actionChange_path)

        # Adding Open collection folder
        self.menuOpen_folders.addAction(self.actionOpen_collection_folder)

        # Adding separator below
        self.menuOpen_folders.addSeparator()

        # Adding Open output logs folder
        self.menuOpen_folders.addAction(self.actionOpen_output_records_folder)

        # Adding separator below
        self.menuOpen_folders.addSeparator()

        # Adding Open ouput audios folder
        self.menuOpen_folders.addAction(self.actionOpen_output_audios_folder)

        # Adding separator below
        self.menuOpen_folders.addSeparator()

        # Adding Open collection folder
        self.menuOpen_folders.addAction(self.actionOpen_Log_folder)

        # Adding Settings to the options
        self.menuOptions.addAction(self.menuSettings.menuAction())

        # Adding separator below
        self.menuOptions.addSeparator()

        # Adding Settings to the options
        self.menuOptions.addAction(self.menuOpen_folders.menuAction())

        # Adding separator below
        self.menuOptions.addSeparator()

        # Adding open log file to the options
        self.menuOptions.addAction(self.actionOpen_Log_file)

        # Adding separator below
        self.menuOptions.addSeparator()

        # Adding open output file  to the options
        self.menuOptions.addAction(self.actionOpen_Output_file)

        # Adding separator below
        self.menuOptions.addSeparator()

        # Adding play audio output file  to the options
        self.menuOptions.addAction(self.actionPlay_audio_file)
      
        self.menubar.addAction(self.menuOptions.menuAction())

        # Convert texts into computer readable data
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate

    # Set UI components from user POV
        # Set App title
        MainWindow.setWindowTitle(_translate("MainWindow", app_title))

        # Text input field
        self.text_label.setText(_translate("MainWindow", "Text:"))
        self.text_in.setToolTip(_translate("MainWindow","Please type the text here."))

        # -> Translate button
        self.translate_button.setText(_translate("MainWindow", "Translate"))
        self.translate_button.setStatusTip(_translate("MainWindow", "Click here to translate. (Press Enter)"))
        self.translate_button.setShortcut(_translate("MainWindow", "Return"))

        # -> Exit button
        self.exit_button.setText(_translate("MainWindow", "Exit"))
        self.exit_button.setShortcut(_translate("MainWindow", "Esc"))
        self.exit_button.setStatusTip(_translate("MainWindow", "Click here to exit. (Press Esc)"))

        # Reset button
        self.reset_button.setText(_translate("MainWindow", "Reset"))
        self.reset_button.setShortcut(_translate("MainWindow", "Ctrl+Z"))
        self.reset_button.setStatusTip(_translate("MainWindow", "Click here reset values. (Ctrl+Z)"))

        # Access button
        self.access_button.setText(_translate("MainWindow", "Access"))
        self.access_button.setStatusTip(_translate("MainWindow", "Click here collection folder. (Ctrl+O)"))

        # -> Languages combobox
        self.langs_comboBox.setStatusTip(_translate("MainWindow", "Choose which language to be translated as."))
        self.langs_comboBox.setItemText(0, _translate("MainWindow", "english"))
        self.langs_comboBox.addItems(langs_values_lsts)
        
        # Options
        self.menuOptions.setTitle(_translate("MainWindow", "Options"))

        # Settings from options
        self.menuSettings.setTitle(_translate("MainWindow", "Settings"))
 
        # -> Change path (Ctrl+P) from settings
        self.actionChange_path.setText(_translate("MainWindow", "Change path"))
        self.actionChange_path.setShortcut(_translate("MainWindow", "Ctrl+P"))

        # -> Open folders from options
        self.menuOpen_folders.setTitle(_translate("MainWindow", "Open folders"))
        
        # -> Open collections folder from open folders
        self.actionOpen_Log_folder.setText(_translate("MainWindow", "Open Logs folder"))

        # -> Open output logs folder from open folders
        self.actionOpen_output_records_folder.setText(_translate("MainWindow", "Open output records folder"))

        # -> Open output audios folder from open folders
        self.actionOpen_output_audios_folder.setText(_translate("MainWindow", "Open output audios folder"))

        # -> Open Output collections folder (Ctrl+O) from options
        self.actionOpen_collection_folder.setText(_translate("MainWindow", "Open collection folder"))
        self.actionOpen_collection_folder.setShortcut(_translate("MainWindow", "Ctrl+O"))

        # -> Open Log file (Ctrl+L) from options
        self.actionOpen_Log_file.setText(_translate("MainWindow", "Open Log file"))
        self.actionOpen_Log_file.setShortcut(_translate("MainWindow", "Ctrl+L"))

        # -> Open Output file (Ctrl+U) from options
        self.actionOpen_Output_file.setText(_translate("MainWindow", "Open Output file"))
        self.actionOpen_Output_file.setShortcut(_translate("MainWindow", "Ctrl+U"))

        # -> Play audio (Ctrl+M) from options
        self.actionPlay_audio_file.setText(_translate("MainWindow", "Play audio file"))
        self.actionPlay_audio_file.setShortcut(_translate("MainWindow", "Ctrl+M"))


    # Set colours for GUI compontents 

    # Set GUI button colors:
        # -> Translate button
        self.translate_button.setStyleSheet("background-color : green; color: white")
 
        # -> Exit button
        self.exit_button.setStyleSheet("background-color : red; color: white")
        
        # -> Reset button
        self.reset_button.setStyleSheet("background-color : purple; color: white")

        # -> Access button
        self.access_button.setStyleSheet("background-color : blue; color: white")

    # Set GUI label colors 
        # -> Text label
        self.text_label.setStyleSheet("background-color : brown; color: white")
 
    # Set GUI input box colors 
        # -> text input box
        self.text_in.setStyleSheet("color: brown")


    # Set Buttons & Options funtions when user clicks a button\Options 

    # Set Options actions:
        # -> Open collection folder (Ctrl+O)
        self.actionOpen_collection_folder.triggered.connect(self.access_collections)

        # -> Open output audios folder 
        self.actionOpen_output_audios_folder.triggered.connect(self.access_output_audios)

        # -> Open outpu records folder
        self.actionOpen_output_records_folder.triggered.connect(self.access_output_logs)

        # -> Open output file (Ctrl+U)
        self.actionOpen_Output_file.triggered.connect(self.open_output_logfl)

        # -> Change path (Ctrl+P)
        self.actionChange_path.triggered.connect(self.chngpath)

        # -> Open logs folder
        self.actionOpen_Log_folder.triggered.connect(self.open_logsfolder)

        # -> Open log file (Ctrl+L)
        self.actionOpen_Log_file.triggered.connect(self.open_logsfl)

        # Play audio file (Ctrl+M)
        self.actionPlay_audio_file.triggered.connect(self.play_audfl)

    # Set GUI button actions:
        # -> Translate button
        self.translate_button.clicked.connect(self.g_tanslate)

        # -> Exit button
        self.exit_button.clicked.connect(self.exit)

        # -> Reset Button
        self.reset_button.clicked.connect(self.reset)

        #  -> Access button
        self.access_button.clicked.connect(self.access_collections)

    def apps_log_sys(self,logerr_msg,err_msgtitle,err_msgtxt):

        # Log file details
        log_dirname = "Logs"
        logs_folder_path = os.path.join(cdir,log_dirname)
        logfl_name = f"Log_{dt_date}"
        log_fl = f"{logfl_name}.log"

        try:
            os.makedirs(logs_folder_path)
        except OSError:
            pass
        # logs_folder_path = os.path.join(logdirs6_path,log_dirname6)
        log_err = f"\n<{dt_date}\{dt_time}> , Error: {str(logerr_msg)}\n<________________________________________>\n"
        self.msg_autoClose(msg_text=f"Error cause: \n{str(err_msgtxt)} .                      ",msg_title=err_msgtitle,close_tmr=4,msg_icon=QMessageBox.Critical)

        logfl_path = os.path.join(logs_folder_path,log_fl)
        
        with open(logfl_path,"a", encoding="utf-8") as logfl_w6:
            logfl_w6.writelines(log_err)

    def yn_msgbox(self,txt5,title5,msg_icon):

        # returned_icofl_path = self.icon_fls()

        # print(returned_icofl_path)

        yn_msg = QMessageBox()

        yn_msg.setIcon(msg_icon)

        yn_msg.setIcon(QMessageBox.Warning)

        yn_msg.setText(txt5)
      
        yn_msg.setWindowTitle(title5)
              
        yn_msg.setStandardButtons(QMessageBox.Yes | QMessageBox.No)

        msg_button_out = yn_msg.exec()

        return msg_button_out

    def msg_autoClose(self,msg_title,msg_text,close_tmr,msg_icon):

        qm = QMessageBox()
        qm.setIcon(msg_icon)
        qm.setWindowTitle(msg_title)
        qm.setText(msg_text)
        qm.setStandardButtons(QMessageBox.Ok)
        QTimer.singleShot(close_tmr*1000,lambda : qm.done(0))
        qm.setFixedWidth(1800)
        qm.setFixedHeight(1755)
        qm.exec_()

    def save_path_json(self):
 
        if os.path.exists(paths_datas_json_file_path) == False:
            
            dir_dialog_title = "Please choose folder (or directory) to hold '{}' folder:".format(collections_folder1_name)
            dir_dlgbox = QFileDialog.getExistingDirectory(self, caption=dir_dialog_title)
           
            if dir_dlgbox:

                usr_rt_v = dir_dlgbox.replace("/","\\")

                self.save_json(json_flpath1=paths_datas_json_file_path,keys1="path",val1=usr_rt_v)

                self.msg_autoClose(msg_text="Path saved.                        ",msg_title="Path update - Complete",close_tmr=2,msg_icon=QMessageBox.Information)

                #sys.exit()
            else:
                pass
        else:
            pass

    def chngpath(self):
        dir_dialog_title = "Please choose folder (or directory) to be changed:"
        
        chngdir_dlgbox = QFileDialog.getExistingDirectory(self, caption=dir_dialog_title)
           
        if chngdir_dlgbox:

            usr_chng_rt_v = chngdir_dlgbox.replace("/","\\")

            # print(usr_chng_rt_v)

            if os.path.exists(paths_datas_json_file_path)==True:

                self.update_json(json_flpath3=paths_datas_json_file_path,keys3="path",info3=usr_chng_rt_v,msg_title3="Path update - Complete:",msg_txt3="Path changed successfully.      ")

                self.get_json_paths()
            else:
                self.save_path_json()
        else:
            pass

    def foldershortcut_maker_lsts(self,paths_1,folder_name):

        for dir in paths_1:

            try:
                os.makedirs(dir)
            except OSError:
                pass            
            
            if dir == paths_1[0]:
                shortcut_fl = f'{folder_name} - Shortcut.lnk'

                desktop = winshell.desktop()
                path = os.path.join(desktop, shortcut_fl)

                ''' Make 'AppName' using "shortcut maker" protcol '''
                # 'if' -> if shortcut is not found at system desktop, creates it
                # Or 'else' -> skips 'shortcut maker' protocol if the json is found

                target = dir
                wDir = dir
                if os.path.exists(path)== False:
                    # file_name, file_type = os.path.splitext(os.path.basename(os.path.realpath(__file__)))
                    shell = Dispatch('WScript.Shell')
                    shortcut = shell.CreateShortCut(path)
                    shortcut.Targetpath = target
                    shortcut.WorkingDirectory = wDir
                    shortcut.save()
                else:
                    pass
            else:
                pass

    def get_json_paths(self):

        try:

            returned_path = self.read_json(jsonfl_path1=paths_datas_json_file_path,k1="path")

            ''' AppName main folder path '''
            app_main_folder_v = os.path.join(returned_path,collections_folder1_name)

            ''' Output audios folder path'''
            outaudios_subfolder1 = os.path.join(app_main_folder_v,audios_subfolder2_name)

            ''' Output logs folder path '''
            outlogs_subfolder2 = os.path.join(app_main_folder_v,logs_subfolder2_name)

        # -> Year & Month Number-Month & Date folder in output audio folder
            ''' Current year folder path '''
            now_yrs_sub_folder_v1 = os.path.join(outaudios_subfolder1,dt_yyyy)

            ''' Current month number-month folder path '''
            now_mnthsno_mnths_sub_folder_v1 = os.path.join(now_yrs_sub_folder_v1,dt_mnthsno_mnths)

            ''' Current date folder path '''
            now_date_sub_folder_v1 = os.path.join(now_mnthsno_mnths_sub_folder_v1,dt_date)


         # -> Year & Month Number-Month & Date folder in output log folder

            ''' Current year folder path '''
            now_yrs_sub_folder_v2 = os.path.join(outlogs_subfolder2,dt_yyyy)

            ''' Current month number-month folder path '''
            now_mnthsno_mnths_sub_folder_v2 = os.path.join(now_yrs_sub_folder_v2,dt_mnthsno_mnths)

            ''' Current date folder path '''
            now_date_sub_folder_v2 = os.path.join(now_mnthsno_mnths_sub_folder_v2,dt_date)

            dir_lsts = [app_main_folder_v , 
            now_yrs_sub_folder_v1 ,now_yrs_sub_folder_v2, 
            now_mnthsno_mnths_sub_folder_v1 ,now_mnthsno_mnths_sub_folder_v2,
            now_date_sub_folder_v1, now_date_sub_folder_v2]

            self.foldershortcut_maker_lsts(paths_1=dir_lsts,folder_name=collections_folder1_name)
            
            self.delay(0.16)
        
            return app_main_folder_v , now_date_sub_folder_v1 , now_date_sub_folder_v2
        except FileNotFoundError:
            pass

    def read_json(self,jsonfl_path1,k1):
        with open(jsonfl_path1,'r') as pathjson_fl_r:
            data = pathjson_fl_r.read()

            infos_v = json.loads(data)[k1]

        return infos_v

    def save_json(self,json_flpath1,keys1,val1):

        infos = {
            keys1: str(val1)

                            }
        with open(json_flpath1,'w') as json_fl_w:
            json.dump(infos,json_fl_w)  

    def update_json(self,json_flpath3,keys3,info3,msg_txt3,msg_title3):

        with open(json_flpath3,'r') as json_data_r:
            json_src_data = json.load(json_data_r)

            json_src_data[keys3] = info3

            with open(json_flpath3,'w') as json_fl_w:
                json.dump(json_src_data,json_fl_w)

        self.msg_autoClose(msg_text=msg_txt3+"                        ",msg_title=msg_title3+"                        ",close_tmr=3,msg_icon=QMessageBox.Information)

    def icon_fls(self):
        for file in os.listdir(cdir):
    
            # print(file)
            
            if '.ico' in file:
                try:
                    icon_flpath =os.path.join(cdir,file)
                    return icon_flpath
                except OSError:
                    pass
            else:
                pass

    def delay(self,var):
        time.sleep(var)

    def exit(self):

        returned_msg_outs = self.yn_msgbox(txt5="Are you sure you want to exit the app?",title5="Exit -Yes/No:",msg_icon=QMessageBox.Warning)

        if returned_msg_outs == QMessageBox.No:
            pass
        elif returned_msg_outs == QMessageBox.Yes:
            # app = QtWidgets.QApplication(sys.argv)
            # sys.exit(app.exec_())
            sys.exit()
        else:
            pass
    
    def get_lang_key(self,val5):
        for keys, values in LANGUAGES.items():
            if values==val5:
                return keys
            else:
                pass

    def g_tanslate(self):
        self.save_path_json()      

        if os.path.exists(paths_datas_json_file_path) == True:
            returned_app_main_folder_v , returned_now_date_sub_folder_v1 , returned_now_date_sub_folder_v2 = self.get_json_paths()

            audio_name_mp3 = f"LangAudio_{rand_str}.mp3"

            audio_full_path = os.path.join(returned_now_date_sub_folder_v1,audio_name_mp3)

            output_file = f"Output_{dt_date}.log"

            output_file_full_path = os.path.join(returned_now_date_sub_folder_v2,output_file)
            # print("Text translated")

            txt = self.text_in.text()

            dest_lang = self.langs_comboBox.currentText()

            # print(f"Text: {txt} | Lang_dest: {dest_lang}")

            if txt=="":

                # self.text_in.setText("")
                # self.langs_comboBox.setCurrentText("english") 
                    
                self.delay(0.16)
    
                self.apps_log_sys(logerr_msg="Invalid input: Empty text cannot be translated",err_msgtitle="Value Error - Empty Text cannot be translated.",err_msgtxt="Empty text cannot be translated            ")

                self.delay(0.19)

                self.msg_autoClose(msg_text="Seeking alternative.....",msg_title="Notify:",close_tmr=3,msg_icon=QMessageBox.Information)

                # self.delay(0.19)

                self.msg_autoClose(msg_text="Google Speech Recognition activated.                  ",msg_title="Google Speech Recognition - Active",close_tmr=3,msg_icon=QMessageBox.Information)

                self.sr_sys(dest_lang2=dest_lang)
            else:

                try:

                    translator1 = Translator()

                    translated1 = translator1.translate(text=txt,dest=dest_lang)
                    
                    # print("\n Text in '{}' Lang :".format(dest_lang))

                    translated1_txt = translated1.text

                    # print(translated_txt)

                    output_txt= f"'{txt}' text translated as '{dest_lang}' language is '{translated1_txt}'."

                    self.output_fls(out_flpath=output_file_full_path,out_txt=f"\n<{dt_date}\{dt_time}> , Output: {output_txt}\n<________________________________________>\n")

                    self.msg_autoClose(msg_text=output_txt,msg_title="Text tranlation - Success",close_tmr=4,msg_icon=QMessageBox.Information)
                   
                    returned_lang_key5 = self.get_lang_key(val5=dest_lang)

                    self.gtxt_to_aud(audio_path3=audio_full_path,lang3=returned_lang_key5,text3=translated1_txt,audfl_name=audio_name_mp3)
                    
                    returned_msg_outs = self.yn_msgbox(txt5="Do you wish to translate another text?",title5="Another translation - Yes/No:",msg_icon=QMessageBox.Warning)

                    if returned_msg_outs == QMessageBox.No:
                        pass
                    elif returned_msg_outs == QMessageBox.Yes:
                        self.text_in.setText("")
                        self.langs_comboBox.setCurrentText("english")
                    else:
                        pass

                except gTTSError as gtts_err:

                    os.remove(audio_full_path)

                    self.delay(0.16)

                    self.apps_log_sys(logerr_msg=gtts_err,err_msgtitle="gTTS API Error: ",err_msgtxt=gtts_err)
                    
                except Exception as generic_err:

                    self.text_in.setText("")
                    self.langs_comboBox.setCurrentText("english") 

                    # print(f"\n Generic Error: {generic_err}")

                    self.delay(0.16)

                    self.apps_log_sys(logerr_msg=str(generic_err),err_msgtitle="Generic errror:",err_msgtxt=str(generic_err))
               
        else:
            pass

    def sr_sys(self,dest_lang2):
        try:
            r=sr.Recognizer()

            m = sr.Microphone()

            with m as source:

                self.msg_autoClose(msg_text="You can speak now.              ",msg_title="Words catpure: Google-Speech Recognition ready",close_tmr=3,msg_icon=QMessageBox.Information)

                r.pause_threshold=2

                audio = r.listen(source)

            try:

                returned_app_main_folder_v , returned_now_date_sub_folder_v1 , returned_now_date_sub_folder_v2 = self.get_json_paths()

                str_sr_var=r.recognize_google(audio)

                output_file_sr = f"Output_SR_{dt_date}.log"

                output_file_full_path_sr = os.path.join(returned_now_date_sub_folder_v2,output_file_sr)

                audio_name_mp3_sr = f"LangAudio-SpeehRec_{rand_str}.mp3"

                audio_full_path_sr = os.path.join(returned_now_date_sub_folder_v1,audio_name_mp3_sr)
 
                translator2 = Translator()

                translated2_sr_detect = translator2.detect(str_sr_var)

                translated2_sr_lang = translated2_sr_detect.lang

                # print("\n-> You have spoken {}".format(str_sr_var))

                # print(f"\n-> Speech Ttranslate Parameters: {translated2_sr_detect}")

                # print(f"\n-> Speech translate language: {translated2_sr_lang}")

                # sys.exit()

                translated_sr = translator2.translate(text=str_sr_var,dest=dest_lang2)
 
                translated_txt_sr = translated_sr.text

                output_txt= f"'{str_sr_var}' text translated as '{dest_lang2}' language is '{translated_txt_sr}'."

                self.output_fls(out_flpath=output_file_full_path_sr,out_txt=f"\n<{dt_date}\{dt_time}> , Output (Speech Recognition): {output_txt}\n<________________________________________>\n")

                self.gtxt_to_aud(audio_path3=audio_full_path_sr,lang3=translated2_sr_lang,text3=str_sr_var,audfl_name=audio_name_mp3_sr)
                
                self.msg_autoClose(msg_text=output_txt,msg_title="Text tranlation - Success",close_tmr=4,msg_icon=QMessageBox.Information)
                
                returned_msg_outs = self.yn_msgbox(txt5="Do you wish to translate another text?",title5="Another translation - Yes/No:",msg_icon=QMessageBox.Warning)

                if returned_msg_outs == QMessageBox.No:
                    pass
                elif returned_msg_outs == QMessageBox.Yes:
                    # self.text_in.setText("")
                    self.langs_comboBox.setCurrentText("english")
                else:
                    pass

            except sr.UnknownValueError as sr_ue_err:

                self.langs_comboBox.setCurrentText("english") 

                self.delay(0.16)

                self.apps_log_sys(logerr_msg=str(sr_ue_err),err_msgtitle="Speech-Recognition Unknown Error: ",err_msgtxt="Oops! Didn't catch that")
                           
            except sr.RequestError as sr_req_err:

                self.langs_comboBox.setCurrentText("english") 

                self.apps_log_sys(logerr_msg=str(sr_req_err),err_msgtitle="Speech-Recognition Connection Error: ",err_msgtxt="Opps! couldn't request results from Google Speech Recognition service at the moment. So please check the device network is online and ready")
            
            except gTTSError as gtts_err:

                os.remove(audio_full_path_sr)

                self.delay(0.16)

                self.apps_log_sys(logerr_msg=gtts_err,err_msgtitle="gTTS API Error: ",err_msgtxt=gtts_err)
    
            except Exception as generic_err:

                # self.text_in.setText("")
                self.langs_comboBox.setCurrentText("english") 

                # print(f"\n Generic Error: {generic_err}")

                self.delay(0.16)

                self.apps_log_sys(logerr_msg=str(generic_err),err_msgtitle="Generic errror:",err_msgtxt=str(generic_err))
     
        except Exception as generic_err:

            # self.text_in.setText("")
            self.langs_comboBox.setCurrentText("english") 

            # print(f"\n Generic Error: {generic_err}")

            self.delay(0.16)

            self.apps_log_sys(logerr_msg=str(generic_err),err_msgtitle="Generic errror:",err_msgtxt=str(generic_err))
    
    def gtxt_to_aud(self,audio_path3,text3,lang3,audfl_name):
        
        gtts_audios_dl = gTTS(text=text3,lang=lang3,slow=False,lang_check=True)

        gtts_audios_dl.save(audio_path3)

        # mp3_flname , mp3_flextnts = os.path.splitext(os.path.basename(audio_path3))

        self.msg_autoClose(msg_text=f"'{text3}' text sucessfully converted into '{audfl_name}' audio file.",msg_title="Text to audio file (.Mp3) status - Complete",close_tmr=3,msg_icon=QMessageBox.Information)
                        
        returned_msg_outs = self.yn_msgbox(txt5="Do you wish to play the audio?",title5="Play audio - Yes/No?",msg_icon=QMessageBox.Question)

        if returned_msg_outs == QMessageBox.No:
            pass
        elif returned_msg_outs == QMessageBox.Yes:
            playsound(audio_path3)
        else:
            pass

    def play_audfl(self):
        self.save_path_json()  

        if os.path.exists(paths_datas_json_file_path) == True:
            returned_app_main_folder_v ,returned_now_date_sub_folder_v1 , returned_now_date_sub_folder_v2 = self.get_json_paths()

            # Getting the list of items in a directories
            dir = os.listdir(returned_now_date_sub_folder_v1)

            # Checking if the list is empty or not
            if len(dir) == 0:

                logerr_txt = f"AudioPlay Error: No text converted audios found in directory '{returned_now_date_sub_folder_v1}'."
                self.apps_log_sys(logerr_msg=logerr_txt,err_msgtitle="AudioPlay Error - No text converted audios found: ",err_msgtxt="Opps! Couldn't play since there are no text converted audios found.           ")
           
            else: 

                fl_dialog_title = f"Please choose audio to be played from '{audios_subfolder2_name}' folder :"

                wild_cards = "Mp3 (*.mp3);;Waveform Audio File Format (*.wav)"
            
                file , check = QFileDialog.getOpenFileName(self, fl_dialog_title,returned_now_date_sub_folder_v1, wild_cards)
                if check:
                    file_choosen_re = file.replace("/","\\")

                    playsound(file_choosen_re)

                    audfl_name , audfl_extnts = os.path.splitext(file_choosen_re)

                    self.msg_autoClose(msg_text=f"'{audfl_name}' audio file played sucessfully.",msg_title="Audio played status - Success",close_tmr=3,msg_icon=QMessageBox.Information)

                else:
                    pass
        else:
            pass
                    
    def open_output_logfl(self):
        self.save_path_json()      

        if os.path.exists(paths_datas_json_file_path) == True:
            returned_app_main_folder_v ,returned_now_date_sub_folder_v1 , returned_now_date_sub_folder_v2 = self.get_json_paths()

            # Getting the list of items in a directories
            dir = os.listdir(returned_now_date_sub_folder_v1)

            # Checking if the list is empty or not
            if len(dir) == 0:
                logerr_txt = f"Access Denied: No translation results found in directory '{returned_now_date_sub_folder_v1}'."
                self.apps_log_sys(logerr_msg=logerr_txt,err_msgtitle="Access denied - No translation results found: ",err_msgtxt="No translation results found.            ")

            else:
                output_file = f"Output_{dt_date}.log"

                output_file_full_path = os.path.join(returned_now_date_sub_folder_v2,output_file)

                output_file_sr = f"Output_SR_{dt_date}.log"

                output_file_full_path_sr = os.path.join(returned_now_date_sub_folder_v1,output_file_sr)

                if os.path.exists(output_file_full_path)==True:
                    os.startfile(output_file_full_path)
                elif os.path.exists(output_file_full_path_sr)==True:
                    os.startfile(output_file_full_path_sr)
                else:
                    pass

        else:
            pass

    def output_fls(self,out_txt,out_flpath):   

        with open(out_flpath,"a", encoding="utf-8") as outfl_a9:
            outfl_a9.write(out_txt)
 
    def access_collections(self):
        self.save_path_json()      

        if os.path.exists(paths_datas_json_file_path) == True:

            returned_app_main_folder_v , returned_now_date_sub_folder_v1 , returned_now_date_sub_folder_v2 = self.get_json_paths()
 
            os.startfile(returned_app_main_folder_v)

        else:
            pass

    def access_output_logs(self):
        self.save_path_json()      

        if os.path.exists(paths_datas_json_file_path) == True:

            returned_app_main_folder_v , returned_now_date_sub_folder_v1 , returned_now_date_sub_folder_v2 = self.get_json_paths()

            # Getting the list of items in a directories
            dir = os.listdir(returned_now_date_sub_folder_v2)

            # Checking if the list is empty or not
            if len(dir) == 0:
                logerr_txt = f"Access Denied: No translation results found in directory '{returned_now_date_sub_folder_v2}'."
                self.apps_log_sys(logerr_msg=logerr_txt,err_msgtitle="Access denied - No translation results found: ",err_msgtxt="No translation results found.            ")
            else:
                os.startfile(returned_now_date_sub_folder_v2)

        else:
            pass

    def access_output_audios(self):
        self.save_path_json()      

        if os.path.exists(paths_datas_json_file_path) == True:

            returned_app_main_folder_v , returned_now_date_sub_folder_v1 , returned_now_date_sub_folder_v2 = self.get_json_paths()

            # Getting the list of items in a directories
            dir = os.listdir(returned_now_date_sub_folder_v1)

            # Checking if the list is empty or not
            if len(dir) == 0:
                logerr_txt = f"Access Denied: No translation audios found in directory '{returned_now_date_sub_folder_v1}'."
                self.apps_log_sys(logerr_msg=logerr_txt,err_msgtitle="Access denied - No translation audios found: ",err_msgtxt="No translation audios found.            ")
            else:
                os.startfile(returned_now_date_sub_folder_v1)

        else:
            pass

    def reset(self):
        self.text_in.setText("")
        self.langs_comboBox.setCurrentText("english") 
        self.msg_autoClose(msg_text="All values reseted.            ",msg_title="Notify:",close_tmr=2,msg_icon=QMessageBox.Information)
        
    def open_logsfolder(self):

        try:
            os.makedirs(logs_folder_path)
        except OSError:
            pass
 
        os.startfile(logs_folder_path)

    def open_logsfl(self):
    
        try:
            os.makedirs(logs_folder_path)
        except OSError:
            pass

        if os.path.exists(logfl_path)==False:
            with open(logfl_path,"w") as logfl_w6:
                logfl_w6.writable()
        else:
            pass
        os.startfile(logfl_path) 

if __name__ == "__main__":
    
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
