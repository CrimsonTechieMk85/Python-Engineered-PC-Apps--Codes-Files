# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'QR_Code_Maker2.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
import os
import json
import datetime
import winshell
from win32com.client import Dispatch 
from PySide2.QtCore import QTimer
from PySide2.QtWidgets import QMessageBox
import time
import sys
import qrcode
from PIL import Image

'''Source files'''
cfile_path = os.path.realpath(__file__)
# cdir = os.path.dirname(cfile_path)

cdir = os.getcwd()

# Get working file name & extension
cfl_name , cfl_extnts = os.path.splitext(os.path.basename(cfile_path))
''' Time & Date'''
# Time
dt_clockH = datetime.datetime.now().strftime("%I")

dt_clockM = datetime.datetime.now().strftime("%M")

dt_clockS = datetime.datetime.now().strftime("%S")

dt_clockMS = datetime.datetime.now().strftime("%f")

epoch_miliseconds = int(time.time() * 1000)

dt_TMR = f"{dt_clockH}:{dt_clockM}:{dt_clockS}"

dt_time= f"{dt_clockH}:{dt_clockM}"

dt_DN = datetime.datetime.now().strftime('%p').lower()

# Date
dt_dd = datetime.datetime.now().strftime("%d")

dt_mm = datetime.datetime.now().strftime("%m")

dt_yyyy = datetime.datetime.now().strftime("%Y")

dt_wdys = datetime.datetime.now().strftime("%A").lower()

dt_mnths = datetime.datetime.now().strftime("%B")

dt_mnths_no = datetime.datetime.now().strftime("%m")

dt_date = f"{dt_dd}-{dt_mm}-{dt_yyyy}"

dt_mnthsno_mnths = f"{dt_mnths_no}-{dt_mnths}"

# App path Json files details
paths_json_name = 'path_datas'

path_json_flkey = "path"

paths_json_file = f'{paths_json_name}.json'

# paths_json_file = f'{cfl_name}_path_datas.json'

paths_datas_json_file_path = os.path.join(cdir, paths_json_file)

# Collections folder details
main_app_folder_name = 'QR Code Generator 3-B [I.S.A]'
collections_folder_name = f"{main_app_folder_name} collections"

# Text or url QR Codes folder name
txt_url_qrcode_folder_name = "Text or url QR Codes"

# Text or url QR Codes with logos  folder name
txt_url_qrcode_w_logo_folder_name = "Text or url QR Codes with logo"

# Log folder details
log_dirname = "Logs"
logs_folder_path = os.path.join(cdir,log_dirname)

# Log file details
logfl_name = f"Log_{dt_date}"
log_fl = f"{logfl_name}.log"
logfl_path = os.path.join(logs_folder_path,log_fl)

app_title = "QR Code Generator 3-B [Improved.Simplified.Alternative]"

class Ui_MainWindow(QtWidgets.QWidget):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1032, 808)

        # Set APP BG
        self.palette = QtGui.QPalette()
        self.brush = QtGui.QBrush(QtGui.QColor(33, 192, 162))
        self.brush.setStyle(QtCore.Qt.SolidPattern)
        self.palette.setBrush(QtGui.QPalette.Window, self.brush)
        MainWindow.setPalette(self.palette)

        # Set app icon
        returned_icofl_path = self.icon_fls()
        MainWindow.setWindowIcon(QtGui.QIcon(returned_icofl_path))

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(20, 20, 991, 721))
        font = QtGui.QFont()
        font.setPointSize(28)
        self.tabWidget.setFont(font)
        self.tabWidget.setObjectName("tabWidget")

        self.Text_to_QRCode_tab1 = QtWidgets.QWidget()
        self.Text_to_QRCode_tab1.setObjectName("Text_to_QRCode_tab1")

        self.main_frame_tab1 = QtWidgets.QFrame(self.Text_to_QRCode_tab1)
        self.main_frame_tab1.setGeometry(QtCore.QRect(10, 10, 971, 841))
        self.main_frame_tab1.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.main_frame_tab1.setFrameShadow(QtWidgets.QFrame.Raised)
        self.main_frame_tab1.setObjectName("main_frame_tab2")

        self.input_label_tab1 = QtWidgets.QLabel(self.main_frame_tab1)
        self.input_label_tab1.setGeometry(QtCore.QRect(40, 30, 171, 81))
        font = QtGui.QFont()
        font.setPointSize(42)
        self.input_label_tab1.setFont(font)
        self.input_label_tab1.setAlignment(QtCore.Qt.AlignCenter)
        self.input_label_tab1.setObjectName("input_label_tab1")

        self.button_frame2_tab1 = QtWidgets.QFrame(self.main_frame_tab1)
        self.button_frame2_tab1.setGeometry(QtCore.QRect(10, 200, 951, 631))
        self.button_frame2_tab1.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.button_frame2_tab1.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.button_frame2_tab1.setFrameShadow(QtWidgets.QFrame.Raised)
        self.button_frame2_tab1.setObjectName("button_frame2_tab1")

        self.exit_button3_tab1 = QtWidgets.QPushButton(self.button_frame2_tab1)
        self.exit_button3_tab1.setGeometry(QtCore.QRect(50, 240, 341, 141))
        font = QtGui.QFont()
        font.setPointSize(36)
        self.exit_button3_tab1.setFont(font)
        self.exit_button3_tab1.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.exit_button3_tab1.setObjectName("exit_button3_tab1")

        self.qrcode_read_button2_tab1 = QtWidgets.QPushButton(self.button_frame2_tab1)
        self.qrcode_read_button2_tab1.setGeometry(QtCore.QRect(580, 30, 341, 141))
        font = QtGui.QFont()
        font.setPointSize(36)
        self.qrcode_read_button2_tab1.setFont(font)
        self.qrcode_read_button2_tab1.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.qrcode_read_button2_tab1.setObjectName("qrcode_read_button2_tab1")

        self.access_button6_tab1 = QtWidgets.QPushButton(self.button_frame2_tab1)
        self.access_button6_tab1.setGeometry(QtCore.QRect(580, 30, 341, 141))
        font = QtGui.QFont()
        font.setPointSize(36)
        self.access_button6_tab1.setFont(font)
        self.access_button6_tab1.setObjectName("access_button6_tab1")
 
        self.reset_button4_tab1 = QtWidgets.QPushButton(self.button_frame2_tab1)
        self.reset_button4_tab1.setGeometry(QtCore.QRect(580, 240, 341, 141))
        font = QtGui.QFont()
        font.setPointSize(36)
        self.reset_button4_tab1.setFont(font)
        self.reset_button4_tab1.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.reset_button4_tab1.setObjectName("reset_button4_tab1")

        self.qrcode_gen_button_tab1 = QtWidgets.QPushButton(self.button_frame2_tab1)
        self.qrcode_gen_button_tab1.setGeometry(QtCore.QRect(50, 30, 341, 141))
        font = QtGui.QFont()
        font.setPointSize(36)
        self.qrcode_gen_button_tab1.setFont(font)
        self.qrcode_gen_button_tab1.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.qrcode_gen_button_tab1.setObjectName("qrcode_gen_button_tab1")

        self.txt_in_tab1 = QtWidgets.QTextEdit(self.main_frame_tab1)
        self.txt_in_tab1.setGeometry(QtCore.QRect(230, 30, 651, 81))
        font = QtGui.QFont()
        font.setPointSize(36)
        self.txt_in_tab1.setFont(font)
        self.txt_in_tab1.setObjectName("txt_in_tab1")

        self.qr_color_comboBox_tab1 = QtWidgets.QComboBox(self.main_frame_tab1)
        self.qr_color_comboBox_tab1.setGeometry(QtCore.QRect(390, 140, 381, 51))
        self.qr_color_comboBox_tab1.setObjectName("qr_color_comboBox_tab1")
        self.qr_color_comboBox_tab1.addItem("")
        self.qr_color_comboBox_tab1.addItem("")
        self.qr_color_comboBox_tab1.addItem("")
        self.qr_color_comboBox_tab1.addItem("")
        self.qr_color_comboBox_tab1.addItem("")
        self.qr_color_comboBox_tab1.addItem("")
        self.qr_color_comboBox_tab1.addItem("")

        self.set_qr_color_label_tab1 = QtWidgets.QLabel(self.main_frame_tab1)
        self.set_qr_color_label_tab1.setGeometry(QtCore.QRect(130, 140, 251, 51))
        font = QtGui.QFont()
        font.setPointSize(28)
        self.set_qr_color_label_tab1.setFont(font)
        self.set_qr_color_label_tab1.setAlignment(QtCore.Qt.AlignCenter)
        self.set_qr_color_label_tab1.setObjectName("set_qr_color_label_tab1")

        self.tabWidget.addTab(self.Text_to_QRCode_tab1, "")

        self.Logo_QRCode_tab2 = QtWidgets.QWidget()
        self.Logo_QRCode_tab2.setObjectName("Logo_QRCode_tab2")

        self.main_frame_tab2 = QtWidgets.QFrame(self.Logo_QRCode_tab2)
        self.main_frame_tab2.setGeometry(QtCore.QRect(0, 20, 981, 831))
        self.main_frame_tab2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.main_frame_tab2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.main_frame_tab2.setObjectName("main_frame_tab2")

        self.input_label_tab2 = QtWidgets.QLabel(self.main_frame_tab2)
        self.input_label_tab2.setGeometry(QtCore.QRect(40, 20, 171, 101))
        font = QtGui.QFont()
        font.setPointSize(41)
        self.input_label_tab2.setFont(font)
        self.input_label_tab2.setAlignment(QtCore.Qt.AlignCenter)
        self.input_label_tab2.setObjectName("input_label_tab2")

        self.button_frame2_tab2 = QtWidgets.QFrame(self.main_frame_tab2)
        self.button_frame2_tab2.setGeometry(QtCore.QRect(10, 230, 951, 581))
        self.button_frame2_tab2.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.button_frame2_tab2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.button_frame2_tab2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.button_frame2_tab2.setObjectName("button_frame2_tab2")
        self.exit_button3_tab2 = QtWidgets.QPushButton(self.button_frame2_tab2)

        self.exit_button3_tab2.setGeometry(QtCore.QRect(60, 220, 341, 141))
        font = QtGui.QFont()
        font.setPointSize(36)
        self.exit_button3_tab2.setFont(font)
        self.exit_button3_tab2.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.exit_button3_tab2.setObjectName("exit_button3_tab2")

        self.access_button6_tab2 = QtWidgets.QPushButton(self.button_frame2_tab2)
        self.access_button6_tab2.setGeometry(QtCore.QRect(590, 30, 341, 141))
        font = QtGui.QFont()
        font.setPointSize(36)
        self.access_button6_tab2.setFont(font)
        self.access_button6_tab2.setObjectName("access_button6_tab2")
 
        self.reset_button4_tab2 = QtWidgets.QPushButton(self.button_frame2_tab2)
        self.reset_button4_tab2.setGeometry(QtCore.QRect(590, 220, 341, 141))
        font = QtGui.QFont()
        font.setPointSize(36)
        self.reset_button4_tab2.setFont(font)
        self.reset_button4_tab2.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.reset_button4_tab2.setObjectName("reset_button4_tab2")

        self.qrcode_gen_button_tab2 = QtWidgets.QPushButton(self.button_frame2_tab2)
        self.qrcode_gen_button_tab2.setGeometry(QtCore.QRect(60, 30, 341, 141))
        font = QtGui.QFont()
        font.setPointSize(36)
        self.qrcode_gen_button_tab2.setFont(font)
        self.qrcode_gen_button_tab2.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.qrcode_gen_button_tab2.setObjectName("qrcode_gen_button_tab2")

        self.txt_in_tab2 = QtWidgets.QTextEdit(self.main_frame_tab2)
        self.txt_in_tab2.setGeometry(QtCore.QRect(230, 20, 671, 101))
        font = QtGui.QFont()
        font.setPointSize(36)
        self.txt_in_tab2.setFont(font)
        self.txt_in_tab2.setObjectName("txt_in_tab2")

        self.qr_color_comboBox_tab2 = QtWidgets.QComboBox(self.main_frame_tab2)
        self.qr_color_comboBox_tab2.setGeometry(QtCore.QRect(380, 150, 381, 51))
        self.qr_color_comboBox_tab2.setObjectName("qr_color_comboBox_tab2")
        self.qr_color_comboBox_tab2.addItem("")
        self.qr_color_comboBox_tab2.addItem("")
        self.qr_color_comboBox_tab2.addItem("")
        self.qr_color_comboBox_tab2.addItem("")
        self.qr_color_comboBox_tab2.addItem("")
        self.qr_color_comboBox_tab2.addItem("")
        self.qr_color_comboBox_tab2.addItem("")

        self.set_qr_color_label_tab2 = QtWidgets.QLabel(self.main_frame_tab2)
        self.set_qr_color_label_tab2.setGeometry(QtCore.QRect(120, 150, 251, 51))
        font = QtGui.QFont()
        font.setPointSize(28)
        self.set_qr_color_label_tab2.setFont(font)
        self.set_qr_color_label_tab2.setAlignment(QtCore.Qt.AlignCenter)
        self.set_qr_color_label_tab2.setObjectName("set_qr_color_label_tab2")

        self.tabWidget.addTab(self.Logo_QRCode_tab2, "")

        MainWindow.setCentralWidget(self.centralwidget)

        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1032, 23))
        self.menubar.setObjectName("menubar")

        self.menuOptions = QtWidgets.QMenu(self.menubar)
        self.menuOptions.setObjectName("menuOptions")

        self.menuSettings = QtWidgets.QMenu(self.menuOptions)
        self.menuSettings.setObjectName("menuSettings")

        self.menuAccess_Folders = QtWidgets.QMenu(self.menuOptions)
        self.menuAccess_Folders.setObjectName("menuAccess_Folders")

        MainWindow.setMenuBar(self.menubar)
        
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        font = QtGui.QFont()
        font.setPointSize(19)
        font.setBold(True)
        self.statusbar.setFont(font)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        
        self.actionChange_path = QtWidgets.QAction(MainWindow)
        self.actionChange_path.setObjectName("actionChange_path")
        
        self.actionAccess_Collection_folder = QtWidgets.QAction(MainWindow)
        self.actionAccess_Collection_folder.setObjectName("actionAccess_Collection_folder")
        
        self.actionAccess_Text_genarated_QR_codes = QtWidgets.QAction(MainWindow)
        self.actionAccess_Text_genarated_QR_codes.setObjectName("actionAccess_Text_genarated_QR_codes")
         
        self.actionAccess_Logs_folder = QtWidgets.QAction(MainWindow)    
        self.actionAccess_Logs_folder.setObjectName("actionAccess_Logs_folder")

        self.actionOpen_log_file = QtWidgets.QAction(MainWindow)
        
        self.actionOpen_log_file.setObjectName("actionOpen_log_file")
        self.actionAccess_logo_generated_QR_codes = QtWidgets.QAction(MainWindow)
        
        self.actionAccess_logo_generated_QR_codes.setObjectName("actionAccess_logo_generated_QR_codes")
        self.menuSettings.addAction(self.actionChange_path)
        
        self.menuAccess_Folders.addAction(self.actionAccess_Collection_folder)

        self.menuAccess_Folders.addSeparator()

        self.menuAccess_Folders.addAction(self.actionAccess_Text_genarated_QR_codes)

        self.menuAccess_Folders.addSeparator()

        self.menuAccess_Folders.addAction(self.actionAccess_logo_generated_QR_codes)

        self.menuAccess_Folders.addSeparator()

        self.menuAccess_Folders.addAction(self.actionAccess_Logs_folder)

        self.menuOptions.addAction(self.menuSettings.menuAction())

        self.menuOptions.addSeparator()

        self.menuOptions.addAction(self.menuAccess_Folders.menuAction())

        self.menuOptions.addSeparator()

        self.menuOptions.addAction(self.actionOpen_log_file)

        self.menubar.addAction(self.menuOptions.menuAction())

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


        # GUI label Color - Text into QR Code (Tab 1)
        # Input Label
        self.input_label_tab1.setStyleSheet("background-color : black; color: white")
        # Select QR Color
        self.set_qr_color_label_tab1.setStyleSheet("background-color : brown; color: white")

        # GUI label Color - Text into QR Code with logo (Tab 2)
        # Input Label
        self.input_label_tab2.setStyleSheet("background-color : black; color: white")
        # Select QR Color
        self.set_qr_color_label_tab2.setStyleSheet("background-color : brown; color: white")

        # GUI Txt input Color - Text into QR Code (Tab 1)
        self.txt_in_tab1.setStyleSheet("color: black")

        # GUI Txt input Color - Text into QR Code with logo (Tab 2)
        self.txt_in_tab2.setStyleSheet("color: black")

        # GUI button colors - Text into QR Code (Tab 1)
        # -> Generate button
        self.qrcode_gen_button_tab1.setStyleSheet("background-color : green; color: white")
        
        # -> Reset button
        self.reset_button4_tab1.setStyleSheet("background-color : yellow; color: black")
        
        # -> Exit button
        self.exit_button3_tab1.setStyleSheet("background-color : red; color: white")
        
        # -> Access folder button
        self.access_button6_tab1.setStyleSheet("background-color : blue; color: white")

        # GUI button colors - Text into QR Code with Logo (Tab 2)
        # -> Generate button
        self.qrcode_gen_button_tab2.setStyleSheet("background-color : green; color: white")
        
        # -> Reset button
        self.reset_button4_tab2.setStyleSheet("background-color : yellow; color: black")
        
        # -> Exit button
        self.exit_button3_tab2.setStyleSheet("background-color : red; color: white")
        
        # -> Access folder button
        self.access_button6_tab2.setStyleSheet("background-color : blue; color: white")
 
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", app_title))

        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Text_to_QRCode_tab1), _translate("MainWindow", "Text into QR Code")) 
        self.Text_to_QRCode_tab1.setStatusTip(_translate("MainWindow", r"Generate QR Code for a text\link."))    

        self.input_label_tab1.setText(_translate("MainWindow", "Input:"))
        self.txt_in_tab1.setToolTip(_translate("MainWindow", r"Please type your text\url here."))

        self.set_qr_color_label_tab1.setText(_translate("MainWindow", "Set QR Colors:"))
        self.qr_color_comboBox_tab1.setItemText(0, _translate("MainWindow", "Black"))
        self.qr_color_comboBox_tab1.setItemText(1, _translate("MainWindow", "Red"))
        self.qr_color_comboBox_tab1.setItemText(2, _translate("MainWindow", "Green"))
        self.qr_color_comboBox_tab1.setItemText(3, _translate("MainWindow", "Yellow"))
        self.qr_color_comboBox_tab1.setItemText(4, _translate("MainWindow", "Brown"))
        self.qr_color_comboBox_tab1.setItemText(5, _translate("MainWindow", "Pink"))
        self.qr_color_comboBox_tab1.setItemText(6, _translate("MainWindow", "Blue"))

        self.qrcode_gen_button_tab1.setText(_translate("MainWindow", "Generate"))
        self.qrcode_gen_button_tab1.setStatusTip(_translate("MainWindow", "Click here to generate text or link into a QR Code. (Press Enter)"))
        self.qrcode_gen_button_tab1.setShortcut(_translate("MainWindow", "Return"))
        self.qrcode_gen_button_tab1.clicked.connect(self.text_to_qrcode_maker)

        self.exit_button3_tab1.setText(_translate("MainWindow", "Exit"))
        self.exit_button3_tab1.setStatusTip(_translate("MainWindow", "Click here to exit. (Press Esc)"))
        self.exit_button3_tab1.setShortcut(_translate("MainWindow", "Esc"))
        self.exit_button3_tab1.clicked.connect(self.exit)

        self.reset_button4_tab1.setText(_translate("MainWindow", "Reset"))
        self.reset_button4_tab1.setStatusTip(_translate("MainWindow", "Click here to clear values. (Ctrl+Z)"))
        self.reset_button4_tab1.setShortcut(_translate("MainWindow", "Ctrl+Z"))
        self.reset_button4_tab1.clicked.connect(self.reset)

        self.access_button6_tab1.setText(_translate("MainWindow", "Access"))
        self.access_button6_tab1.setStatusTip(_translate("MainWindow", "Click here to open collections folder. (Ctrl+O)"))
        self.access_button6_tab1.clicked.connect(self.open_collection_folder)

        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Logo_QRCode_tab2), _translate("MainWindow", "Text into QR Code with logo"))
        self.Logo_QRCode_tab2.setStatusTip(_translate("MainWindow", r"Generate QR Code for a text\url with logo on top."))

        self.input_label_tab2.setText(_translate("MainWindow", "Input:"))
        self.txt_in_tab2.setToolTip(_translate("MainWindow", r"Please type your text\url here."))

        self.set_qr_color_label_tab2.setText(_translate("MainWindow", "Set QR Colors:"))       
        self.qr_color_comboBox_tab2.setItemText(0, _translate("MainWindow", "Black"))
        self.qr_color_comboBox_tab2.setItemText(1, _translate("MainWindow", "Red"))
        self.qr_color_comboBox_tab2.setItemText(2, _translate("MainWindow", "Green"))
        self.qr_color_comboBox_tab2.setItemText(3, _translate("MainWindow", "Yellow"))
        self.qr_color_comboBox_tab2.setItemText(4, _translate("MainWindow", "Brown"))
        self.qr_color_comboBox_tab2.setItemText(5, _translate("MainWindow", "Pink"))
        self.qr_color_comboBox_tab2.setItemText(6, _translate("MainWindow", "Blue"))

        self.qrcode_gen_button_tab2.setText(_translate("MainWindow", "Generate"))
        self.qrcode_gen_button_tab2.setStatusTip(_translate("MainWindow", "Click here to generate a QR Code with logo. (Press Enter)"))
        self.qrcode_gen_button_tab2.setShortcut(_translate("MainWindow", "Return"))
        self.qrcode_gen_button_tab2.clicked.connect(self.text_to_qrcode_w_logo_maker)

        self.exit_button3_tab2.setText(_translate("MainWindow", "Exit"))
        self.exit_button3_tab2.setStatusTip(_translate("MainWindow", "Click here to exit. (Press Esc)"))
        self.exit_button3_tab2.setShortcut(_translate("MainWindow", "Esc"))
        self.exit_button3_tab2.clicked.connect(self.exit)

        self.reset_button4_tab2.setText(_translate("MainWindow", "Reset"))
        self.reset_button4_tab2.setStatusTip(_translate("MainWindow", "Click here to clear values. (Ctrl+Z)"))
        self.reset_button4_tab2.setShortcut(_translate("MainWindow", "Ctrl+Z"))
        self.reset_button4_tab2.clicked.connect(self.reset)
        
        self.access_button6_tab2.setText(_translate("MainWindow", "Access"))
        self.access_button6_tab2.setStatusTip(_translate("MainWindow", "Click here to open collections folder. (Ctrl+O)"))
        self.access_button6_tab2.clicked.connect(self.open_collection_folder)

        self.menuOptions.setTitle(_translate("MainWindow", "Options"))

        self.menuSettings.setTitle(_translate("MainWindow", "Settings"))
        self.actionChange_path.setText(_translate("MainWindow", "Change path"))
        self.actionChange_path.setShortcut(_translate("MainWindow", "Ctrl+P"))
        self.actionChange_path.triggered.connect(self.change_path)

        self.menuAccess_Folders.setTitle(_translate("MainWindow", "Access Folders"))
        self.actionAccess_Collection_folder.setText(_translate("MainWindow", "Access Collection folder"))
        self.actionAccess_Collection_folder.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.actionAccess_Collection_folder.triggered.connect(self.open_collection_folder)

        self.actionAccess_Text_genarated_QR_codes.setText(_translate("MainWindow", "Access text genarated QR codes"))
        self.actionAccess_Text_genarated_QR_codes.triggered.connect(self.open_qrcodes_texts_folder)
 
        self.actionAccess_logo_generated_QR_codes.setText(_translate("MainWindow", "Access text generated QR codes with logo"))
        self.actionAccess_logo_generated_QR_codes.triggered.connect(self.open_qrcodes_w_logos_folder)

        self.actionAccess_Logs_folder.setText(_translate("MainWindow", "Access Logs folder"))
        self.actionAccess_Logs_folder.triggered.connect(self.open_log_folder)

        self.actionOpen_log_file.setText(_translate("MainWindow", "Open log file"))

    def icon_fls(self):
        for file in os.listdir(cdir):
    
            # print(file)
            
            if '.ico' in file:
                try:
                    icon_flpath =os.path.join(cdir,file)
                    return icon_flpath
                except OSError:
                    pass
            else:
                pass

    def msg_autoClose(self,msg_title,msg_text,close_tmr,msg_icon):

        qm = QMessageBox()
        qm.setIcon(msg_icon)
        qm.setWindowTitle(msg_title+"       ")
        qm.setText(msg_text+"                ")
        qm.setStandardButtons(QMessageBox.Ok)
        QTimer.singleShot(close_tmr*1000,lambda : qm.done(0))
        qm.setFixedWidth(1800+len(msg_text))
        qm.setFixedHeight(1755+len(msg_text))
        qm.exec_()

    def apps_log_sys(self,logerr_msg,err_msgtitle,err_msgtxt):
        try:
            os.makedirs(logs_folder_path)
        except OSError:
            pass
        # logs_folder_path = os.path.join(logdirs6_path,log_dirname6)
        log_err = f"\n<{dt_date}\{dt_time}> , Error: {str(logerr_msg)}\n<________________________________________>\n"
        self.msg_autoClose(msg_text=f"Error cause: \n{str(err_msgtxt)} .                      ",msg_title=err_msgtitle,close_tmr=4,msg_icon=QMessageBox.Critical)
        
        with open(logfl_path,"a",encoding="utf-8") as logfl_w6:
            logfl_w6.writelines(log_err)

    def save_json(self,json_flpath1,keys1,val1):
        infos = {
            keys1: str(val1)

                            }
        with open(json_flpath1,'w') as json_fl_w:
            json.dump(infos,json_fl_w)
        # print("\n-> Json saved.")

    def read_json(self,json_flpath2,keys2):
        with open(json_flpath2,'r') as json_fl_r2:
                
            data = json_fl_r2.read()

            infos_v = json.loads(data)[keys2]

            return infos_v
        # print("\n-> Read json")

    def update_json(self,json_flpath2,keys3,info3,msg_txt3,msg_title3):
        with open(json_flpath2,'r') as json_data_r:
            json_src_data = json.load(json_data_r)

            json_src_data[keys3] = info3

            with open(json_flpath2,'w') as json_fl_w:
                json.dump(json_src_data,json_fl_w)

        self.msg_autoClose(msg_text=msg_txt3,msg_title=msg_title3,close_tmr=3,msg_icon=QMessageBox.Information)
        # print("\n-> Json updated.")

    def save_path_json(self):

        if os.path.exists(paths_datas_json_file_path)==False:
            dir_dialog_title = f"Please choose folder (or directory) to hold '{collections_folder_name}' folder:" 
            dir_dlgbox = QtWidgets.QFileDialog.getExistingDirectory(self, caption=dir_dialog_title)
           
            if dir_dlgbox:

                usr_rt_v = dir_dlgbox.replace("/","\\")
                self.save_json(json_flpath1=paths_datas_json_file_path,keys1=path_json_flkey,val1=str(usr_rt_v))
            else:
                pass
        else:
            pass
        # print("\n-> Path Json saved.")

    def foldershortcut_maker_dt(self,paths,folder_name):

        for n in range(0,len(paths),1):
            try:
                os.makedirs(paths[n])
            except OSError:
                pass

            if n==0:

                ''' Make 'AppName' shortcut '''
                desktop = winshell.desktop()
                lnkfl_path = os.path.join(desktop, '{} - Shortcut.lnk'.format(folder_name))

                if os.path.exists(lnkfl_path) == False:

                    target = paths[n]
                    wDir = paths[n]
                    shell = Dispatch('WScript.Shell')
                    shortcut = shell.CreateShortCut(lnkfl_path)
                    shortcut.Targetpath = target
                    shortcut.WorkingDirectory = wDir
                    shortcut.save()
                else:
                    pass
            else:
                pass
        # pass
    
    def get_paths_json(self):
        self.save_path_json()
        
        if os.path.exists(paths_datas_json_file_path)==True:
            returned_path_data = self.read_json(json_flpath2=paths_datas_json_file_path,keys2=path_json_flkey)

            # Variable collection folder path
            app_collection_folder_path = os.path.join(returned_path_data, collections_folder_name)

            # -> Year-Month-Date folders for Text QR Codes folder - TAB 1

            # Text\url QR codes folder
            txt_url_qrcode_folder_path1_tab1 = os.path.join(app_collection_folder_path,txt_url_qrcode_folder_name)

            # Variable current years folder path
            now_yrs_sub_folder_path1_tab1 = os.path.join(txt_url_qrcode_folder_path1_tab1, dt_yyyy)

            # Variable now months number-month sub folder
            now_mnthsno_months_path1_tab1 = os.path.join(now_yrs_sub_folder_path1_tab1, dt_mnthsno_mnths)

            # Variable current date folder path
            now_date_sub_folder_path1_tab1 = os.path.join(now_mnthsno_months_path1_tab1, dt_date)

            # -> Year-Month-Date folders for Text QR Codes with logo folder - TAB 2

            # Text\url QR codes folder
            txt_url_qrcode_w_logo_folder_path2_tab2 = os.path.join(app_collection_folder_path,txt_url_qrcode_w_logo_folder_name)

            # Variable current years folder path
            now_yrs_sub_folder_path2_tab2 = os.path.join(txt_url_qrcode_w_logo_folder_path2_tab2, dt_yyyy)

            # Variable now months number-month sub folder
            now_mnthsno_months_path2_tab2 = os.path.join(now_yrs_sub_folder_path2_tab2, dt_mnthsno_mnths)

            # Variable current date folder path
            now_date_sub_folder_path2_tab2 = os.path.join(now_mnthsno_months_path2_tab2, dt_date)

            # Path lists
            path_lsts = [app_collection_folder_path,txt_url_qrcode_folder_path1_tab1,txt_url_qrcode_w_logo_folder_path2_tab2,now_yrs_sub_folder_path1_tab1,now_yrs_sub_folder_path2_tab2,now_mnthsno_months_path1_tab1,now_mnthsno_months_path2_tab2,now_date_sub_folder_path1_tab1,now_date_sub_folder_path2_tab2]

            self.foldershortcut_maker_dt(paths=path_lsts, folder_name=collections_folder_name)

            return app_collection_folder_path, now_date_sub_folder_path1_tab1, now_date_sub_folder_path2_tab2

        else:
            return None , None , None

    def logo_pic_chooser(self):
        fl_dialog_title = "Choose image file to be set as QR Code logo."

        wild_cards = "All Files (*);;JPEG (*.jpeg);;PNG (*.png))"
    
        # file_enc1 , check_enc1 = QFileDialog.getOpenFileName(self, "Choose file to be encrypted:","", "All Files (*);;Notepad (*.txt);;JPEG (*.jpeg);;PNG (*.png);; Mp3 (*.mp3);;MP4 (*.mp4);;Microsoft Word Document (*.docx)")
        logo_img_choosen2 , clicked2 = QtWidgets.QFileDialog.getOpenFileName(self, fl_dialog_title,"", wild_cards)

        return logo_img_choosen2 , clicked2

    def text_to_qrcode_maker(self):
        returned_app_collection_folder_path, returned_now_date_sub_folder_path1_tab1, returned_now_date_sub_folder_path2_tab2 = self.get_paths_json()
        if returned_now_date_sub_folder_path1_tab1 !=None:
            # print("\n-> Text QR Code made.")

            txt_val1_tab1 = self.txt_in_tab1.toPlainText()

            color_selected_val2_tab1 = self.qr_color_comboBox_tab1.currentText()

            if txt_val1_tab1 !="":
                try:
                    # Error correction code with level H (Approx 30%)
                    QRcode = qrcode.QRCode(error_correction=qrcode.constants.ERROR_CORRECT_H)
            
                    # adding URL or text to QRcode
                    QRcode.add_data(txt_val1_tab1)

                    # generating QR code
                    QRcode.make()
                    
                    # adding color to QR code
                    QRimg = QRcode.make_image(fill_color=color_selected_val2_tab1, back_color="white").convert('RGB')

                    # save the QR code generated   
                    QR_fl1 = '{0}_QR-Color{1}.png'.format(txt_val1_tab1,color_selected_val2_tab1)
                    QR_fl_path1 = os.path.join(returned_now_date_sub_folder_path1_tab1,QR_fl1) 
                    QRimg.save(QR_fl_path1)

                    self.msg_autoClose(msg_title="Text into QR code generation info - Success",msg_text=f"'{txt_val1_tab1}' text QR code successfully generated.                                                ",close_tmr=3,msg_icon=QMessageBox.Information)
                except Exception as generic_err:
                    self.apps_log_sys(logerr_msg=str(generic_err),err_msgtitle="Generic Error:",err_msgtxt=str(generic_err))
            else:
                # self.txt_in_tab1.clear()
                # self.qr_color_comboBox_tab1.setCurrentText("Black")

                self.apps_log_sys(logerr_msg="Empty values are not accepted",err_msgtitle="Input invalid - Empty value found:",err_msgtxt="Empty value are not accepted")
        else:
            pass
        
    def text_to_qrcode_w_logo_maker(self):
        returned_app_collection_folder_path, returned_now_date_sub_folder_path1_tab1, returned_now_date_sub_folder_path2_tab2 = self.get_paths_json()

        if returned_now_date_sub_folder_path2_tab2 !=None:
            
            txt_val2_tab2 = self.txt_in_tab2.toPlainText()

            color_selected_val2_tab2 = self.qr_color_comboBox_tab2.currentText()

            if txt_val2_tab2 != "":

                returned_logo_img_choosen2 , returned_clicked2 = self.logo_pic_chooser()

                if returned_clicked2:

                    try:

                        # Read the image choosen as QR code logo
                        logo = Image.open(returned_logo_img_choosen2)

                        # taking base width
                        basewidth = 100

                        # adjust image size
                        wpercent = (basewidth/float(logo.size[0]))
                        hsize = int((float(logo.size[1])*float(wpercent)))
                        logo_resized = logo.resize((basewidth, hsize), Image.ANTIALIAS)

                        # Error correction code with level H (Approx 30%)
                        QRcode3 = qrcode.QRCode(error_correction=qrcode.constants.ERROR_CORRECT_H)

                        # adding URL or text to QRcode
                        QRcode3.add_data(txt_val2_tab2)

                        # generating QR code
                        QRcode3.make()

                        # adding color to QR code
                        QRimg = QRcode3.make_image(fill_color=color_selected_val2_tab2, back_color="white").convert('RGB')

                        # set position of QR code logo
                        pos = ((QRimg.size[0] - logo.size[0]) // 2,(QRimg.size[1] - logo.size[1]) // 2)
                        QRimg.paste(logo_resized, pos)

                        # save the QR code generated
                        QR_fl2 = '{0}_QR-Color{1}.png'.format(txt_val2_tab2,color_selected_val2_tab2)
                        QR_fl_path2 = os.path.join(returned_now_date_sub_folder_path2_tab2,QR_fl2) 
                        QRimg.save(QR_fl_path2)
                        
                        logo.close()

                        self.msg_autoClose(msg_title="Text into QR code generation with logo info - Success",msg_text=f"'{txt_val2_tab2}' text QR code successfully generated with logo.                                                ",close_tmr=3,msg_icon=QMessageBox.Information)
                    except Exception as generic_err:
                        self.apps_log_sys(logerr_msg=str(generic_err),err_msgtitle="Generic Error:",err_msgtxt=str(generic_err))
                
                else:
                    pass
        
            else:
                # self.txt_in_tab2.clear()
                # self.qr_color_comboBox_tab2.setCurrentText("Black")
        
                self.apps_log_sys(logerr_msg="Empty values are not accepted",err_msgtitle="Input invalid - Empty value found:",err_msgtxt="Empty value are not accepted")
        else:
            pass

    def open_logfl(self):
        try:
            os.makedirs(logs_folder_path)
        except OSError:
            pass

        if os.path.exists(logfl_path)==False:
            with open(logfl_path,'w',encoding="utf-8") as logfl_w2:
                logfl_w2.writable()
        else:
            pass
        
        os.startfile(logfl_path)
        # print("\n-> Open log file.")

    def open_log_folder(self):
        try:
            os.makedirs(logs_folder_path)
        except OSError:
            pass

        os.startfile(logs_folder_path)

        # print("\n-> Open log folder.")

    def open_collection_folder(self):
        returned_app_collection_folder_path, returned_now_date_sub_folder_path1, returned_now_date_sub_folder_path2 = self.get_paths_json()

        if returned_app_collection_folder_path !=None:
            os.startfile(returned_app_collection_folder_path)
            # print("\n-> Open collection folder")
        else:
            pass

    def open_qrcodes_texts_folder(self):
        returned_app_collection_folder_path, returned_now_date_sub_folder_path1_tab1, returned_now_date_sub_folder_path2_tab2 = self.get_paths_json()
        if returned_now_date_sub_folder_path1_tab1 !=None:
            files_count1_tab1 = len(os.listdir(returned_now_date_sub_folder_path1_tab1))

            if files_count1_tab1 != 0:
                os.startfile(returned_now_date_sub_folder_path1_tab1)
                # print("\n-> Open QR codes: Texts.")
            else:
                self.apps_log_sys(logerr_msg=f"No QR Code files found in the directory '{returned_now_date_sub_folder_path1_tab1}'",err_msgtitle="Access denied - No QR Codes generated",err_msgtxt="Cannot access as there are no QR Code files generated")
        else:
            pass

    def open_qrcodes_w_logos_folder(self):
        returned_app_collection_folder_path, returned_now_date_sub_folder_path1_tab1, returned_now_date_sub_folder_path2_tab2 = self.get_paths_json()

        if returned_now_date_sub_folder_path2_tab2 !=None:
            files_count2_tab2 = len(os.listdir(returned_now_date_sub_folder_path2_tab2))

            if files_count2_tab2 != 0:
                os.startfile(returned_now_date_sub_folder_path2_tab2)
                # print("\n-> Open QR Codes: Logos")
            else:
                self.apps_log_sys(logerr_msg=f"No QR Code files found in the directory '{returned_now_date_sub_folder_path2_tab2}'",err_msgtitle="Access denied - No QR Codes generated",err_msgtxt="Cannot access as there are no QR Code files generated")
        else:
            pass


    def change_path(self):

        if os.path.exists(paths_datas_json_file_path)==True:
            dir_dialog_title = "Please choose a folder (or directory) to be changed:"
            
            chngdir_dlgbox = QtWidgets.QFileDialog.getExistingDirectory(self, caption=dir_dialog_title)
            
            if chngdir_dlgbox:

                usr_chng_rt_v = chngdir_dlgbox.replace("/","\\")

                self.update_json(json_flpath2=paths_datas_json_file_path,keys3=path_json_flkey,info3=usr_chng_rt_v,msg_title3="Path update - Complete:",msg_txt3="Path changed successfully.      ")
 
            else:
                pass

        else:
            self.save_path_json()
        
        # self.update_json()

    def yn_msgbox(self,txt5,title5,msg_icon):

        yn_msg = QMessageBox()

        yn_msg.setIcon(msg_icon)

        yn_msg.setIcon(QMessageBox.Warning)

        yn_msg.setText(txt5)
      
        yn_msg.setWindowTitle(title5)
              
        yn_msg.setStandardButtons(QMessageBox.Yes | QMessageBox.No)

        msg_button_out = yn_msg.exec()

        return msg_button_out

    def exit(self):
        returned_msg_outs = self.yn_msgbox(txt5="Are you sure you want to exit the app?",title5="Exit -Yes/No:",msg_icon=QMessageBox.Warning)

        if returned_msg_outs == QMessageBox.No:
            pass
        elif returned_msg_outs == QMessageBox.Yes:
            # app = QtWidgets.QApplication(sys.argv)
            # sys.exit(app.exec_())
            sys.exit()
        else:
            pass
        # print("\n-> Exited.")

    def reset(self):
        self.txt_in_tab1.clear()
        self.txt_in_tab2.clear()
   
        self.qr_color_comboBox_tab1.setCurrentText("Black")
        self.qr_color_comboBox_tab2.setCurrentText("Black")
 
        # print("\n-> Rested.")

if __name__ == "__main__":
    StyleSheet = '''
        
        QTabWidget::pane {
            border: 1px solid black;
            padding: 2px;   
            margin:  1px;
            background-color : rgb(33, 192, 162);
        }
        QTabBar {
            border: 0px solid black;
            color: black;
             
        }
        QTabBar::tab:top:selected {
            color: white;
            background-color:blue;
        }
        QComboBox{font-size: 19pt; }
    
        '''
    app = QtWidgets.QApplication(sys.argv)
    app.setStyleSheet(StyleSheet)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
