# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'V2A--C_ISA.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QWidget , QInputDialog , QLineEdit ,  QListWidget
import os
import json
import winshell
from win32com.client import Dispatch 
from PySide2.QtCore import QTimer
from PySide2.QtWidgets import QApplication , QMessageBox
import time 
import datetime
import sys
import random
import string
from moviepy.video.io.VideoFileClip import VideoFileClip
import shutil
from playsound import playsound# for playing audio files
import music_tag
'''Source files'''
cfile_path = os.path.realpath(__file__)
# cdir = os.path.dirname(cfile_path)# curent working directory or the 'Now'-location of the file.

# Get file name & extension
cfl_name , cfl_extnts = os.path.splitext(os.path.basename(cfile_path))

cdir = os.getcwd()

# Random String
rand_str = ''.join(random.choices(string.ascii_letters, k=15))

# Time
dt_clockH = datetime.datetime.now().strftime("%I")

dt_clockM = datetime.datetime.now().strftime("%M")

dt_clockS = datetime.datetime.now().strftime("%S")

dt_clockMS = datetime.datetime.now().strftime("%f")

epoch_miliseconds = int(time.time() * 1000)

dt_TMR = f"{dt_clockH}:{dt_clockM}:{dt_clockS}"

dt_time= f"{dt_clockH}:{dt_clockM}"

dt_DN = datetime.datetime.now().strftime('%p').lower()

# Date
dt_dd = datetime.datetime.now().strftime("%d")

dt_mm = datetime.datetime.now().strftime("%m")

dt_yyyy = datetime.datetime.now().strftime("%Y")

dt_wdys = datetime.datetime.now().strftime("%A").lower()

dt_mnths = datetime.datetime.now().strftime("%B")

dt_mnths_no = datetime.datetime.now().strftime("%m")

dt_date = f"{dt_dd}-{dt_mm}-{dt_yyyy}"

dt_mnthsno_mnths = f"{dt_mnths_no}-{dt_mnths}"

# Log folder details
log_dirname = "Logs"
logs_folder_path = os.path.join(cdir,log_dirname)

# Log file details
logfl_name = f"Log_{dt_date}"
log_fl = f"{logfl_name}.log"
logfl_path = os.path.join(logs_folder_path,log_fl)

# App path Json files details
paths_json_name = 'path_datas'

path_json_flkey = "path"

paths_json_file = '{}.json'.format(paths_json_name)

paths_datas_json_file_path = os.path.join(cdir, paths_json_file)

# App formats Json files details
l1 = [".avi",".mkv",".mp4"]

filter_json_flkey = "vid_formats"

filter_json_name = 'filter_vid_fls_datas'

filter_json_file = '{}.json'.format(filter_json_name)

filter_vid_datas_json_file_path = os.path.join(cdir, filter_json_file)

# Audio folder with app name
main_mp3s_folder_name = 'Video 2 Audio Converter [I.S.A]'

audio_app_folder_name = '{} audios'.format(main_mp3s_folder_name)
# audio_app_folder_name = '{} audios'.format(cfl_name)

# App title
app_title = "Video 2 Audio: The Converter [Improved.Simplified.Alternative]"

class Ui_MainWindow(QWidget):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(764, 619)

        # Set APP BG 
        self.palette = QtGui.QPalette()
        self.brush = QtGui.QBrush(QtGui.QColor(33, 192, 162))
        self.brush.setStyle(QtCore.Qt.SolidPattern)
        self.palette.setBrush(QtGui.QPalette.Window, self.brush)
        MainWindow.setPalette(self.palette)

        # Set app icon
        returned_icofl_path = self.icon_fls()
        MainWindow.setWindowIcon(QtGui.QIcon(returned_icofl_path)) 

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.select_mode_label = QtWidgets.QLabel(self.centralwidget)
        self.select_mode_label.setGeometry(QtCore.QRect(50, 100, 211, 61))

        font = QtGui.QFont()
        font.setPointSize(25)
        self.select_mode_label.setFont(font)
        self.select_mode_label.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.select_mode_label.setAlignment(QtCore.Qt.AlignCenter)
        self.select_mode_label.setObjectName("select_mode_label")

        self.mode_comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.mode_comboBox.setGeometry(QtCore.QRect(270, 100, 391, 61))
        font = QtGui.QFont()
        font.setPointSize(28)
        self.mode_comboBox.setFont(font)
        self.mode_comboBox.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.mode_comboBox.setToolTipDuration(-1)
        self.mode_comboBox.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.mode_comboBox.setObjectName("mode_comboBox")
        self.mode_comboBox.addItem("")
        self.mode_comboBox.addItem("")

        self.convert_btn = QtWidgets.QPushButton(self.centralwidget)
        self.convert_btn.setGeometry(QtCore.QRect(80, 250, 221, 101))
        font = QtGui.QFont()
        font.setPointSize(28)
        self.convert_btn.setFont(font)
        self.convert_btn.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.convert_btn.setObjectName("convert_btn")

        self.reset_btn_2 = QtWidgets.QPushButton(self.centralwidget)
        self.reset_btn_2.setGeometry(QtCore.QRect(460, 250, 221, 101))
        font = QtGui.QFont()
        font.setPointSize(28)
        self.reset_btn_2.setFont(font)
        self.reset_btn_2.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.reset_btn_2.setObjectName("reset_btn_2")

        self.exit_btn_3 = QtWidgets.QPushButton(self.centralwidget)
        self.exit_btn_3.setGeometry(QtCore.QRect(80, 420, 221, 101))
        font = QtGui.QFont()
        font.setPointSize(28)
        self.exit_btn_3.setFont(font)
        self.exit_btn_3.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.exit_btn_3.setObjectName("exit_btn_3")

        self.playmp3_btn_4 = QtWidgets.QPushButton(self.centralwidget)
        self.playmp3_btn_4.setGeometry(QtCore.QRect(460, 420, 221, 101))
        font = QtGui.QFont()
        font.setPointSize(28)
        self.playmp3_btn_4.setFont(font)
        self.playmp3_btn_4.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.playmp3_btn_4.setObjectName("playmp3_btn_4")

        MainWindow.setCentralWidget(self.centralwidget)

        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 765, 23))
        self.menubar.setObjectName("menubar")

        self.menuOptions = QtWidgets.QMenu(self.menubar)
        self.menuOptions.setObjectName("menuOptions")

        self.menuSettings = QtWidgets.QMenu(self.menuOptions)
        self.menuSettings.setObjectName("menuSettings")

        self.menuOpen_folders = QtWidgets.QMenu(self.menuOptions)
        self.menuOpen_folders.setObjectName("menuOpen_folders")

        MainWindow.setMenuBar(self.menubar)


        font = QtGui.QFont()
        font.setPointSize(19)
        font.setBold(True)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setFont(font)
        self.statusbar.setObjectName("statusbar")

        MainWindow.setStatusBar(self.statusbar)

        self.actionChange_path = QtWidgets.QAction(MainWindow)
        self.actionChange_path.setObjectName("actionChange_path")

        self.actionUpdate_extenstion_filter = QtWidgets.QAction(MainWindow)
        self.actionUpdate_extenstion_filter.setObjectName("actionUpdate_extenstion_filter")
        
        self.actionOpen_audios_folder = QtWidgets.QAction(MainWindow)
        self.actionOpen_audios_folder.setObjectName("actionOpen_audios_folder")
        
        self.actionOpen_logs_folder = QtWidgets.QAction(MainWindow)
        self.actionOpen_logs_folder.setObjectName("actionOpen_logs_folder")
        
        self.actionOpen_log_file = QtWidgets.QAction(MainWindow)
        self.actionOpen_log_file.setObjectName("actionOpen_log_file")
        
        self.menuSettings.addAction(self.actionChange_path)
        
        self.menuSettings.addSeparator()
        
        self.menuSettings.addAction(self.actionUpdate_extenstion_filter)
        
        self.menuOpen_folders.addAction(self.actionOpen_audios_folder)
        
        self.menuOpen_folders.addSeparator()
        
        self.menuOpen_folders.addAction(self.actionOpen_logs_folder)
        
        self.menuOptions.addAction(self.menuSettings.menuAction())
        
        self.menuOptions.addSeparator()
        
        self.menuOptions.addAction(self.menuOpen_folders.menuAction())
        
        self.menuOptions.addSeparator()
        
        self.menuOptions.addAction(self.actionOpen_log_file)
        
        self.menubar.addAction(self.menuOptions.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate

        MainWindow.setWindowTitle(_translate("MainWindow", app_title))
        
        self.mode_comboBox.setToolTip(_translate("MainWindow","Single file - convert one video into audio , Multiple files - convert more than one videos into audios"))

        self.select_mode_label.setText(_translate("MainWindow", "Select mode:"))        
        self.mode_comboBox.setItemText(0, _translate("MainWindow", "Single file"))
        self.mode_comboBox.setItemText(1, _translate("MainWindow", "Multiple files"))

        self.convert_btn.setText(_translate("MainWindow", "Convert"))
        self.convert_btn.setStatusTip(_translate("MainWindow", "Click here to convert videos into audios. (Press Enter)"))
        self.convert_btn.setShortcut(_translate("MainWindow", "Return"))
        self.convert_btn.clicked.connect(self.vid2aud)

        self.reset_btn_2.setText(_translate("MainWindow", "Reset"))
        self.reset_btn_2.setShortcut(_translate("MainWindow", "Ctrl+Z"))
        self.reset_btn_2.setStatusTip(_translate("MainWindow", "Click here to reset values. (Ctrl+Z)"))
        self.reset_btn_2.clicked.connect(self.rst)

        self.exit_btn_3.setText(_translate("MainWindow", "Exit"))
        self.exit_btn_3.setStatusTip(_translate("MainWindow", "Click herre to exit. (Press Esc)"))
        self.exit_btn_3.setShortcut(_translate("MainWindow", "Esc"))
        self.exit_btn_3.clicked.connect(self.exit)

        self.playmp3_btn_4.setText(_translate("MainWindow", "PlayMp3"))
        self.playmp3_btn_4.setStatusTip(_translate("MainWindow", "Click here to play audio files from the audio folder. (Ctrl+M)"))
        self.playmp3_btn_4.setShortcut(_translate("MainWindow","Ctrl+M"))
        self.playmp3_btn_4.clicked.connect(self.play_aud)
        
        self.menuOptions.setTitle(_translate("MainWindow", "Options"))

        self.menuSettings.setTitle(_translate("MainWindow", "Settings"))

        self.actionChange_path.setText(_translate("MainWindow", "Change path"))
        self.actionChange_path.setShortcut(_translate("MainWindow", "Ctrl+P"))
        self.actionChange_path.triggered.connect(self.change_path)

        self.actionUpdate_extenstion_filter.setText(_translate("MainWindow", "Update extenstion filter"))
        self.actionUpdate_extenstion_filter.setShortcut(_translate("MainWindow", "Ctrl+U"))
        self.actionUpdate_extenstion_filter.triggered.connect(self.update_video_extenstion_filter)
                
        self.menuOpen_folders.setTitle(_translate("MainWindow", "Open folders"))

        self.actionOpen_audios_folder.setText(_translate("MainWindow", "Access audios"))
        self.actionOpen_audios_folder.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.actionOpen_audios_folder.triggered.connect(self.open_aud_folder)

        self.actionOpen_logs_folder.setText(_translate("MainWindow", "Open logs folder"))
        self.actionOpen_logs_folder.triggered.connect(self.open_log_folder)

        self.actionOpen_log_file.setText(_translate("MainWindow", "Open log file"))
        self.actionOpen_log_file.setShortcut(_translate("MainWindow", "Ctrl+L"))
        self.actionOpen_log_file.triggered.connect(self.open_log_file)

    # GUI button colors
        # -> Modify button
        self.reset_btn_2.setStyleSheet("background-color : brown; color: white")
        
        # -> Convert button
        self.convert_btn.setStyleSheet("background-color : green; color: white")
        
        # -> PlayMp3 button
        self.playmp3_btn_4.setStyleSheet("background-color : yellow; color: red")
        
        # -> Exit button
        self.exit_btn_3.setStyleSheet("background-color : red; color: white")
 
    # GUI label colors 
        # -> Text label
        self.select_mode_label.setStyleSheet("background-color : black; color: white")

    def icon_fls(self):
        for file in os.listdir(cdir):
    
            # print(file)
            
            if '.ico' in file:
                try:
                    icon_flpath =os.path.join(cdir,file)
                    return icon_flpath
                except OSError:
                    pass
            else:
                pass

    def msg_autoClose(self,msg_title,msg_text,close_tmr,msg_icon):

        qm = QMessageBox()
        qm.setIcon(msg_icon)
        qm.setWindowTitle(msg_title+"           ")
        qm.setText(msg_text+"                         ")
        qm.setStandardButtons(QMessageBox.Ok)
        QTimer.singleShot(close_tmr*1000,lambda : qm.done(0))
        qm.setFixedWidth(1800+len(msg_text))
        qm.setFixedHeight(1755+len(msg_text))
        qm.exec_()

    def apps_log_sys(self,logerr_msg,err_msgtitle,err_msgtxt):
        try:
            os.makedirs(logs_folder_path)
        except OSError:
            pass
        # logs_folder_path = os.path.join(logdirs6_path,log_dirname6)
        log_err = f"\n<{dt_date}\{dt_time}> , Error: {str(logerr_msg)}\n<________________________________________>\n"
        self.msg_autoClose(msg_text=f"Error cause: \n{str(err_msgtxt)} .                      ",msg_title=err_msgtitle,close_tmr=4,msg_icon=QMessageBox.Critical)
        
        with open(logfl_path,"a",encoding="utf-8") as logfl_w6:
            logfl_w6.writelines(log_err)

    def save_json(self,json_flpath1,keys1,val1):

        infos = {
            keys1: val1

                            }
        json_fl_w = open(json_flpath1,'w')
        json.dump(infos,json_fl_w)  
        json_fl_w.close()
        print('file saved')

    def read_json(self,jsonfl_path2,k2):

        with open(jsonfl_path2,'r') as pathjson_fl_r:
            data = pathjson_fl_r.read()

            infos_v = json.loads(data)[k2]

            return infos_v

    def update_json(self,json_flpath3,keys3,info3,msg_txt3,msg_title3):

        with open(json_flpath3,'r') as json_data_r:
            json_src_data = json.load(json_data_r)
 
             
            if 'list' not in str(type(json_src_data[keys3])):

                json_src_data[keys3] = info3

                with open(json_flpath3,'w') as json_fl_w:
                    json.dump(json_src_data,json_fl_w)


                self.msg_autoClose(msg_text=msg_txt3,msg_title=msg_title3,close_tmr=3,msg_icon=QMessageBox.Information)

            else:
                
                lst_feteched_from_json = json_src_data[keys3] 

                if info3 not in lst_feteched_from_json:

                    lst_feteched_from_json.append(str(info3))

                    new_extention_lists = {
                                                keys3: lst_feteched_from_json
                                    }

                    with open(json_flpath3,'w') as json_fl_w:
                        json.dump(new_extention_lists, json_fl_w)

                    self.msg_autoClose(msg_text=msg_txt3,msg_title=msg_title3,close_tmr=3,msg_icon=QMessageBox.Information)
         
                else:
                    self.msg_autoClose(msg_text=f"'{info3}' extension already been added to the lists.",msg_title="Notify - Extension already added",close_tmr=3,msg_icon=QMessageBox.Information)
    
    def change_path(self):

        try:
            dir_dialog_title = f"Please choose folder (or directory) to be changed for '{audio_app_folder_name}' folder:"
            
            chngdir_dlgbox = QFileDialog.getExistingDirectory(self, caption=dir_dialog_title)
            
            if chngdir_dlgbox:

                usr_chng_rt_v = chngdir_dlgbox.replace("/","\\")

                # print(usr_chng_rt_v)

                if os.path.exists(paths_datas_json_file_path)==True:

                    self.update_json(json_flpath3=paths_datas_json_file_path,keys3=path_json_flkey,info3=usr_chng_rt_v,msg_title3="Path update - Complete:",msg_txt3="Path changed successfully.      ")

                    # self.get_paths()
    
                else:

                    self.save_json(json_flpath1=paths_datas_json_file_path,keys1=path_json_flkey,val1=str(usr_chng_rt_v))

                    self.msg_autoClose(msg_text="Path saved.",msg_title="Path update - Complete",close_tmr=2,msg_icon=QMessageBox.Information)

            else:
                pass
        except json.decoder.JSONDecodeError as json_err1:

            self.apps_log_sys(err_msgtitle="Json decode error",err_msgtxt="File can not be read due the json file seems to be curropted",logerr_msg=str(json_err1))

            self.msg_autoClose(msg_title="Notify - Json file recorrection intiated",msg_text="Started to overwite the the json file.",close_tmr=2,msg_icon=QMessageBox.Information)     

            self.overwrite_path_json()

        except KeyError as key_err1:

            self.apps_log_sys(err_msgtitle="Json key error",err_msgtxt="File can not be read due the json file having a wrong key",logerr_msg=str(key_err1))

            self.msg_autoClose(msg_title="Notify - Json file recorection intiated",msg_text="Started to overwite the the json file.",close_tmr=2,msg_icon=QMessageBox.Information)

            self.overwrite_path_json()

        # print("\n-> Path changed")
   
    def update_video_extenstion_filter(self):

        self.save_formats_json()

        if os.path.exists(filter_vid_datas_json_file_path) == True:
            self.enter_extension()            
        else:
            pass
        # print("\n-> Filter updated")
      
    def enter_extension(self):
        while True:
                 
            input2_v4 = QInputDialog(self)
            input2_v4.setWindowTitle("New file extension entry:")
            input2_v4.setLabelText(r"Please type the extension you wish to add\update to existing filter. (eg: mp4)")
             
            input2_v4.setFixedSize(400, 240)

            input2_v4.setStyleSheet(
                            """
                            
                            QLabel{
                                font-size:20px;
                    
                                font-family:Arial;
                            }
                            QLineEdit{
                                font-size:20px;
                                font-family:Arial;
                            }
                            QPushButton{
                                font-size:20px;                         
                            }
                            """
                        )

            okPressed2_v4 = input2_v4.exec_()
            input2_txt_v4 = input2_v4.textValue()

            if okPressed2_v4==True and input2_txt_v4 != '':

                extnts_in = f".{input2_txt_v4.replace('.','')}"

                self.update_json(json_flpath3=filter_vid_datas_json_file_path,keys3=filter_json_flkey,info3=extnts_in,msg_title3="Extension update - Complete:",msg_txt3="Extension added successfully.      ")
            
                break

            elif okPressed2_v4==True and input2_txt_v4 == '':
                self.msg_autoClose(msg_text="Empty value not accepted.",msg_title="Value entry - Inavlid",close_tmr=2,msg_icon=QMessageBox.Critical)
            elif okPressed2_v4==False and input2_txt_v4 == '':
                break
            else:
                break
            
    def save_formats_json(self):
        if os.path.exists(filter_vid_datas_json_file_path) == False:
            self.save_json(json_flpath1=filter_vid_datas_json_file_path,keys1=filter_json_flkey,val1=l1)
        else:
            pass

    def save_path_json(self):
 
        if os.path.exists(paths_datas_json_file_path) == False:
            
            dir_dialog_title = f"Please choose folder (or directory) to hold '{audio_app_folder_name}' folder:" 
            dir_dlgbox = QFileDialog.getExistingDirectory(self, caption=dir_dialog_title)
           
            if dir_dlgbox:

                usr_rt_v = dir_dlgbox.replace("/","\\")

                self.save_json(json_flpath1=paths_datas_json_file_path,keys1=path_json_flkey,val1=str(usr_rt_v))

                self.msg_autoClose(msg_text="Path saved.",msg_title="Path update - Complete",close_tmr=2,msg_icon=QMessageBox.Information)

                #sys.exit()
            else:
                pass
        else:
            pass

    def overwrite_path_json(self):

        dir_dialog_title = f"Please choose folder (or directory) to hold '{audio_app_folder_name}' folder:" 
        dir_dlgbox = QFileDialog.getExistingDirectory(self, caption=dir_dialog_title)
            
        if dir_dlgbox:

            usr_rt_v = dir_dlgbox.replace("/","\\")

            self.save_json(json_flpath1=paths_datas_json_file_path,keys1=path_json_flkey,val1=str(usr_rt_v))

            # self.msg_autoClose(msg_text="Path saved.",msg_title="Path update - Complete",close_tmr=2,msg_icon=QMessageBox.Information)

            #sys.exit()

            self.msg_autoClose(msg_title="Json file recorrection notify - Success",msg_text=f"'{paths_json_file}' json file reseted to default.",close_tmr=2,msg_icon=QMessageBox.Information)

        else:
            pass

    def overwrite_formats_json(self):

        self.save_json(json_flpath1=filter_vid_datas_json_file_path,keys1=filter_json_flkey,val1=l1)

        self.msg_autoClose(msg_title="Json file recorrection notify - Success",msg_text=f"'{filter_json_file}' json file reseted to default.",close_tmr=2,msg_icon=QMessageBox.Information)

        # self.msg_autoClose(msg_title="Notify - Click 'Convert' button",msg_text="Thank you for your patience... Please click the 'Convert' button again.",close_tmr=3,msg_icon=QMessageBox.Information) 
    def get_formats(self):
        self.save_formats_json()

        if os.path.exists(filter_vid_datas_json_file_path)==True:

            returned_formats = self.read_json(jsonfl_path2=filter_vid_datas_json_file_path,k2=filter_json_flkey)

            return returned_formats

        else:
            return None            

    def get_paths(self):
        self.save_path_json()

        if os.path.exists(paths_datas_json_file_path)==True:

            returned_path = self.read_json(jsonfl_path2=paths_datas_json_file_path,k2=path_json_flkey)

            # Variable AppName audio folder path
            app_audio_folder_path = os.path.join(returned_path, audio_app_folder_name)

            # Variable current years folder path
            now_yrs_sub_folder_path = os.path.join(app_audio_folder_path, dt_yyyy)

            # Variable now months number-month sub folder
            now_mnthsno_months = os.path.join(now_yrs_sub_folder_path, dt_mnthsno_mnths)

            # Variable current date folder path
            now_date_sub_folder_path = os.path.join(now_mnthsno_months, dt_date)

            path_lsts = [app_audio_folder_path,now_yrs_sub_folder_path,now_mnthsno_months,now_date_sub_folder_path]

            self.foldershortcut_maker_dt(paths=path_lsts, folder_name=audio_app_folder_name)

            return now_date_sub_folder_path
        else:
            return None

    def foldershortcut_maker_dt(self,paths,folder_name):

        for n in range(0,len(paths),1):
            try:
                os.makedirs(paths[n])
            except OSError:
                pass

            if n==0:

                ''' Make 'AppName' shortcut '''
                desktop = winshell.desktop()
                lnkfl_path = os.path.join(desktop, '{} - Shortcut.lnk'.format(folder_name))

                if os.path.exists(lnkfl_path) == False:

                    target = paths[n]
                    wDir = paths[n]
                    shell = Dispatch('WScript.Shell')
                    shortcut = shell.CreateShortCut(lnkfl_path)
                    shortcut.Targetpath = target
                    shortcut.WorkingDirectory = wDir
                    shortcut.save()
                else:
                    pass
            else:
                pass
        # pass

    def vid2aud(self):

        try:

            # Get mode from the combo box
            mode_selected = self.mode_comboBox.currentText()

            # Get path data from path json file
            returned_path_data = self.get_paths()

            if returned_path_data != None:
                # print(f"\n Values: video name: | mode selected: {mode_selected}")

                if "Single" in mode_selected:
                    self.single_file(path1=returned_path_data)
                else:
                    self.mutiple_file(path2=returned_path_data)
            else:
                pass        

        except json.decoder.JSONDecodeError as json_err1:

            self.apps_log_sys(err_msgtitle="Json decode error",err_msgtxt="File can not be read due the json file seems to be curropted",logerr_msg=str(json_err1))

            self.msg_autoClose(msg_title="Notify - Json file recorrection intiated",msg_text="Started to overwite the the json file.",close_tmr=2,msg_icon=QMessageBox.Information)     

            self.overwrite_path_json()

            self.msg_autoClose(msg_title="Notify - Click 'Convert' button",msg_text="Thank you for your patience... Please try to convert again.",close_tmr=3,msg_icon=QMessageBox.Information) 

        except KeyError as key_err1:

            self.apps_log_sys(err_msgtitle="Json key error",err_msgtxt="File can not be read due the json file having a wrong key",logerr_msg=str(key_err1))

            self.msg_autoClose(msg_title="Notify - Json file recorection intiated",msg_text="Started to overwite the the json file.",close_tmr=2,msg_icon=QMessageBox.Information)

            self.overwrite_path_json()

            self.msg_autoClose(msg_title="Notify - Click 'Convert' button",msg_text="Thank you for your patience... Please try to convert again.",close_tmr=3,msg_icon=QMessageBox.Information) 

    def single_file(self,path1):
        # print("\t-/ Active: Single file")

        fl_dialog_title = "Choose file to be converted into audio (.mp3):"

        wild_cards = "All Files (*);;MP4 (*.mp4);;AVI file (*.avi)"
    
        file1 , check1 = QFileDialog.getOpenFileName(self, fl_dialog_title,"", wild_cards)
        
        if check1:
            
            file1_re = file1.replace("/","\\")

            video_name, video_format = os.path.splitext(os.path.basename(file1_re))

            final_mp3_fl = f"{video_name}.mp3"

            # final_mp4_fl = f"{video_name}.mp4"

            final_mp3_path = os.path.join(path1, final_mp3_fl)
            
            # final_mp4_path = os.path.join(path1,final_mp4_fl)

            final_video_file = f"{video_name}{video_format}"

            final_video_path = os.path.join(path1, final_video_file)

            while True:

                if os.path.exists(final_mp3_path)==True:
                    self.msg_autoClose(msg_text=f"Audio file '{final_mp3_fl}' already exists.",close_tmr=2,msg_title="Notify - Audio exists", msg_icon=QMessageBox.Information)

                    returned_msg_outs = self.yn_msgbox(txt5="Do you wish to delete the audio?",title5="Delte audio - Yes/No?",msg_icon=QMessageBox.Question)

                    if returned_msg_outs == QMessageBox.No:
                        break
                    elif returned_msg_outs == QMessageBox.Yes:
                        os.remove(final_mp3_path)

                        self.msg_autoClose(msg_text=f"Audio file '{final_mp3_fl}' successfully deleted.",close_tmr=2,msg_title="Audio Delete - Success", msg_icon=QMessageBox.Information)
                    else:
                        break   
                else:

                    self.msg_autoClose(msg_text="Started to convert video into audio.",msg_title="Notify - Audio Coversion Started",close_tmr=3,msg_icon=QMessageBox.Information)

                    if "mp4" in video_format:

                        try:

                            my_clip = VideoFileClip(file1_re,audio=True)
                            my_clip.audio.write_audiofile(final_mp3_path)
                            my_clip.close()

                            self.msg_autoClose(msg_text=f"Audio file '{video_name}.mp3' has been successfully been generated", msg_title="Audio Conversion complete:",close_tmr=2,msg_icon=QMessageBox.Information)
                            
                            # Set audio file properties
                            f1 = music_tag.load_file(final_mp3_path)
                            f1['title'] = video_name
                            f1.save()

                            returned_msg_outs = self.yn_msgbox(txt5="Do you wish to play the audio?",title5="Play audio - Yes/No?",msg_icon=QMessageBox.Question)

                            if returned_msg_outs == QMessageBox.No:
                                pass
                            elif returned_msg_outs == QMessageBox.Yes:
                                playsound(final_mp3_path)
                            else:
                                pass

                            break

                        except KeyError:
                            while True:
                                try:
                                    shutil.copyfile(file1_re, final_video_path)
                                    break
                                except shutil.SameFileError:
                                    os.remove(final_video_path)

                            try:
                                os.rename(final_video_path, final_mp3_path)
                            except OSError:
                                pass

                            # Set audio file properties
                            f1 = music_tag.load_file(final_mp3_path)
                            f1['title'] = video_name
                            f1.save()

                            self.msg_autoClose(msg_text=f"Audio file '{video_name}.mp3' has been successfully been generated", msg_title="Audio Conversion complete:",close_tmr=2,msg_icon=QMessageBox.Information)
                        
                            returned_msg_outs = self.yn_msgbox(txt5="Do you wish to play the audio?",title5="Play audio - Yes/No?",msg_icon=QMessageBox.Question)

                            if returned_msg_outs == QMessageBox.No:
                                pass
                            elif returned_msg_outs == QMessageBox.Yes:
                                playsound(final_mp3_fl)
                            else:
                                pass

                            break
                    else:
                        
                        rename_into_mp4_file = final_video_path.replace(video_format, '.mp4')
                        final_mp3_file = rename_into_mp4_file.replace('.mp4', '.mp3')

                        while True:
                            try:
                                shutil.copyfile(file1_re, final_video_path)
                                break
                            except:
                                os.remove(final_video_path)

                        try:
                            os.rename(final_video_path, rename_into_mp4_file)
                        except OSError:
                            pass
                            
                        try:
                            my_clip = VideoFileClip(rename_into_mp4_file)
                            my_clip.audio.write_audiofile(final_mp3_file)
                            my_clip.close()

                            try:
                                os.remove(rename_into_mp4_file)
                            except OSError:
                                pass

                            try:
                                os.remove(final_video_path)
                            except OSError:
                                pass

                            # Set audio file properties
                            f1 = music_tag.load_file(final_mp3_file)
                            f1['title'] = video_name
                            f1.save()

                            self.msg_autoClose(msg_text=f"Audio file '{final_mp3_fl}' has been successfully been generated.", msg_title="Audio Conversion complete:",close_tmr=2,msg_icon=QMessageBox.Information)
                        
                            returned_msg_outs = self.yn_msgbox(txt5="Do you wish to play the audio?",title5="Play audio - Yes/No?",msg_icon=QMessageBox.Question)

                            if returned_msg_outs == QMessageBox.No:
                                pass
                            elif returned_msg_outs == QMessageBox.Yes:
                                playsound(final_mp3_file)
                            else:
                                pass   

                            break
                        except KeyError:
                            mp4_to_mp31 = rename_into_mp4_file.replace('.mp4', '.mp3')
                            os.rename(rename_into_mp4_file, mp4_to_mp31)

                            # Set audio file properties
                            f1 = music_tag.load_file(mp4_to_mp31)
                            f1['title'] = video_name
                            f1.save()

                            self.msg_autoClose(msg_text=f"Audio file '{final_mp3_fl}' has been successfully been generated.", msg_title="Audio Conversion complete:",close_tmr=2,msg_icon=QMessageBox.Information)

                            returned_msg_outs = self.yn_msgbox(txt5="Do you wish to play the audio?",title5="Play audio - Yes/No?",msg_icon=QMessageBox.Question)

                            if returned_msg_outs == QMessageBox.No:
                                pass
                            elif returned_msg_outs == QMessageBox.Yes:
                                playsound(mp4_to_mp31)
                            else:
                                pass    

                            break
        
        else:
            pass
    
    def mutiple_file(self,path2):
        # print("\t-/ Active: Multiple file")

        try:
            # Get format data from format jso file
            returned_format_datas = self.get_formats()

            dir_dialog_title = "Choose directory to convert all video files into mp3 file:" 
            dir_dlgbox = QFileDialog.getExistingDirectory(self, caption=dir_dialog_title)
            
            if dir_dlgbox:
                # Get location of a directory\folder
                get_choosen_dir = dir_dlgbox.replace("/","\\")

                # Get path list element count
                file_count = len(os.listdir(get_choosen_dir))

                if file_count != 0:
                    self.msg_autoClose(msg_text="Started to convert videos into audios.",msg_title="Notify - Audio Coversion Started",close_tmr=3,msg_icon=QMessageBox.Information)

                    for file2 in os.listdir(get_choosen_dir):

                        vfl_name , vfl_extnts = os.path.splitext(file2)

                        non_mp3fl_path = os.path.join(get_choosen_dir,file2)

                        # print(non_mp3fl_path)

                        # mp3fl_path = non_mp3fl_path.replace(vfl_extnts,".mp4")

                        final_mp3_fl2 = f"{vfl_name}.mp3"

                        final_mp3_path2 = os.path.join(path2, final_mp3_fl2)

                        final_video_file2 = f"{vfl_name}{vfl_extnts}"

                        final_video_path2 = os.path.join(path2, final_video_file2)

                        if os.path.exists(final_mp3_path2)==True:
                            self.msg_autoClose(msg_text=f"Audio file '{final_mp3_fl2}' already exists.",close_tmr=2,msg_title="Notify - Audio exists", msg_icon=QMessageBox.Information)

                        else:
                            if vfl_extnts not in returned_format_datas:
                                pass
                            else:

                                if ".mp4" in vfl_extnts:
                                    try:
                                        my_clip2 = VideoFileClip(non_mp3fl_path)
                                        my_clip2.audio.write_audiofile(final_mp3_path2)
                                        my_clip2.close()

                                        # Set audio file properties
                                        f2 = music_tag.load_file(final_mp3_path2)
                                        f2['title'] = vfl_name
                                        f2.save()

                                        self.msg_autoClose(msg_text=f"Audio file '{final_mp3_fl2}' has been successfully been generated.", msg_title="Audio Conversion complete:",close_tmr=2,msg_icon=QMessageBox.Information) 
                                        
                                    except KeyError:
                                        while True:
                                            try:
                                                shutil.copyfile(non_mp3fl_path, final_video_path2)
                                                break
                                            except shutil.SameFileError:
                                                os.remove(final_video_path2)

                                        try:
                                            os.rename(final_video_path2, final_mp3_path2)
                                        except OSError:
                                            pass

                                        # Set audio file properties
                                        f2 = music_tag.load_file(final_mp3_path2)
                                        f2['title'] = vfl_name
                                        f2.save()

                                        self.msg_autoClose(msg_text=f"Audio file '{final_mp3_fl2}' has been successfully been generated.", msg_title="Audio Conversion complete:",close_tmr=2,msg_icon=QMessageBox.Information)
                                else:
                        
                                    rename_into_mp4_file2 = final_video_path2.replace(vfl_extnts, '.mp4')
                                    final_mp3_file2 = rename_into_mp4_file2.replace('.mp4', '.mp3')

                                    while True:
                                        try:
                                            shutil.copyfile(non_mp3fl_path, final_video_path2)
                                            break
                                        except:
                                            os.remove(final_video_path2)

                                    try:
                                        os.rename(final_video_path2, rename_into_mp4_file2)
                                    except OSError:
                                        pass
                                        
                                    try:
                                        my_clip = VideoFileClip(rename_into_mp4_file2)
                                        my_clip.audio.write_audiofile(final_mp3_file2)
                                        my_clip.close()

                                        # Set audio file properties
                                        f2 = music_tag.load_file(final_mp3_file2)
                                        f2['title'] = vfl_name
                                        f2.save()

                                        try:
                                            os.remove(rename_into_mp4_file2)
                                        except OSError:
                                            pass

                                        try:
                                            os.remove(final_video_path2)
                                        except OSError:
                                            pass

                                        self.msg_autoClose(msg_text=f"Audio file '{final_mp3_fl2}' has been successfully been generated.", msg_title="Audio Conversion complete:",close_tmr=2,msg_icon=QMessageBox.Information)
                                    except KeyError:
                                        mp4_to_mp32 = rename_into_mp4_file2.replace('.mp4', '.mp3')
                                        os.rename(rename_into_mp4_file2, mp4_to_mp32)

                                        # Set audio file properties
                                        f2 = music_tag.load_file(mp4_to_mp32)
                                        f2['title'] = vfl_name
                                        f2.save()

                                        self.msg_autoClose(msg_text=f"Audio file '{final_mp3_fl2}' has been successfully been generated.", msg_title="Audio Conversion complete:",close_tmr=2,msg_icon=QMessageBox.Information)
    
                
        except json.decoder.JSONDecodeError as json_err1:

            self.apps_log_sys(err_msgtitle="Json decode error",err_msgtxt="File can not be read due the json file seems to be curropted",logerr_msg=str(json_err1))

            self.msg_autoClose(msg_title="Notify - Json file recorrection intiated",msg_text="Started to overwite the the json file.",close_tmr=2,msg_icon=QMessageBox.Information)     
            
            self.overwrite_formats_json()

            self.msg_autoClose(msg_title="Notify - Click 'Convert' button",msg_text="Thank you for your patience... Please click the 'Convert' button again.",close_tmr=3,msg_icon=QMessageBox.Information) 

        except KeyError as key_err1:

            self.apps_log_sys(err_msgtitle="Json key error",err_msgtxt="File can not be read due the json file having a wrong key",logerr_msg=str(key_err1))

            self.msg_autoClose(msg_title="Notify - Json file recorection intiated",msg_text="Started to overwite the the json file.",close_tmr=2,msg_icon=QMessageBox.Information)

            self.overwrite_formats_json()

            self.msg_autoClose(msg_title="Notify - Click 'Convert' button",msg_text="Thank you for your patience... Please click the 'Convert' button again.",close_tmr=3,msg_icon=QMessageBox.Information) 

    def play_aud(self):

        # Get path data from path json file
        returned_path_data = self.get_paths()

        if returned_path_data != None: 
            # Get path list element count
            file_count = len(os.listdir(returned_path_data))
        
            if file_count !=0:

                fl_dialog_title = f"Please choose a audio to be played from '{audio_app_folder_name}' folder :"

                wild_cards = "Mp3 (*.mp3);;Waveform Audio File Format (*.wav)"

                file2, check2 = QFileDialog.getOpenFileName(self, fl_dialog_title,returned_path_data, wild_cards)

                if check2:
                    file2_choosen_re = file2.replace("/","\\")

                    playsound(file2_choosen_re)

                    # print("\n-> Played audio")

                else:
                    pass         

            else:
                logerr_txt = f"PlayMp3 Error: No video converted audios found in directory '{returned_path_data}'."
                self.apps_log_sys(logerr_msg=logerr_txt,err_msgtitle="PlayMp3 Error - No text audios found: ",err_msgtxt="Opps! PlayMp3 couldn't run since there are no video converted audios found.           ")
        else:
            pass
    
    def exit(self):
        returned_msg_outs = self.yn_msgbox(txt5="Are you sure you want to exit the app?",title5="Exit -Yes/No:",msg_icon=QMessageBox.Warning)

        if returned_msg_outs == QMessageBox.No:
            pass
        elif returned_msg_outs == QMessageBox.Yes:
            # app = QtWidgets.QApplication(sys.argv)
            # sys.exit(app.exec_())
            sys.exit()
        else:
            pass

    def rst(self):
        self.mode_comboBox.setCurrentText("Single file")
        # print("\n-> Values reseted")

    def yn_msgbox(self,txt5,title5,msg_icon):

        # returned_icofl_path = self.icon_fls()

        # print(returned_icofl_path)

        yn_msg = QMessageBox()

        yn_msg.setIcon(msg_icon)

        yn_msg.setIcon(QMessageBox.Warning)

        yn_msg.setText(txt5)
      
        yn_msg.setWindowTitle(title5)
              
        yn_msg.setStandardButtons(QMessageBox.Yes | QMessageBox.No)

        msg_button_out = yn_msg.exec()

        return msg_button_out

    def open_aud_folder(self):
        try:
            # Get path data from path json file
            returned_path_data = self.get_paths()

            if returned_path_data != None:
                # Get path list element count
                file_count = len(os.listdir(returned_path_data))
                # print("\n-> Audio folder oppened.")

                if file_count == 0:

                    logerr_txt = f"Access Denied: No video converted audios found in directory: {returned_path_data} ."
                    self.apps_log_sys(logerr_msg=logerr_txt,err_msgtitle="Access denied - No audios found: ",err_msgtxt="No video converted audios found.             ")
                else:
                    os.startfile(returned_path_data)

                # os.startfile(returned_path_data)

            else:
                pass

        except json.decoder.JSONDecodeError as json_err1:

            self.apps_log_sys(err_msgtitle="Json decode error",err_msgtxt="File can not be read due the json file seems to be curropted",logerr_msg=str(json_err1))

            self.msg_autoClose(msg_title="Notify - Json file recorrection intiated",msg_text="Started to overwite the the json file.",close_tmr=2,msg_icon=QMessageBox.Information)     

            self.overwrite_path_json()

            self.msg_autoClose(msg_title="Notify - Click 'Ctrl+O' button again",msg_text="Thank you for your patience... Please try to access audios again.",close_tmr=3,msg_icon=QMessageBox.Information) 

        except KeyError as key_err1:

            self.apps_log_sys(err_msgtitle="Json key error",err_msgtxt="File can not be read due the json file having a wrong key",logerr_msg=str(key_err1))

            self.msg_autoClose(msg_title="Notify - Json file recorection intiated",msg_text="Started to overwite the the json file.",close_tmr=2,msg_icon=QMessageBox.Information)

            self.overwrite_path_json()

            self.msg_autoClose(msg_title="Notify - Click 'Ctrl+O' button",msg_text="Thank you for your patience... Please try to access audios again.",close_tmr=3,msg_icon=QMessageBox.Information) 

    def open_log_folder(self):
        try:
            os.makedirs(logs_folder_path)
        except OSError:
            pass

        os.startfile(logs_folder_path)

        # print("\n-> Logs folder openned.")

    def open_log_file(self):

        try:
            os.makedirs(logs_folder_path)
        except OSError:
            pass

        if os.path.exists(logfl_path)==False:
            with open(logfl_path,'w',encoding="utf-8") as logfl_w2:
                logfl_w2.writable()
        else:
            pass
        
        os.startfile(logfl_path)
 
        # print("\n-> Logs file openned.")
 
if __name__ == "__main__":
 
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
